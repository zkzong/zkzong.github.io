{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/affix.js","path":"js/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/exturl.js","path":"js/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/js.cookie.js","path":"js/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/post-details.js","path":"js/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/scroll-cookie.js","path":"js/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/scrollspy.js","path":"js/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1555513903324},{"_id":"themes/next/.all-contributorsrc","hash":"43eb0149c78e464c695f0dd758bb8c59353182b3","modified":1555513903323},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1555513903326},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1555513903328},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1555513903329},{"_id":"themes/next/.gitignore","hash":"69e702b833c6aa9646ad24c45dd9cf00ab5ce6b9","modified":1555513903361},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1555513903363},{"_id":"themes/next/.travis.yml","hash":"fb9ac54e875f6ea16d5c83db497f6bd70ae83198","modified":1555513903364},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1555513903366},{"_id":"themes/next/README.md","hash":"3f72e5a5051ca2bdaccdda684c46dc4fdb4413a6","modified":1555513903367},{"_id":"themes/next/_config.yml","hash":"3594ef5bb0039eb669087f37580948685e4552e2","modified":1555515550454},{"_id":"themes/next/bower.json","hash":"3c1c82d1644f5690534e71feed8df82e563748e0","modified":1555513903371},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1555513903372},{"_id":"themes/next/gulpfile.coffee","hash":"6407d9063bd88ede299ff7c2a59cf2c82e079476","modified":1555513903411},{"_id":"themes/next/package.json","hash":"23449a55881f7316766c0fcf3ce4c93adbc6076b","modified":1555513903608},{"_id":"source/_posts/Git Command.md","hash":"87cd34a4a5bf390242385e004dae604509fcfcbd","modified":1555429951397},{"_id":"source/_posts/IntelliJ IDEA Default Keymap.md","hash":"bbfe9ad004297cabb524296a491b6de0df0942ae","modified":1555429993639},{"_id":"source/_posts/Java解惑.md","hash":"e276fefd4b1299b890da7b7dbdff5945ed1fa4a9","modified":1555430056431},{"_id":"source/_posts/hello-world.md","hash":"029f91fccbe8f87c0f3ea10c4042300d2fa7edc0","modified":1555427351286},{"_id":"source/_posts/正则表达式必知必会.md","hash":"d27deba5b211e749370e9fb220ffbfcb8253b8df","modified":1555430102409},{"_id":"source/categories/index.md","hash":"f1ef4663733e3d309f023aba74e792afe423cb67","modified":1555514676755},{"_id":"source/about/index.md","hash":"04768d1d030266827bcf4eed40f9ed1ecbe795db","modified":1555514487726},{"_id":"source/tags/index.md","hash":"b92731ec10ff544a239dd57d20bbd9682c31b9b7","modified":1555514692538},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1555513903375},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"1e49c08b446678336b2eacc8bf581faca969f34b","modified":1555513903376},{"_id":"themes/next/docs/AUTHORS.md","hash":"51a0a13da55ff3d596970b2f9ab4531c6b2211f2","modified":1555513903378},{"_id":"themes/next/docs/DATA-FILES.md","hash":"9a1895c0a0db705c4c48f512e86917f9af1ec3fb","modified":1555513903379},{"_id":"themes/next/docs/INSTALLATION.md","hash":"b74ef6fedf76cdb156e2265759ee0a789ddd49cc","modified":1555513903381},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"721a1aa9feed1b580ab99af8e69ed22699121e88","modified":1555513903382},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1555513903384},{"_id":"themes/next/docs/MATH.md","hash":"0540cd9c961b07931af9f38a83bc9a0f90cd5291","modified":1555513903385},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"c9f2ed8e15c137b1885d9ca8b7197d9f457971e9","modified":1555513903387},{"_id":"themes/next/languages/de.yml","hash":"79b3221344da335743b5ef5a82efa9338d64feb0","modified":1555513903415},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1555513903416},{"_id":"themes/next/languages/en.yml","hash":"d66b8b48840443a4f9c72c7696a21e292f685a47","modified":1555513903417},{"_id":"themes/next/languages/es.yml","hash":"db1a9f2af477212544c830c2dd986400e26ddd6a","modified":1555513903419},{"_id":"themes/next/languages/fr.yml","hash":"2429c90dad5bb865e3a969be2b373f19b3a77b3b","modified":1555513903420},{"_id":"themes/next/languages/id.yml","hash":"f3302a4dfdc9be38a52d6e081411574b1ea01671","modified":1555513903422},{"_id":"themes/next/languages/it.yml","hash":"31eb878b53d60ff47e3e534cdd7a839c8801ac6e","modified":1555513903424},{"_id":"themes/next/languages/ja.yml","hash":"3f25eca504ee5a519987b4402731f1bb7f5191c9","modified":1555513903426},{"_id":"themes/next/languages/ko.yml","hash":"75f2fe142f76bf623e34ed3570598226f55f2b8b","modified":1555513903427},{"_id":"themes/next/languages/nl.yml","hash":"08f16ce395dacc88847fc30dc6b985ce22fb8948","modified":1555513903429},{"_id":"themes/next/languages/pt-BR.yml","hash":"c7de8b77f44e75be4f04423088a1c891537aa601","modified":1555513903431},{"_id":"themes/next/languages/pt.yml","hash":"ca5072c967e5eb1178ffed91827459eda6e4e6e2","modified":1555513903434},{"_id":"themes/next/languages/ru.yml","hash":"720b92a9ec075b68737d296b1f29ad8e01151c85","modified":1555513903436},{"_id":"themes/next/languages/tr.yml","hash":"6d2f53d3687a7a46c67c78ab47908accd8812add","modified":1555513903437},{"_id":"themes/next/languages/uk.yml","hash":"6320439c6e9ff81e5b8f8129ca16e9a744b37032","modified":1555513903439},{"_id":"themes/next/languages/vi.yml","hash":"e2f0dd7f020a36aa6b73ed4d00dcc4259a7e5e9d","modified":1555513903440},{"_id":"themes/next/languages/zh-CN.yml","hash":"069f15da910d6f9756be448167c07ea5aa5dc346","modified":1555513903442},{"_id":"themes/next/languages/zh-HK.yml","hash":"c22113c4a6c748c18093dae56da5a9e8c5b963cd","modified":1555513903443},{"_id":"themes/next/languages/zh-TW.yml","hash":"dbf4dd87716babb2db4f5332fae9ec190a6f636a","modified":1555513903444},{"_id":"themes/next/layout/_layout.swig","hash":"ba786b1baba49021928e2e508da53f2fd1369b3f","modified":1555513903453},{"_id":"themes/next/layout/archive.swig","hash":"61bc56e77e653684fc834f63dcbdadf18687c748","modified":1555513903599},{"_id":"themes/next/layout/category.swig","hash":"ad0ac6a1ff341f8eab9570e7fb443962948c5f9d","modified":1555513903600},{"_id":"themes/next/layout/index.swig","hash":"bdcc9f57adef49706b16b107791cacecbc23c1dc","modified":1555513903601},{"_id":"themes/next/layout/page.swig","hash":"5d06ee8f477ffc39932d0251aa792ffcaf8faf14","modified":1555513903602},{"_id":"themes/next/layout/post.swig","hash":"af74e97d57cf00cde6f8dbd4364f27910915454e","modified":1555513903604},{"_id":"themes/next/layout/schedule.swig","hash":"e79f43df0e9a6cf48bbf00882de48c5a58080247","modified":1555513903605},{"_id":"themes/next/layout/tag.swig","hash":"283519d4d5b67814412863a3e0212bac18bcc5a0","modified":1555513903607},{"_id":"themes/next/scripts/merge-configs.js","hash":"5f96f63e86825fd7028c2522e4111103e261a758","modified":1555513903618},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1555513903619},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1555513903948},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1555513903949},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1555513903951},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555513903851},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"a51de08657f5946f4028b11373280ddc04639525","modified":1555513903390},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"aaf25d304793344e2d026062768c93005723f5c6","modified":1555513903398},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"1a4e41adcf5831057f3f7b3025ed4a5ef7c442b4","modified":1555513903395},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"018a259694f4a8c7c384e1f323531442cba5fbf3","modified":1555513903399},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"7b2963daac19b0c14f98ebef375d5fbce8fc3f44","modified":1555513903392},{"_id":"themes/next/docs/ru/README.md","hash":"aeb95129ab1da9ec41786bfa86dc32c739ee6358","modified":1555513903394},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"508caa37443407860d03f4d8bd56b007585125ef","modified":1555513903401},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"b17fc344ff61603f83387c0f9b2b2189aae81d50","modified":1555513903405},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"67f4a987e7db0ab1ce1ea4c311f2961df07b6681","modified":1555513903402},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"baca12cc24be082f1db28c7f283493569666321c","modified":1555513903403},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"734b371a0dd910eb9fe087f50c95ce35340bb832","modified":1555513903407},{"_id":"themes/next/docs/zh-CN/README.md","hash":"058c4c6f17c144d88d64c0b12cbd4f1c9fc61522","modified":1555513903408},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"2095d1214a4e519a1d31b67b41c89080fa3285d3","modified":1555513903410},{"_id":"themes/next/layout/_custom/head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1555513903448},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1555513903450},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1555513903452},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"891ab67815969dd8736cb22fbbb3f791b8fff4e4","modified":1555513903460},{"_id":"themes/next/layout/_macro/post.swig","hash":"31ba947998f0c962b04ae7f42f9d3db934209a79","modified":1555513903462},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"91017f58f83d9505ce99109fffdc51c032bf017e","modified":1555513903464},{"_id":"themes/next/layout/_partials/comments.swig","hash":"d0b9e841d55c974d02f43823a06a2627f8e46431","modified":1555513903468},{"_id":"themes/next/layout/_partials/footer.swig","hash":"9a79dde1412b1b1473380e8b6cacfe1930ed321b","modified":1555513903470},{"_id":"themes/next/layout/_partials/github-banner.swig","hash":"1ad13269b43b900356f3bdab7947d6a86f035a2c","modified":1555513903471},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"914155d5d758306cff405beefd4a07973fd8fc77","modified":1555513903490},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"dee345054d564dd56f74bb143942d3edd1cb8150","modified":1555513903492},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"cccd93d30787675010b1a74ef02eb5b813ec1d96","modified":1555513903514},{"_id":"themes/next/layout/_scripts/exturl.swig","hash":"c2e8f4b3a2bf991320ecc827dcdc227399ad5b51","modified":1555513903516},{"_id":"themes/next/layout/_scripts/next-boot.swig","hash":"50c3ae6b50f173ae70f8c3312f7c6da1097eb9b6","modified":1555513903517},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"efb3404a3303622f3be60944d9d1926972c5c248","modified":1555513903519},{"_id":"themes/next/layout/_scripts/scroll-cookie.swig","hash":"8a992b7fe42b9c1a5eb9d937b0827aed91586d94","modified":1555513903530},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"4130f995f0c4f81a44266194ecae9df96fad174c","modified":1555513903532},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"87bcb495f7ddd81cc3fe2c2a886e51c08053019b","modified":1555513903555},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"4b93dc7ac0573c402aabcb5c933bbcb893b07c51","modified":1555513903558},{"_id":"themes/next/layout/_third-party/chatra.swig","hash":"87182367d7954457cb2498bbfa9445c03c2d619e","modified":1555513903559},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"07fc0ae1a30c5aa9269d6efdaec598164b1d191c","modified":1555513903574},{"_id":"themes/next/layout/_third-party/mermaid.swig","hash":"80dfc0879866e6512cb67590a3b2d8741a66f980","modified":1555513903581},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"7db4ad4a8dd5420dad2f6890f5299945df0af970","modified":1555513903582},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"76f5933925670044ec65b454295ba7e0a8439986","modified":1555513903584},{"_id":"themes/next/layout/_third-party/pdf.swig","hash":"4ae61c7efb16e962385bfe522a38c4d29cdcccbe","modified":1555513903585},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"7cc1294a5fbedf3502688248a433c358339e5ae0","modified":1555513903586},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"c476dc3693a9dd0be2d136a45b0d7fdef55d4d92","modified":1555513903588},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"882cd0b68c493af1b6d945660f9c21085e006ffc","modified":1555513903589},{"_id":"themes/next/layout/_third-party/tidio.swig","hash":"b44010cd577e4d063c3406772938c4b117ec7b7b","modified":1555513903597},{"_id":"themes/next/scripts/filters/exturl.js","hash":"b19c7c1021e57367b3b3bbf5678381017ed5667d","modified":1555513903612},{"_id":"themes/next/scripts/helpers/engine.js","hash":"cdb6152582313268d970ffeef99b4a8a7850f034","modified":1555513903615},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"a40ce6bc852bb4bff8b9f984fa064741dd151e96","modified":1555513903616},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"4519ab8e6898f2ee90d05cde060375462b937a7d","modified":1555513903623},{"_id":"themes/next/scripts/tags/button.js","hash":"95a520f6529424a03c7ead6dbfd5e626d672febb","modified":1555513903622},{"_id":"themes/next/scripts/tags/exturl.js","hash":"f9f25905adecfb8be49def4ff3b0b8bbc6955d84","modified":1555513903625},{"_id":"themes/next/scripts/tags/full-image.js","hash":"a6b2264215c555c553b2c5db85fa90678798d0d5","modified":1555513903626},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"23d839333422375e85d44e476f554faf49973a3c","modified":1555513903628},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"ab4a82a7246265717556c7a42f897430340b88cf","modified":1555513903630},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1555513903632},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1555513903633},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1555513903635},{"_id":"themes/next/scripts/tags/pdf.js","hash":"ab995f0fc60d60f637220e2651111b775b8a06de","modified":1555513903636},{"_id":"themes/next/scripts/tags/tabs.js","hash":"72a5adbd8f300bee1d0c289367598ca06b2bed17","modified":1555513903637},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1555513903639},{"_id":"themes/next/source/css/main.styl","hash":"5e7d28bc539e84f8b03e68df82292f7fc0f2d023","modified":1555513903848},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1555513903854},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1555513903855},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1555513903856},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1555513903858},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1555513903859},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1555513903861},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1555513903862},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1555513903864},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1555513903865},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1555513903867},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1555513903868},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1555513903871},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1555513903873},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1555513903874},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1555513903876},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1555513903877},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1555513903879},{"_id":"themes/next/source/images/searchicon.png","hash":"025d64ba0160a3a2257dd2b3032b5f7c9dd9b82b","modified":1555513903880},{"_id":"themes/next/source/js/affix.js","hash":"ad343aa406fd8181b5f310434817ce98fc2219e3","modified":1555513903884},{"_id":"themes/next/source/js/algolia-search.js","hash":"84906eeae57bd06744dd20160b93eacf658f97e2","modified":1555513903885},{"_id":"themes/next/source/js/exturl.js","hash":"c48aa4b3c0e578a807fd3661e6cd4f3890777437","modified":1555513903887},{"_id":"themes/next/source/js/js.cookie.js","hash":"f11e84def0352b7dd6393f1b83e55a40ab468686","modified":1555513903888},{"_id":"themes/next/source/js/motion.js","hash":"d0a6d9dbcc57159e54bbb1f683b86632ae0b78f0","modified":1555513903890},{"_id":"themes/next/source/js/next-boot.js","hash":"696a0c2cf158001576d56b48195ec8e39e835b47","modified":1555513903892},{"_id":"themes/next/source/js/post-details.js","hash":"7d309b771e86c7e22ce11cc25625481ef7d5985c","modified":1555513903893},{"_id":"themes/next/source/js/scroll-cookie.js","hash":"c4867626afab749404daf321367f9b6b8e223f69","modified":1555513903900},{"_id":"themes/next/source/js/scrollspy.js","hash":"68d3690152c89e7adb08bb35ec28dbda2bd93686","modified":1555513903902},{"_id":"themes/next/source/js/utils.js","hash":"d58033a6a108981c81ac58ee321167047d7a25df","modified":1555513903904},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555513903785},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555513903786},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555513903791},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555513903843},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555513903847},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"4eb8e222dc337211efb0d3bbdb5e29af3e6ecdb8","modified":1555513903457},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"25aea3d764b952f3f6d28ab86d7212d138e892df","modified":1555513903459},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"b57bf9c865bed0f22157176a8085de168a1aef77","modified":1555513903474},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"fd079a414ca0f42f4cddd00247a9d5a5f58c4d8e","modified":1555513903475},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"466e69a4b4fbdc57f33e60a16b0d87e494385e21","modified":1555513903477},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"03f669356bbaa70144b743f3312178e1981ac3a8","modified":1555513903479},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"c909f6e96373c151dea325bcddfdd8c9522421b6","modified":1555513903481},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"39c4ad0e36b7c1260da98ba345f7bd72a2ac0f2e","modified":1555513903483},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"e015c7d9b84062b60b15b36be3ef11929dd10943","modified":1555513903484},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"2b905ddd5dea8558c3fd95aacad241da6b6800f4","modified":1555513903487},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"f46699a9daa5fef599733cbab35cb75cf7a05444","modified":1555513903489},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"be6683db6a269d83bb0441d7cf74db63a240fa8a","modified":1555513903494},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f331ad02beea8990066d32ad6ec9f859672c3615","modified":1555513903496},{"_id":"themes/next/layout/_partials/post/reward.swig","hash":"f62b801c7999da67b4bdca9c5e373b9b5ed039dc","modified":1555513903497},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"fb7727e8ec63a58238a7206bf70eb273c8879993","modified":1555513903499},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1555513903501},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"f14e9e8c27af82f1bfe794e252dec0d7e521f503","modified":1555513903502},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1555513903504},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"31245e09ce0465b994cebd94223a531585c4eab4","modified":1555513903505},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c609097b95eb6127c2784f47f2230e6e6efc0be2","modified":1555513903508},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"54b43d406cf37932e7b60f46814e864d31b1842c","modified":1555513903510},{"_id":"themes/next/layout/_partials/share/likely.swig","hash":"647e8677d1ccfb3f7918dd3ea2ff7078504a845d","modified":1555513903512},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"cf87ab778618a32119ec1c4ac2079a51385b1913","modified":1555513903521},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a62c93f19429f159bcf0c2e533ffc619aa399755","modified":1555513903523},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"3c548934b97cc426544947f7a2ae35c270b5e33f","modified":1555513903525},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7ef07edd2a97a3774229990d2f0a6eefa31bd015","modified":1555513903527},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"828eb9c47f34090c841a2e9a0b3f31b0e4ccf40a","modified":1555513903528},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"66d562b3778dbc839f7c00103bd0099c5d61602a","modified":1555513903536},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"83dd7df11b100bae38c9faab9a478f92149a0315","modified":1555513903537},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"73576c9683d9ad9b124916dc6c660607fe7cc1fa","modified":1555513903538},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"2e1de38f44af00209129d4051b7ae307cb11ad68","modified":1555513903540},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"335005a9f8b36349f0ad0a7beeba6969c55fc7f7","modified":1555513903541},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"53202062267391353d49f269e7eb74eb87d30921","modified":1555513903543},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"8ab040fccba41675bc835973515530af8a51f8bd","modified":1555513903544},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"54d7993ae773573ee103c22802b7e98b193e1a3a","modified":1555513903546},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"623e73bedef067ac24a398ef27c8197295da872d","modified":1555513903547},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"39928f358dd13d9fc1a4641800e57be157ecd815","modified":1555513903548},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"71fb01bcad43bc9410ab19190373b9f7e59215b5","modified":1555513903550},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"d18c87d7839e7407e39acd2998bcc9e0b34611b0","modified":1555513903552},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"a22d1ea29a5ffe46199ab7d108a291a05af8d5b6","modified":1555513903553},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"4cff8bf5c42c62f7f0ac1f0d70f839dae39ba77a","modified":1555513903554},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"bc3fc9d053b3d1fc0cd3918bf9a629a6f38f6414","modified":1555513903562},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"d685df1516cb138d7a83bac5d7878a1e0fa8bc04","modified":1555513903564},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"8b4a94dd80b3bac7c5390c8a7fd377b88c2cb78e","modified":1555513903565},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"4e86e1ace90a70bb8862f5e6de9dbe7bfc046bee","modified":1555513903566},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"9a4923d2aa5182531ea7a7fb9abe824450026208","modified":1555513903568},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"b3818fd0b3028dadf341b6d0b180e1243683de6a","modified":1555513903570},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"1a5d94f5779a2ce13abc886dd78e0617f89c34b9","modified":1555513903571},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"1b72c755101c9dfb85da13df9a0abccf37cd1dd2","modified":1555513903573},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"43a20fa0e9ae2f4254f04813f9c619dd36b49ae5","modified":1555513903577},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"ea1c136f960667a0a13b334db497b9b19c41f629","modified":1555513903578},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"767ba29f258db5d2e5baf875a6f36ac1d44df6a3","modified":1555513903580},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"143ef265c96a8ea2fb93c36c5ffb9c5e940f7693","modified":1555513903593},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"078bd2d5815eb23e8c5f74467dc0042babea00ae","modified":1555513903594},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"d45ca53af17d1d83fd27f8ed0917a72f0060e1a9","modified":1555513903596},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1555513903781},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1555513903783},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"1aabac9e37a8f4451c86d09037b3a1f8b30eaf5e","modified":1555513903788},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"21a14a19149f1cb8e011c477f29dd1352675605b","modified":1555513903789},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"e9b0752f08398709e787546a246baca12b4c557f","modified":1555513903839},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1555513903841},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"da7049f3d9a157abe0ecc62611edcf43605ba84d","modified":1555513903844},{"_id":"themes/next/source/css/_variables/base.styl","hash":"ebc95eeb8966d17cdc7dd0de009deaef1fe65064","modified":1555513903845},{"_id":"themes/next/source/js/schemes/muse.js","hash":"ccc0c5cd4ec6f8159c98990ad83f11a5c0b0234c","modified":1555513903897},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"3eea56cc9ce47bb4760930c4c69cebf847a7fbb2","modified":1555513903898},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1555513903908},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1555513903911},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1555513903912},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1555513903913},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1555513903915},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1555513903942},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1555513903944},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1555513903945},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1555513903934},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"463817cbbd804ce134cb3e7e721431cb0e1616f2","modified":1555513903646},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"5c0ca7f801859cff254d2f5b7d1a70d66ff61a8d","modified":1555513903645},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1555513903649},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"9fd526db0527c71243f05e18086f937dc67b1c3e","modified":1555513903647},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"997058180065d986e05df72992cc2cbfd7febd7e","modified":1555513903651},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"a4c6ee546a94fd69e5b7a1e4c054ab8cacb73d2a","modified":1555513903683},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"cfa64bd8ee2ff9f943673e339d69341e76fbf031","modified":1555513903714},{"_id":"themes/next/source/css/_common/components/scrollbar.styl","hash":"afdd21533db18d846e1a2663b1199761b1bd2c1e","modified":1555513903716},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"1a4ac0d119f2126ef8951897338706edce112235","modified":1555513903767},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"40144394fdfe05d400f39f6763f66f75479a2e34","modified":1555513903770},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"35c6fd7eab3779bd9e38b7ba8825ab0c67a1be7a","modified":1555513903772},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"1d21dbfdaca5cdf73ba84f7e6d37ca329c0cf3bd","modified":1555513903773},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"fec36a14080104b5862e9f021eab117d87c5f7c5","modified":1555513903775},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1555513903776},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"107f42aa590ec4ba0765a0bc5d735f0f09edc0ff","modified":1555513903778},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"a609ff811f2b2764f5470236fe2fb1f3aa6ccba5","modified":1555513903796},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"d0e9065b0dbbc01811259f0597d1790268b4881b","modified":1555513903799},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"8da8416213127595dfc4d2b358639194647e7bd3","modified":1555513903801},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1555513903802},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"40f266e24af4dedc9497056ab18ebcfda38dd47d","modified":1555513903804},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"06d9d00257abd28414ec0b746f866bf9911cf5ec","modified":1555513903805},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"6aee54cd5a20181e18596565356bd54c66e33823","modified":1555513903806},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"25f05ed8da68d034dce7f06e0f20f6cd55841070","modified":1555513903808},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"04706657af638f2746ae59520e6fc78577c7682c","modified":1555513903817},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"157e6915dcf5990566e463acffa71043b2651c07","modified":1555513903819},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"234b44cfd03f9c9e3e179ff5fd698ac876341913","modified":1555513903820},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"6aee54cd5a20181e18596565356bd54c66e33823","modified":1555513903821},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1555513903823},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"b9619c9827f969ca2e2f5878552362a7b858918f","modified":1555513903829},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"e73d6da74c5755442e831d8fd7d922c5b32bd892","modified":1555513903830},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0b3001909f3446843b226030524ea8498d4d8997","modified":1555513903832},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"5b5e0a02a7bf63de9efcd33a4e482939cce5822d","modified":1555513903833},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"0d6f0df798449b710e1e5dbd43d470089b2a3c95","modified":1555513903835},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"adb7379f3b9001840eb38b260434e89365771a81","modified":1555513903836},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1555513903921},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1555513903918},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1555513903920},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1555513903929},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1555513903939},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1555513903931},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"2df409df04fdb52d7234876a9f6e502edd4e3929","modified":1555513903655},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"a8f4d4b86acaa34c99111b2dde5d0779cc7e0de6","modified":1555513903658},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"c9cfb4b99e1ec8ec9cf075cb761b8f7fa5fe63fd","modified":1555513903659},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1555513903660},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"33200f60bd6a8bbfc66dd49a239bcc75c2f564c1","modified":1555513903662},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"b8647d6140141b0a160607f6353e4d4594cca92e","modified":1555513903663},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"3a0efe849587b34f20d4e260028dc799215b0bb3","modified":1555513903665},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"e5a5f8747fdf2ca960e4e73c081b8952afd62224","modified":1555513903673},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fa1cea6fcc3f552d57cc7d28380a304859139bf6","modified":1555513903674},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1555513903676},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"9a8fb61bd2d184de9d206e62ba8961d1845c5669","modified":1555513903677},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1555513903678},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"c27527cdeb9e3a9f447f7238f442a5dc33fde4e6","modified":1555513903680},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"c97c819a65f6967485184399397601e5133deda6","modified":1555513903681},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1555513903686},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"f3b0d259e991ac86454ae5eac6bc94dc8691d8c9","modified":1555513903688},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"fc94dd09b4245143b452d6cf2fc4c12134d99d6d","modified":1555513903690},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a73346f999b31355075cd58637946a8950cf6f7e","modified":1555513903691},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"f14cefc99309934d4103a3aa785e1258d858813f","modified":1555513903693},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"b6a241626783d2ac115d683fd59ec283af68e5bb","modified":1555513903695},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d77f85d3af2d7090d84b28ab01c6a49f92eec647","modified":1555513903696},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"13d365ee626c01f17ec664b3f54f51d8b9ee7cf4","modified":1555513903697},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"4aad8e36178faaa71a767af0084d578df4c09f73","modified":1555513903699},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ccd0b1309acff0c676fdcc848a8ae2d05f0369ab","modified":1555513903701},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1555513903702},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1555513903706},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"539fc0880b2e035e8316d5d4b423703195c1b7ba","modified":1555513903707},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"c8009fd9598a661b7d23158b5121b6ac266939e9","modified":1555513903709},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"981795aad232c8bd3f52a0ed8720db696d18a234","modified":1555513903710},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"615fca7dff197a2ca3df674cf963ce70b8525985","modified":1555513903712},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"024e8ff40ca881c6fbf45712897e22f58a3811ab","modified":1555513903667},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"9c1a082e6c1f96187a099c3f4cb5424c0c9fd06e","modified":1555513903669},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1555513903670},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"a5484d8436b2b7862faf6e7309a9e7b88cdd0027","modified":1555513903719},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"03a4e75e963e3e7cc393d588b1495a88d52e0e40","modified":1555513903722},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"ab1776c5dc537beabb0ab81a0f04e08bebad070b","modified":1555513903720},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-button.styl","hash":"b36eea093bd4b32056b5de6f370ff57e50b25a49","modified":1555513903723},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"e58bb8b7127aa21e8260493a425ec00fcb25d338","modified":1555513903724},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"7e2ba73073daaea0a18c3d67ff137dd683af7011","modified":1555513903726},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"9204c79c05d620ecd5d411cdf11e27441b6281dc","modified":1555513903727},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"0eadef0381f696de7f88d7dc5f0ddc3cd5d309b3","modified":1555513903730},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"3cb387fa70017f3c24a1a1884461d29deda54585","modified":1555513903732},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"ed3a2960ebce7396d1893bb8e08c99c7d9259140","modified":1555513903733},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"fde59300ec38868676ff5ed495b9dc9b02d07ffc","modified":1555513903736},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"2d58ad90f148e845bc7023751a7a13260600f8d6","modified":1555513903737},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1555513903739},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"b43421291bf85b589e8d0ec853e238d36ab80631","modified":1555513903740},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"020fac447d7a17c03e2802f0f724ae0738088354","modified":1555513903741},{"_id":"themes/next/source/css/_common/components/tags/pdf.styl","hash":"3baeeb51cfe123e99235ee1816d0e1f6a97c7852","modified":1555513903743},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"54c5398c7bf5b8bd9f38a9ece1dd82a9255f9a30","modified":1555513903745},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"da7a21f5a2f7dcf4c5a4788d7670159ca4132b65","modified":1555513903746},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"4305813408a1cd6aba764a7769b94b081d383d4f","modified":1555513903750},{"_id":"themes/next/source/css/_common/components/third-party/copy-code.styl","hash":"d9c244b1c3a09a7fccd3c3f732e6fb112a8cd565","modified":1555513903751},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"a01484e350ad5fc9b1fdfbfafb2ddd9687ad4d20","modified":1555513903753},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"2fbe52f955da41c7a14eb09918bf86a252e4504f","modified":1555513903754},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"2a1008f1044b450b806adc166754ba9513e68375","modified":1555513903756},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"ed8a12982c0497eeb9d7642781abeb801428f83d","modified":1555513903758},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"6880467b4f6d7b057fb8291aa10966429a0a3bff","modified":1555513903760},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"35dc9f3990fadff3ea038d4e8ac75923219886ed","modified":1555513903761},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"9801977a23268e36c5deefd270423f6f1a0c3bb2","modified":1555513903763},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"7cf42f96ba6b249c75e00dad251ebacf7de61e6c","modified":1555513903764},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1555513903812},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1555513903814},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1555513903826},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1555513903926},{"_id":"public/categories/index.html","hash":"a6bc9ba247774115f4ad10a4ec57a6c2a7ccdf21","modified":1555515607609},{"_id":"public/about/index.html","hash":"29d309db1e447b387d90204c7ea6bc4a5a6e2ef5","modified":1555515607609},{"_id":"public/tags/index.html","hash":"32b16339af2bf754a7e67898694f222636f455ce","modified":1555515607609},{"_id":"public/2019/04/16/Git Command/index.html","hash":"4b3f97853d5846c62f66555c76af16d5beb67350","modified":1555515607609},{"_id":"public/2019/04/16/IntelliJ IDEA Default Keymap/index.html","hash":"45b5e5e5a1ff7f4050fdc38d6b3864f4c38ccbd5","modified":1555515607609},{"_id":"public/archives/index.html","hash":"4013d41ab0b6063a86008aad1e7d33073bdd8a2d","modified":1555515607610},{"_id":"public/archives/2019/index.html","hash":"604f028d1dacef5d0d5551482582c67011567f15","modified":1555515607610},{"_id":"public/archives/2019/04/index.html","hash":"7d5ca3c4bc456a51742aa6b2494d45d974d51865","modified":1555515607610},{"_id":"public/categories/Git/index.html","hash":"4ce1dab32e819a84811ecd806e3e9176e479fb79","modified":1555515607610},{"_id":"public/categories/IDEA/index.html","hash":"f40786f44b35c43e21f50d3d21b469523889b646","modified":1555515607610},{"_id":"public/categories/Java/index.html","hash":"56b76087ee8d755b46e80ec515eeae5f33160865","modified":1555515607610},{"_id":"public/categories/正则表达式/index.html","hash":"beba926247dab2cef78f10063e25d34fe27a1c9e","modified":1555515607610},{"_id":"public/2019/04/16/hello-world/index.html","hash":"29f194f2cd1c19d152d2aa32dfa3a64339746147","modified":1555515607610},{"_id":"public/2019/04/16/Java解惑/index.html","hash":"ba9c59510e454404229c8e0f9127594582908170","modified":1555515607611},{"_id":"public/2019/04/16/正则表达式必知必会/index.html","hash":"ad370ea4802e77778ceb5a8d9087852d9510efbe","modified":1555515607611},{"_id":"public/index.html","hash":"732e6d132c7bfa84c341a5dd5c843194ba75e392","modified":1555515607611},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1555515607641},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1555515607642},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1555515607642},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1555515607642},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1555515607642},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1555515607642},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1555515607642},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1555515607642},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1555515607642},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1555515607643},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1555515607643},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1555515607643},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1555515607643},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1555515607643},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1555515607643},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1555515607643},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1555515607643},{"_id":"public/images/searchicon.png","hash":"025d64ba0160a3a2257dd2b3032b5f7c9dd9b82b","modified":1555515607643},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1555515607644},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1555515607644},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1555515608823},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1555515608841},{"_id":"public/js/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1555515608855},{"_id":"public/js/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1555515608856},{"_id":"public/js/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1555515608856},{"_id":"public/js/js.cookie.js","hash":"e0afce539f1fb81d59e3c6f0a68d736e2fb45d93","modified":1555515608856},{"_id":"public/js/motion.js","hash":"a16bc0b701646bf6653484675f4d5dc0f892d184","modified":1555515608856},{"_id":"public/js/next-boot.js","hash":"e0615efab5f81ba0fd39c0527eac31144deac7ce","modified":1555515608856},{"_id":"public/js/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1555515608856},{"_id":"public/js/utils.js","hash":"3c987de7cfb944c33e9e527f1214724c7aafc796","modified":1555515608856},{"_id":"public/js/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1555515608857},{"_id":"public/js/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1555515608857},{"_id":"public/js/schemes/muse.js","hash":"e9bfa6b343b67625f58757efce46ccdaac8f308c","modified":1555515608857},{"_id":"public/js/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1555515608857},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1555515608857},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1555515608857},{"_id":"public/css/main.css","hash":"3c1ab2e13587e4e13a3a42e00d270517977e7430","modified":1555515608857},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1555515608857},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1555515608858},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1555515608858},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1555515608858},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1555515608858},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1555515608858},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1555515608858}],"Category":[{"name":"Git","_id":"cjuldtu430004nodi0xj5x0c1"},{"name":"IDEA","_id":"cjuldtu4u0009nodiykc0rusn"},{"name":"Java","_id":"cjuldtu4w000bnodied7symtk"},{"name":"正则表达式","_id":"cjuldtu4y000dnodibwn7wyc7"}],"Data":[],"Page":[{"title":"categories","date":"2019-04-17T15:24:36.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-04-17 23:24:36\n---\n","updated":"2019-04-17T15:24:36.755Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjuldtu3o0001nodiie069na6","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2019-04-17T15:21:27.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-04-17 23:21:27\n---\n","updated":"2019-04-17T15:21:27.726Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjuldtu3y0003nodij8uc9wnb","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2019-04-17T15:24:52.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-04-17 23:24:52\n---\n","updated":"2019-04-17T15:24:52.538Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjuldtu4j0006nodi0801cvti","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Git Command","date":"2019-04-15T16:00:00.000Z","_content":"\n[github-git-cheat-sheet](https://training.github.com/kit/downloads/github-git-cheat-sheet.pdf)\n\n[Git Reference](http://gitref.org/)\n\n[git-cheat-sheet-detail](http://www.git-tower.com/blog/git-cheat-sheet-detail/)\n","source":"_posts/Git Command.md","raw":"---\ntitle: Git Command\ndate: 2019-04-16\ncategories: Git\n---\n\n[github-git-cheat-sheet](https://training.github.com/kit/downloads/github-git-cheat-sheet.pdf)\n\n[Git Reference](http://gitref.org/)\n\n[git-cheat-sheet-detail](http://www.git-tower.com/blog/git-cheat-sheet-detail/)\n","slug":"Git Command","published":1,"updated":"2019-04-16T15:52:31.397Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuldtu3g0000nodiyaoourhi","content":"<p><a href=\"https://training.github.com/kit/downloads/github-git-cheat-sheet.pdf\" target=\"_blank\" rel=\"noopener\">github-git-cheat-sheet</a></p>\n<p><a href=\"http://gitref.org/\" target=\"_blank\" rel=\"noopener\">Git Reference</a></p>\n<p><a href=\"http://www.git-tower.com/blog/git-cheat-sheet-detail/\" target=\"_blank\" rel=\"noopener\">git-cheat-sheet-detail</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://training.github.com/kit/downloads/github-git-cheat-sheet.pdf\" target=\"_blank\" rel=\"noopener\">github-git-cheat-sheet</a></p>\n<p><a href=\"http://gitref.org/\" target=\"_blank\" rel=\"noopener\">Git Reference</a></p>\n<p><a href=\"http://www.git-tower.com/blog/git-cheat-sheet-detail/\" target=\"_blank\" rel=\"noopener\">git-cheat-sheet-detail</a></p>\n"},{"title":"IntelliJ IDEA Default Keymap","date":"2019-04-15T16:00:00.000Z","_content":"\n[IntelliJ IDEA Default Keymap](https://www.jetbrains.com/idea/docs/IntelliJIDEA_ReferenceCard.pdf)","source":"_posts/IntelliJ IDEA Default Keymap.md","raw":"---\ntitle: IntelliJ IDEA Default Keymap\ndate: 2019-04-16\ncategories: IDEA\n---\n\n[IntelliJ IDEA Default Keymap](https://www.jetbrains.com/idea/docs/IntelliJIDEA_ReferenceCard.pdf)","slug":"IntelliJ IDEA Default Keymap","published":1,"updated":"2019-04-16T15:53:13.639Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuldtu3t0002nodipw58gpky","content":"<p><a href=\"https://www.jetbrains.com/idea/docs/IntelliJIDEA_ReferenceCard.pdf\" target=\"_blank\" rel=\"noopener\">IntelliJ IDEA Default Keymap</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.jetbrains.com/idea/docs/IntelliJIDEA_ReferenceCard.pdf\" target=\"_blank\" rel=\"noopener\">IntelliJ IDEA Default Keymap</a></p>\n"},{"title":"Java解惑","date":"2019-04-15T16:00:00.000Z","_content":"\n# Java解惑\n\n---\n\n## 第2章 表达式之谜\n1. 奇数性\n```java\npublic static boolean isOdd(int i) {\n\treturn i % 2 == 1;\n}\n```\n当取余操作返回一个非零的结果时，它与左操作数具有相同的正负符号。\n当i是一个负奇数时，i%2等于-1而不是1。\n```java\npublic static boolean isOdd(int i) {\n    return i % 2 != 0;\n}\n```\n2. 找零时刻\n```java\npublic class Change {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(2.00-1.10);\n\t}\n}\n```\n问题在于1.1这个数字不能被精确表示为一个double，因此被表示为最接近它的double值。\n并不是所有的小数都可以用二进制浮点数精确表示。\n二进制浮点对于货币计算是非常不合适的。\n解决该问题的一种方式是使用某种整数类型。\n解决该问题的另一种方式是使用执行精确小数运算的BigDecimal。\n一定要用BigDecimal(String)构造器，而千万不要用BigDecimal(double)。\n在需要精确答案的地方，要避免使用float和double；对于货币计算，要使用int、long或BigDecimal。\n3. 长整除\n```java\npublic class LongDivision {\n\tpublic static void main(String[] args) {\n\t\tfinal long MICROS_PER_DAY = 24 * 60 * 60 * 1000 * 1000;\n\t\tfinal long MILLIS_PER_DAY = 24 * 60 * 60 * 1000;\n\t\tSystem.out.println(MICROS_PER_DAY/MILLIS_PER_DAY);\n\t}\n}\n```\n\tfinal long MICROS_PER_DAY = 24L * 60 * 60 * 1000 * 1000;\n\tfinal long MILLIS_PER_DAY = 24L * 60 * 60 * 1000;\n当在操作很大的数字时，千万要提防溢出——它可是一个缄默杀手。\n4. 初级问题\n```java\npublic class Elementary {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(12345 + 5432l);\n\t}\n}\n```\n在long类型字面常量中，一定要用大写的L，千万不要用小写的l。\n要避免使用单个l字母作为变量名。\n5. 十六进制的趣事\n```java\npublic class JoyOfHex {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(Long.toHexString(0x100000000L + 0xcafebabe));\n\t}\n}\n```\n负的十进制常量可以很明确地用一个减号来标识。\n如果十六进制和八进制字面常量的最高位被置位了，那么它们就是负数。\nSystem.out.println(Long.toHexString(0x100000000L + 0xcafebabeL));\n通常最好是避免混合类型的计算。\n6. 多重转型\n```java\npublic class Multicast {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println((int)(char)(byte)-1);\n\t}\n}\n```\n如果最初的数值类型是有符号的，就执行符号扩展；如果它是char，那么不管它将要被转换成什么类型，都执行零扩展。\n7. 互换内容\n```java\npublic class CleverSwap {\n\tpublic static void main(String[] args) {\n\t\tint x = 1984;\n\t\tint y = 2001;\n\t\tx ^= y ^= x ^= y;\n\t\tSystem.out.println(\"x=\"+x+\";y=\"+y);\n\t}\n}\n```\nC/C++中运行正确。Java中不正确。\n操作符的操作数是从左向右求值的。\n实际运行过程如下：\n```java\nint tmp1 = x;\nint tmp2 = y;\nint tmp3 = x ^ y;\nx = tmp3;\ny = tmp2 ^ tmp3;\nx = tmp1 ^ y;\ny = (x ^= (y ^= x)) ^ y;\n```\n在单个表达式中不要对相同的变量赋值两次。\n8. Dos Equis\n```java\npublic class DosEquis {\n\tpublic static void main(String[] args) {\n\t\tchar x= 'X';\n\t\tint i = 0;\n\t\tSystem.out.println(true ? x : 0);\n\t\tSystem.out.println(false ? i : x);\n\t}\n}\n```\n混合类型的计算会引起混乱，而这一点在条件表达式中比在其他任何地方都表现得更明显。\n确定条件表达式结果类型的规则：\n（1） 如果第二个和第三个操作数具有相同的类型，那么它就是条件表达式的类型。\n（2） 如果一个操作数的类型是T，T表示byte、short、或char，而另一个操作数是一个int类型的常数表达式，它的值可以用类型T表示，那么条件表达式的类型就是T。\n（3） 否则，将对操作数类型进行二进制数字提升，而条件表达式的类型就是第二个和第三个操作数被提升之后的类型。\n将final修饰符用于i的声明可以把i转变为一个常量表达式。\n在条件表达式中使用类型相同的第二个和第三个操作数。\n9. 半斤\n```java\nx += i;\nx = x + i;\n```\n复合赋值E1 op= E2等价于简单赋值E1=(T)((E1)op(E2))，其中T是E1的类型。\n复合赋值表达式自动将所执行计算的结果转型为其左侧变量的类型。\n请不要将复合赋值操作符作用于byte、short或char类型的变量。在将复合赋值操作符作用于int类型的变量上时，要确保表达式右侧不是long、float或double类型。在将复合赋值操作符作用于float类型的变量上时，要确保表达式右侧不是double类型。\n10. 八两\n```java\nx = x + i;\nx += i;\n```\n如果在+=操作符左侧的操作数是String类型的，那么它允许右侧的操作数是任意类型。\n简单赋值操作符（=）允许其左侧的是对象引用类型，只要表达式的右侧与左侧的变量时赋值兼容的即可。\n## 第3章 字符之谜\n11. 最后的笑声\n```java\npublic class LastLaugh {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(\"H\" + \"a\");\n\t\tSystem.out.println('H' + 'a');\n\t}\n}\n```\n当且仅当+操作符的操作数中至少有一个是String类型时，才会执行字符串连接操作。\n    System.out.println(\"2+2=\"+2+2);\n12. ABC\n```java\npublic class Abc {\n\tpublic static void main(String[] args) {\n\t\tString letters = \"ABC\";\n\t\tchar[] numbers = {'1', '2', '3'};\n\t\tSystem.out.println(letters + \" easy as \" + numbers);\n\t}\n}\n```\n\tSystem.out.println(numbers);\n要想将一个char数组转换成一个字符串，就要调用String.valueOf(char[])方法。\n13. 动物庄园\n```java\npublic class AnimalFarm {\n\tpublic static void main(String[] args) {\n\t\tfinal String pig = \"length:10\";\n\t\tfinal String dog = \"length:\" + pig.length();\n\t\tSystem.out.println(\"Animals are equal:\" + pig == dog);\n\t}\n}\n```\n+比==的优先级高。\n在使用字符串连接操作符时，总是将重要的操作数用括号括起来。\n在比较对象引用时，应该优先使用equals方法而不是==操作符，除非需要比较的是对象的标识而不是对象的值。\n14. 转义字符的溃败\n```java\npublic class EscapeRout {\n\tpublic static void main(String[] args) {\n\t\t// \\u0022 is the Unicode escape for double quote (\")\n\t\tSystem.out.println(\"a\\u0022.length()+\\u0022b\".length());\t}\n}\n```\nJava对在字符串字面常量中的Unicode转义字符没有提供任何特殊处理。\n在字符串和字符字面常量中优先选择的是转义字符序列，而不是Unicode转义字符。\n不要使用Unicode转义字符来表示ASCII字符。\n15. 令人晕头转向的Hello\n```java\n/**\n * Generated by the IBM IDL-to-Java compiler, version 1.0\n * from F:\\TestRoot\\apps\\a1\\units\\include\\PolicyHome.idl\n * Wednesday, June 17, 1998 6:44:40 o'clock AM GMT+00:00\n */\npublic class Test {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.print(\"Hell\");\n\t\tSystem.out.println(\"o world\");\n\t}\n}\n```\n问题在于注释的第三行，它包含了字符\\units。\nUnicode转义字符必须是良构的，即使出现在注释中也是如此。\n在Javadoc注释中，应该使用HTML实体转义字符来代替Unicode转义字符。\n工具应该确保不将Windows文件名置于所生成的Java源文件的注释中。\n16. 行打印程序\n```java\npublic class LinePrinter {\n\tpublic static void main(String[] args) {\n\t\t// Note: \\u000A is Unicode representation of linefeed (LF)\n\t\tchar c = 0x000A;\n\t\tSystem.out.println(c);\n\t}\n}\n```\n第三行的注释\n除非确实是必需的，否则就不要用使用Unicode转义字符。\n17. 嗯？\n只有在你要向程序中插入用其他任何方式都无法表示的字符时，Unicode转义字符才是必需的，除此之外的任何情况都应该避免使用它们。\n18. 字符串奶酪\n```java\npublic class StringCheese {\n\tpublic static void main(String[] args) {\n\t\tbyte[] bytes = new byte[256];\n\t\tfor (int i = 0; i < 256; i++)\n\t\t\tbytes[i] = (byte) i;\n\t\tString str = new String(bytes);\n\t\tfor (int i = 0, n = str.length(); i < n; i++)\n\t\t\tSystem.out.print((int) str.charAt(i) + \" \");\n\t}\n}\n```\n在char序列和byte序列之间转换时，可以且通常应该显式地指定字符集。\n每当要将一个byte序列转换成一个String时，你都在使用一个字符集，不管是否显式指定了它。\n19. 漂亮的火花（块注释符）\n```java\npublic class Classifier {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(classify('n') + classify('+') + classify('2'));\n\t}\n\n\tstatic String classify(char ch) {\n\t\tif (\"0123456789\".indexOf(ch) >= 0)\n\t\t\treturn \"NUMERAL \";\n\t\tif (\"abcdefghijklmnopqrstuvwxyz\".indexOf(ch) >= 0)\n\t\t\treturn \"LETTER \";\n\t\t/* (Operators not supported yet)\n\t\tif (\"+-*/&|!=\".indexOf(ch) >= 0)\n\t\treturn \"OPERATOR \";\n\t\t*/\n\t\treturn \"UNKNOWN \";\n\t}\n}\n```\n在注释中没有特殊处理字符串字面常量。\n块注释不能嵌套。\n注释掉代码段的最好方式是使用单行的注释序列。\n块注释不能可靠地注释掉代码段。\n20. 我的类是什么\n```java\npublic class Me {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(Me.class.getName().replaceAll(\".\", \"/\") + \".class\");\n\t}\n}\n```\nString.replaceAll接受了一个正则表达式作为它的第一个参数。正则表达式”.”可以匹配任何单个的字符。\n```java\nMe.class.getName().replaceAll(\"\\\\.\", \"/\");\nSystem.out.println(Me.class.getName().replaceAll(Pattern.quote(\".\"), \"/\") + \".class\");\n```\n21. 我的类是什么？镜头2\n```java\npublic class MeToo {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(MeToo.class.getName().replaceAll(\"\\\\.\",\n\t\t\t\tFile.separator)\n\t\t\t\t+ \".class\");\n\t}\n}\n```\n第二个参数不是一个普通的字符串，而是一个替代字符串。在替代字符串中出现的反斜杠会把紧随其后的字符进行转义，从而导致其被按字面含义而处理了。\n```java\nSystem.out.println(MeToo.class.getName().replaceAll(\"\\\\.\",\n    Matcher.quoteReplacement(File.separator))\n    + \".class\");\nSystem.out.println(MeToo.class.getName().replace(\".\", File.separator)     + \".class\");\nSystem.out.println(MeToo.class.getName().replace('.',                    File.separatorChar) + \".class\");\n```\n在使用不熟悉的类库方法时一定要格外小心。\n22. URL的愚弄\n```java\npublic class BrowserTest {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.print(\"iexplore:\");\n\t\thttp: // www.google.com;\n\t\tSystem.out.println(\":maximize\");\n\t}\n}\n```\n在程序中间出现的URL是一个语句标号（statement label）后面跟着尾注释（end-of-line comment）。\n仔细地写注释，并让它们跟上时代；去除那些已遭废弃的代码。\n23. 不劳而获\n```java\npublic class Rhymes {\n\tprivate static Random rnd = new Random();\n\n\tpublic static void main(String[] args) {\n\t\tStringBuffer word = null;\n\t\tswitch (rnd.nextInt(2)) {\n\t\tcase 1:\n\t\t\tword = new StringBuffer('P');\n\t\tcase 2:\n\t\t\tword = new StringBuffer('G');\n\t\tdefault:\n\t\t\tword = new StringBuffer('M');\n\t\t}\n\t\tword.append('a');\n\t\tword.append('i');\n\t\tword.append('n');\n\t\tSystem.out.println(word);\n\t}\n}\n```\n要当心栅栏柱错误。\n不要从一个非空的case向下进入另一个case。\n不管在什么时候，都要尽可能使用熟悉的惯用法和API。如果必须使用不熟悉的API，那么请仔细阅读其文档。\n```java\n\t\tswitch (rnd.nextInt(3)) {\n\t\tcase 1:\n\t\t\tword = new StringBuffer(\"P\");\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tword = new StringBuffer(\"G\");\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tword = new StringBuffer(\"M\");\n\t\t\tbreak;\n\t\t}\n\nSystem.out.println(\"PGM\".charAt(rnd.nextInt(3)) + \"ain\");\n\npublic class Rhymes {\n\tpublic static void main(String args[]) {\n\t\tString a[] = { \"Main\", \"Pain\", \"Gain\" };\n\t\tSystem.out.println(randomElement(a));\n\t}\n\n\tprivate static Random rnd = new Random();\n\n\tprivate static String randomElement(String[] a) {\n\t\treturn a[rnd.nextInt(a.length)];\n\t}\n}\n```\nchar不是String，而是更像int。\n要提防各种诡异的谜题。\n## 第4章 循环之谜\n24.\t尽情享受每一个字节\n```java\npublic class BigDelight {\n\tpublic static void main(String[] args) {\n\t\tfor (byte b = Byte.MIN_VALUE; b < Byte.MAX_VALUE; b++) {\n\t\t\tif (b == 0x90)\n\t\t\t\tSystem.out.print(\"Joy!\");\n\t\t}\n\t}\n}\n\nif (b == (byte)0x90)\tSystem.out.print(\"Joy!\");\n\nif ((b & 0xff) == 0x90)\tSystem.out.print(\"Joy!\");\n\nprivate static final byte TARGET = (byte) 0x90; \nif (b == TARGET)\tSystem.out.print(\"Joy!\");\n```\n要避免混合类型比较，因为它们内在地容易引起混乱。\n请使用声明的常量替代“魔数”。\n25.\t无情的增量操作\n```java\npublic class Increment {\n\tpublic static void main(String[] args) {\n\t\tint j = 0;\n\t\tfor (int i = 0; i < 100; i++)\n\t\t\tj = j++;\n\t\tSystem.out.println(j);\n\t}\n}\n```\n不要在单个表达式中对相同的变量赋值超过一次。\n26.\t在循环中\n```java\npublic class InTheLoop {\n\tpublic static final int END = Integer.MAX_VALUE;\n\tpublic static final int START = END - 100;\n\n\tpublic static void main(String[] args) {\n\t\tint count = 0;\n\t\tfor (int i = START; i <= END; i++)\n\t\t\tcount++;\n\t\tSystem.out.println(count);\n\t}\n}\n\nfor (long i = START; i <= END; i++)\n```\n无论你在何时使用了一个整数类型，都要意识到其边界条件。\n```java\nint i = START;\ndo {\n\tcount++;\n} while (i++ != END);\n```\n27.\t变幻莫测的i值\n```java\npublic class Shifty {\n\tpublic static void main(String[] args) {\n\t\tint i = 0;\n\t\twhile(-1 << i != 0)\n\t\t\ti++;\n\t\tSystem.out.println(i);\n\t}\n}\n```\n移位操作符只使用其右操作数的低5位作为移位长度。或者是低6位，如果其左操作数是一个long类型数值。\n28.\t就\n29.\tGf\n30.\tD\n31.\tG\n32.\tG\n33.\tG\n34.\tG\n35.\tG\n## 第5章 异常之谜\n36.\tF\n37.\tF\n38.\tF\n39.\tF\n40.\tF\n41.\tF\n42.\tF\n43.\tF\n44.\tF\n45.\tF\n\n## 第6章 类之谜\n46.\t令人混淆的构造器案例\n```java\npublic class Confusing {\n\tprivate Confusing(Object o) {\n\t\tSystem.out.println(\"Object\");\n\t}\n\n\tprivate Confusing(double[] dArray) {\n\t\tSystem.out.println(\"double array\");\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tnew Confusing(null);\n\t}\n}\n```\nJava的重载解析过程是分两阶段运行的。第一阶段选取所有可获得并且可应用的方法或构造器。第二阶段在第一阶段选取的方法或构造器中选取最精确的一个。\n在测试哪一个方法或构造器最精确时，并没有使用实参。\n要想强制要求编译器选择一个精确的重载版本，需要将实参转型为形参所声明的类型。\n避免使用重载。\n47. 啊呀！狸猫变犬子\n```java\nclass Counter {\n\tprivate static int count;\n\n\tpublic static void increment() {\n\t\tcount++;\n\t}\n\n\tpublic static int getCount() {\n\t\treturn count;\n\t}\n}\n\nclass Dog extends Counter {\n\tpublic Dog() {\n\t}\n\n\tpublic void woof() {\n\t\tincrement();\n\t}\n}\n\nclass Cat extends Counter {\n\tpublic Cat() {\n\t}\n\n\tpublic void meow() {\n\t\tincrement();\n\t}\n}\n\npublic class Ruckus {\n\tpublic static void main(String[] args) {\n\t\tDog[] dogs = { new Dog(), new Dog() };\n\t\tfor (int i = 0; i < dogs.length; i++)\n\t\t\tdogs[i].woof();\n\t\tCat[] cats = { new Cat(), new Cat(), new Cat() };\n\t\tfor (int i = 0; i < cats.length; i++)\n\t\t\tcats[i].meow();\n\t\tSystem.out.print(Dog.getCount() + \" woofs and \");\n\t\tSystem.out.println(Cat.getCount() + \" meows\");\n\t}\n}\n```\n每一个静态字段在声明它的类及其所有子类中共享一份单一的副本。\n优选组合而不是继承。\n48. 我所得到的都是静态的\n```java\nclass Dog {\n\tpublic static void bark() {\n\t\tSystem.out.print(\"woof \");\n\t}\n}\n\nclass Basenji extends Dog {\n\tpublic static void bark() {\n\t}\n}\n\npublic class Bark {\n\tpublic static void main(String args[]) {\n\t\tDog woofer = new Dog();\n\t\tDog nipper = new Basenji();\n\t\twoofer.bark();\n\t\tnipper.bark();\n\t}\n}\n```\n对静态方法的调用不存在任何动态的分派机制。\n千万不要用一个表达式来标识一个静态方法调用。\n千万不要隐藏静态方法。\n49.\t比生命更大\n```java\npublic class Elvis {\n\tpublic static final Elvis INSTANCE = new Elvis();\n\tprivate final int beltSize;\n\tprivate static final int CURRENT_YEAR = Calendar.getInstance().get(\n\t\t\tCalendar.YEAR);\n\n\tprivate Elvis() {\n\t\tbeltSize = CURRENT_YEAR - 1930;\n\t}\n\n\tpublic int beltSize() {\n\t\treturn beltSize;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(\"Elvis wears a size \" + INSTANCE.beltSize()\n\t\t\t\t+ \" belt.\");\n\t}\n}\n```\n在final类型的静态字段被初始化之前，存在着读取其值的可能。\n要想改正一个类初始化循环，需要重新对静态字段的初始器进行排序，使得每一个初始器都出现在任何依赖于它的初始器之前。\n要当心类初始化循环。\n50.\t不是你的类型\n```java\npublic class Type1 {\n\tpublic static void main(String[] args) {\n\t\tString s = null;\n\t\tSystem.out.println(s instanceof String);\n\t}\n}\n```\ninstanceof操作符被定义为在其左操作数为null时返回false。\n```java\npublic class Type2 {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(new Type2() instanceof String);\n\t}\n}\n```\ninstanceof操作符有这样的要求：如果两个操作数的类型都是类，其中一个必须是另一个的子类型。\n```java\npublic class Type3 {\n\tpublic static void main(String args[]) {\n\t\tType3 t3 = (Type3) new Object();\n\t}\n}\n```\n51.\t要点何在\n```java\nclass Point {\n\tprivate final int x, y;\n\tprivate final String name; // Cached at construction time\n\n\tPoint(int x, int y) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tname = makeName();\n\t}\n\n\tprotected String makeName() {\n\t\treturn \"[\" + x + \",\" + y + \"]\";\n\t}\n\n\tpublic final String toString() {\n\t\treturn name;\n\t}\n}\n\npublic class ColorPoint extends Point {\n\tprivate final String color;\n\n\tColorPoint(int x, int y, String color) {\n\t\tsuper(x, y);\n\t\tthis.color = color;\n\t}\n\n\tprotected String makeName() {\n\t\treturn super.makeName() + \":\" + color;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(new ColorPoint(4, 2, \"purple\"));\n\t}\n}\n```\n在一个final类型的实例字段被赋值之前，存在着取用其值的可能。\n循环的实例初始化时可以且总是应该避免的。\n千万不要在构造器中调用可覆写的方法。\n52.\t总和的玩笑\n```java\nclass Cache {\n\tstatic {\n\t\tinitializeIfNecessary();\n\t}\n\tprivate static int sum;\n\n\tpublic static int getSum() {\n\t\tinitializeIfNecessary();\n\t\treturn sum;\n\t}\n\n\tprivate static boolean initialized = false;\n\n\tprivate static synchronized void initializeIfNecessary() {\n\t\tif (!initialized) {\n\t\t\tfor (int i = 0; i < 100; i++)\n\t\t\t\tsum += i;\n\t\t\tinitialized = true;\n\t\t}\n\t}\n}\n\npublic class Client {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(Cache.getSum());\n\t}\n}\n```\n要么使用积极初始化，要么使用延迟初始化，千万不要同时使用二者。\n请考虑类初始化的顺序，特别是当初始化显得很重要时更是如此。\n53.\t做你的事吧\n54.\tNull与Void\n```java\npublic class Null {\n\tpublic static void greet() {\n\t\tSystem.out.println(\"Hello world!\");\n\t}\n\n\tpublic static void main(String[] args) {\n\t\t((Null) null).greet();\n\t}\n}\n```\n静态方法调用的限定表达式是可以计算的，但是它的值将被忽略。\n```java\nNull.greet();\ngreet();\n```\n55.\t特创论\n```java\npublic class Creator {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0; i < 100; i++)\n\t\t\tCreature creature = new Creature();\n\t\tSystem.out.println(Creature.numCreated());\n\t}\n}\n\nclass Creature {\n\tprivate static long numCreated = 0;\n\n\tpublic Creature() {\n\t\tnumCreated++;\n\t}\n\n\tpublic static long numCreated() {\n\t\treturn numCreated;\n\t}\n}\n```\n一个局部变量声明作为一条语句只能直接出现在一个语句块中。（一个语句块是由一对花括号以及包含在这对花括号的语句和声明构成的）\n```java\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tCreature creature = new Creature();\n\t\t}\n\n\t\tfor (int i = 0; i < 100; i++)\n\t\t\tnew Creature();\n\n// Thread-safe creation counter\nclass Creature {\n\tprivate static long numCreated;\n\n\tpublic Creature() {\n\t\tsynchronized (Creature.class) {\n\t\t\tnumCreated++;\n\t\t}\n\t}\n\n\tpublic static synchronized long numCreated() {\n\t\treturn numCreated;\n\t}\n}\n\nclass Creature {\n\tprivate static AtomicLong numCreated = new AtomicLong();\n\n\tpublic Creature() {\n\t\tnumCreated.incrementAndGet();\n\t}\n\n\tpublic static long numCreated() {\n\t\treturn numCreated.get();\n\t}\n}\n```\n在使用一个变量来对实例的创建进行计数时，要使用long类型而不是int类型的变量，以防止溢出。\n## 第7章 库之谜\n56. 大问题\n```java\npublic class BigProblem {\n\tpublic static void main(String[] args) {\n\t\tBigInteger fiveThousand = new BigInteger(\"5000\");\n\t\tBigInteger fiftyThousand = new BigInteger(\"50000\");\n\t\tBigInteger fiveHundredThousand = new BigInteger(\"500000\");\n\t\tBigInteger total = BigInteger.ZERO;\n\t\ttotal.add(fiveThousand);\n\t\ttotal.add(fiftyThousand);\n\t\ttotal.add(fiveHundredThousand);\n\t\tSystem.out.println(total);\n\t}\n}\n```\nBigInteger实例是不可变的。\n```java\ntotal = total.add(fiveThousand);\ntotal = total.add(fiftyThousand);\ntotal = total.add(fiveHundredThousand);\n```\n57.\t名字里有什么\n```java\npublic class Name {\n\tprivate final String first, last;\n\n\tpublic Name(String first, String last) {\n\t\tthis.first = first;\n\t\tthis.last = last;\n\t}\n\n\tpublic boolean equals(Object o) {\n\t\tif (!(o instanceof Name))\n\t\t\treturn false;\n\t\tName n = (Name) o;\n\t\treturn n.first.equals(first) && n.last.equals(last);\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tSet<Name> s = new HashSet<Name>();\n\t\ts.add(new Name(\"Mickey\", \"Mouse\"));\n\t\tSystem.out.println(s.contains(new Name(\"Mickey\", \"Mouse\")));\n\t}\n}\n```\n无论何时，只要覆写了equals方法，就必须同时覆写hashCode方法。\n58.\t产生它的散列码\n```java\npublic class Name {\n\tprivate final String first, last;\n\n\tpublic Name(String first, String last) {\n\t\tthis.first = first;\n\t\tthis.last = last;\n\t}\n\n\tpublic boolean equals(Name n) {\n\t\treturn n.first.equals(first) && n.last.equals(last);\n\t}\n\n\tpublic int hashCode() {\n\t\treturn 31 * first.hashCode() + last.hashCode();\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tSet<Name> s = new HashSet<Name>();\n\t\ts.add(new Name(\"Donald\", \"Duck\"));\n\t\tSystem.out.println(s.contains(new Name(\"Donald\", \"Duck\")));\n\t}\n}\n```\n重载为错误和混乱提供了机会。\n为了避免无意识地重载，应该机械地对你想要覆写的每一个超类方法都复制其声明。\n59. 差是什么\n以0开头的整型字面常量将被解释成为八进制数值。\n千万不要在一个整型字面常量前面加上一个0。\n60. 一行以毙之\n了解类库中有些什么可以为你节省大量的时间和精力，并且可以提高程序的速度和质量。\n61. 日期游戏\nDate将一月表示为0，而Calendar延续了这个错误。\nDate.getDay返回的是Date实例所表示的星期日期，而不是月份日期。\n在使用Calendar或Date的时候一定要当心，千万要记着查阅API文档。\n62. 名字游戏\n不要使用IdentityHashMap，除非你需要其基于标识的语义，它不是一个通用目的的Map实现。\n63. 更多同样的问题\n不要因为偶然地添加了一个返回类型，而将一个构造器声明变成了一个方法声明。\n要遵守标准的命名约定。\n64. 按余数编组\nMath.abs不能保证一定会返回非负的结果。\n65. 疑似配需的惊人传奇\n不要使用基于减法的比较器，除非你能够确保要比较的数值之间的差永远不会大于Integer.MAX_VALUE。\n## 第8章 更多类之谜\n66. 一件私事\n```java\nclass Base {\n\tpublic String className = \"Base\";\n}\n\nclass Derived extends Base {\n\tprivate String className = \"Derived\";\n}\n\npublic class PrivateMatter {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(new Derived().className);\n\t}\n}\n```\n避免隐藏。\n一个覆写方法的访问修饰符所提供的访问权限要大于等于被覆写方法的访问修饰符所提供的访问权限。而字段则不必。\n67.\t对字符串上瘾\n要避免重用平台类的名字，并且千万不要难过重用java.lang中的类名。\n68.\t灰色的阴影\n```java\npublic class ShadesOfGray {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(X.Y.Z);\n\t}\n}\n\nclass X {\n\tstatic class Y {\n\t\tstatic String Z = \"Black\";\n\t}\n\n\tstatic C Y = new C();\n}\n\nclass C {\n\tString Z = \"White\";\n}\n```\n当一个变量和一个类型具有相同的名字，并且它们位于相同的作用域时，变量名具有优先权。\n相似地，变量名和类型名可以遮掩包名。\n69.\t黑色的渐隐\n70.\t一揽子交易\n```java\npackage click;\npublic class CodeTalk {\n\tpublic void doIt() {\n\t\tprintMessage();\n\t}\n\n\tvoid printMessage() {\n\t\tSystem.out.println(\"Click\");\n\t}\n}\n\npackage hack;\nimport click.CodeTalk;\npublic class TypeIt {\n\tprivate static class ClickIt extends CodeTalk {\n\t\tvoid printMessage() {\n\t\t\tSystem.out.println(\"Hack\");\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tClickIt clickit = new ClickIt();\n\t\tclickit.doIt();\n\t}\n}\n```\n一个包内私有的方法不能被位于另一个包中的某个方法直接覆写。\n71.\t进口税\n72.\t终极危难\nfinal修饰符对方法和字段而言，意味着某些完全不同的事情。对于方法，final意味着该方法不能被覆写（对实例方法而言）或者隐藏（对静态方法而言）。对于字段，final意味着该字段不能被赋值超过一次。\n73.\t隐私在公开\n重用名字是危险的；应该避免隐藏、遮蔽和遮掩。\n74.\t同一性的危机\n75.\t头还是尾\n名字重用的术语表\n第9章 更多库之谜\n76.\t乒乓\n```java\npublic class PingPong {\n\tpublic static synchronized void main(String[] a) {\n\t\tThread t = new Thread() {\n\t\t\tpublic void run() {\n\t\t\t\tpong();\n\t\t\t}\n\t\t};\n\t\tt.run();\n\t\tSystem.out.print(\"Ping\");\n\t}\n\n\tstatic synchronized void pong() {\n\t\tSystem.out.print(\"Pong\");\n\t}\n}\n```\n当你想调用一个线程的start方法时要多加小心，别弄错成调用这个线程的run方法了。\n77.\t乱锁之妖\n78.\t反射的影响\n```java\npublic class Reflector {\n\tpublic static void main(String[] args) throws Exception {\n\t\tSet<String> s = new HashSet<String>();\n\t\ts.add(\"foo\");\n\t\tIterator it = s.iterator();\n\t\tMethod m = it.getClass().getMethod(\"hasNext\");\n\t\tSystem.out.println(m.invoke(it));\n\t}\n}\n```\n访问位于其它包中的非公共类型的成员是不合法的。\nObject.getClass().getMethod(“methodName”)这种惯用法虽然很常见，但是却有问题，它不应该被使用。\n在使用反射访问某个类型时，请使用表示某种可访问类型的Class对象。\nMethod m = Iterator.class.getMethod(\"hasNext\");\n79.\t狗狗的幸福生活\n避免遮蔽。\n使用Thread(Runnable)构造器来替代对Thread的继承。\n80.\t更深层的反射\n```java\npublic class Outer {\n\tpublic static void main(String[] args) throws Exception {\n\t\tnew Outer().greetWorld();\n\t}\n\n\tprivate void greetWorld() throws Exception {\n\t\tSystem.out.println(Inner.class.newInstance());\n\t}\n\n\tpublic class Inner {\n\t\tpublic String toString() {\n\t\t\treturn \"Hello world\";\n\t\t}\n\t}\n}\n```\n除非你确实需要一个外围实例i，否则应该优先使用静态成员类而不是非静态成员类。\n请避免使用反射类实例化内部类。\n81.\t无法识别的字符化\n```java\npublic class Greeter {\n\tpublic static void main(String[] args) {\n\t\tString greeting = \"Hello world\";\n\t\tfor (int i = 0; i < greeting.length(); i++)\n\t\t\tSystem.out.write(greeting.charAt(i));\n\t}\n}\n```\nwrite(int)是唯一一个在自动刷新功能开启的情况下不刷新PrintStream的输出方法。\n尽可能使用熟悉的惯用法，如果不得不使用陌生的API，请一定要参考相关的文档。\n82.\t啤酒爆炸\n83.\t诵读困难者的一神论\n84.\t戛然而止\n```java\npublic class SelfInterruption {\n\tpublic static void main(String[] args) {\n\t\tThread.currentThread().interrupt();\n\t\tif (Thread.interrupted()) {\n\t\t\tSystem.out.println(\"Interrupted: \" + Thread.interrupted());\n\t\t} else {\n\t\t\tSystem.out.println(\"Not interrupted: \" + Thread.interrupted());\n\t\t}\n\t}\n}\n```\n调用Thread.interrupted方法总是会清除当前线程的中断状态。\nThread.currentThread().isInterrupted()\n不要使用Thread.interrupted方法，除非你想要清除当前线程的中断状态。\n85.\t延迟初始化\n\n\n\n\n\n\n","source":"_posts/Java解惑.md","raw":"---\ntitle: Java解惑\ndate: 2019-04-16\ncategories: Java\n---\n\n# Java解惑\n\n---\n\n## 第2章 表达式之谜\n1. 奇数性\n```java\npublic static boolean isOdd(int i) {\n\treturn i % 2 == 1;\n}\n```\n当取余操作返回一个非零的结果时，它与左操作数具有相同的正负符号。\n当i是一个负奇数时，i%2等于-1而不是1。\n```java\npublic static boolean isOdd(int i) {\n    return i % 2 != 0;\n}\n```\n2. 找零时刻\n```java\npublic class Change {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(2.00-1.10);\n\t}\n}\n```\n问题在于1.1这个数字不能被精确表示为一个double，因此被表示为最接近它的double值。\n并不是所有的小数都可以用二进制浮点数精确表示。\n二进制浮点对于货币计算是非常不合适的。\n解决该问题的一种方式是使用某种整数类型。\n解决该问题的另一种方式是使用执行精确小数运算的BigDecimal。\n一定要用BigDecimal(String)构造器，而千万不要用BigDecimal(double)。\n在需要精确答案的地方，要避免使用float和double；对于货币计算，要使用int、long或BigDecimal。\n3. 长整除\n```java\npublic class LongDivision {\n\tpublic static void main(String[] args) {\n\t\tfinal long MICROS_PER_DAY = 24 * 60 * 60 * 1000 * 1000;\n\t\tfinal long MILLIS_PER_DAY = 24 * 60 * 60 * 1000;\n\t\tSystem.out.println(MICROS_PER_DAY/MILLIS_PER_DAY);\n\t}\n}\n```\n\tfinal long MICROS_PER_DAY = 24L * 60 * 60 * 1000 * 1000;\n\tfinal long MILLIS_PER_DAY = 24L * 60 * 60 * 1000;\n当在操作很大的数字时，千万要提防溢出——它可是一个缄默杀手。\n4. 初级问题\n```java\npublic class Elementary {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(12345 + 5432l);\n\t}\n}\n```\n在long类型字面常量中，一定要用大写的L，千万不要用小写的l。\n要避免使用单个l字母作为变量名。\n5. 十六进制的趣事\n```java\npublic class JoyOfHex {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(Long.toHexString(0x100000000L + 0xcafebabe));\n\t}\n}\n```\n负的十进制常量可以很明确地用一个减号来标识。\n如果十六进制和八进制字面常量的最高位被置位了，那么它们就是负数。\nSystem.out.println(Long.toHexString(0x100000000L + 0xcafebabeL));\n通常最好是避免混合类型的计算。\n6. 多重转型\n```java\npublic class Multicast {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println((int)(char)(byte)-1);\n\t}\n}\n```\n如果最初的数值类型是有符号的，就执行符号扩展；如果它是char，那么不管它将要被转换成什么类型，都执行零扩展。\n7. 互换内容\n```java\npublic class CleverSwap {\n\tpublic static void main(String[] args) {\n\t\tint x = 1984;\n\t\tint y = 2001;\n\t\tx ^= y ^= x ^= y;\n\t\tSystem.out.println(\"x=\"+x+\";y=\"+y);\n\t}\n}\n```\nC/C++中运行正确。Java中不正确。\n操作符的操作数是从左向右求值的。\n实际运行过程如下：\n```java\nint tmp1 = x;\nint tmp2 = y;\nint tmp3 = x ^ y;\nx = tmp3;\ny = tmp2 ^ tmp3;\nx = tmp1 ^ y;\ny = (x ^= (y ^= x)) ^ y;\n```\n在单个表达式中不要对相同的变量赋值两次。\n8. Dos Equis\n```java\npublic class DosEquis {\n\tpublic static void main(String[] args) {\n\t\tchar x= 'X';\n\t\tint i = 0;\n\t\tSystem.out.println(true ? x : 0);\n\t\tSystem.out.println(false ? i : x);\n\t}\n}\n```\n混合类型的计算会引起混乱，而这一点在条件表达式中比在其他任何地方都表现得更明显。\n确定条件表达式结果类型的规则：\n（1） 如果第二个和第三个操作数具有相同的类型，那么它就是条件表达式的类型。\n（2） 如果一个操作数的类型是T，T表示byte、short、或char，而另一个操作数是一个int类型的常数表达式，它的值可以用类型T表示，那么条件表达式的类型就是T。\n（3） 否则，将对操作数类型进行二进制数字提升，而条件表达式的类型就是第二个和第三个操作数被提升之后的类型。\n将final修饰符用于i的声明可以把i转变为一个常量表达式。\n在条件表达式中使用类型相同的第二个和第三个操作数。\n9. 半斤\n```java\nx += i;\nx = x + i;\n```\n复合赋值E1 op= E2等价于简单赋值E1=(T)((E1)op(E2))，其中T是E1的类型。\n复合赋值表达式自动将所执行计算的结果转型为其左侧变量的类型。\n请不要将复合赋值操作符作用于byte、short或char类型的变量。在将复合赋值操作符作用于int类型的变量上时，要确保表达式右侧不是long、float或double类型。在将复合赋值操作符作用于float类型的变量上时，要确保表达式右侧不是double类型。\n10. 八两\n```java\nx = x + i;\nx += i;\n```\n如果在+=操作符左侧的操作数是String类型的，那么它允许右侧的操作数是任意类型。\n简单赋值操作符（=）允许其左侧的是对象引用类型，只要表达式的右侧与左侧的变量时赋值兼容的即可。\n## 第3章 字符之谜\n11. 最后的笑声\n```java\npublic class LastLaugh {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(\"H\" + \"a\");\n\t\tSystem.out.println('H' + 'a');\n\t}\n}\n```\n当且仅当+操作符的操作数中至少有一个是String类型时，才会执行字符串连接操作。\n    System.out.println(\"2+2=\"+2+2);\n12. ABC\n```java\npublic class Abc {\n\tpublic static void main(String[] args) {\n\t\tString letters = \"ABC\";\n\t\tchar[] numbers = {'1', '2', '3'};\n\t\tSystem.out.println(letters + \" easy as \" + numbers);\n\t}\n}\n```\n\tSystem.out.println(numbers);\n要想将一个char数组转换成一个字符串，就要调用String.valueOf(char[])方法。\n13. 动物庄园\n```java\npublic class AnimalFarm {\n\tpublic static void main(String[] args) {\n\t\tfinal String pig = \"length:10\";\n\t\tfinal String dog = \"length:\" + pig.length();\n\t\tSystem.out.println(\"Animals are equal:\" + pig == dog);\n\t}\n}\n```\n+比==的优先级高。\n在使用字符串连接操作符时，总是将重要的操作数用括号括起来。\n在比较对象引用时，应该优先使用equals方法而不是==操作符，除非需要比较的是对象的标识而不是对象的值。\n14. 转义字符的溃败\n```java\npublic class EscapeRout {\n\tpublic static void main(String[] args) {\n\t\t// \\u0022 is the Unicode escape for double quote (\")\n\t\tSystem.out.println(\"a\\u0022.length()+\\u0022b\".length());\t}\n}\n```\nJava对在字符串字面常量中的Unicode转义字符没有提供任何特殊处理。\n在字符串和字符字面常量中优先选择的是转义字符序列，而不是Unicode转义字符。\n不要使用Unicode转义字符来表示ASCII字符。\n15. 令人晕头转向的Hello\n```java\n/**\n * Generated by the IBM IDL-to-Java compiler, version 1.0\n * from F:\\TestRoot\\apps\\a1\\units\\include\\PolicyHome.idl\n * Wednesday, June 17, 1998 6:44:40 o'clock AM GMT+00:00\n */\npublic class Test {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.print(\"Hell\");\n\t\tSystem.out.println(\"o world\");\n\t}\n}\n```\n问题在于注释的第三行，它包含了字符\\units。\nUnicode转义字符必须是良构的，即使出现在注释中也是如此。\n在Javadoc注释中，应该使用HTML实体转义字符来代替Unicode转义字符。\n工具应该确保不将Windows文件名置于所生成的Java源文件的注释中。\n16. 行打印程序\n```java\npublic class LinePrinter {\n\tpublic static void main(String[] args) {\n\t\t// Note: \\u000A is Unicode representation of linefeed (LF)\n\t\tchar c = 0x000A;\n\t\tSystem.out.println(c);\n\t}\n}\n```\n第三行的注释\n除非确实是必需的，否则就不要用使用Unicode转义字符。\n17. 嗯？\n只有在你要向程序中插入用其他任何方式都无法表示的字符时，Unicode转义字符才是必需的，除此之外的任何情况都应该避免使用它们。\n18. 字符串奶酪\n```java\npublic class StringCheese {\n\tpublic static void main(String[] args) {\n\t\tbyte[] bytes = new byte[256];\n\t\tfor (int i = 0; i < 256; i++)\n\t\t\tbytes[i] = (byte) i;\n\t\tString str = new String(bytes);\n\t\tfor (int i = 0, n = str.length(); i < n; i++)\n\t\t\tSystem.out.print((int) str.charAt(i) + \" \");\n\t}\n}\n```\n在char序列和byte序列之间转换时，可以且通常应该显式地指定字符集。\n每当要将一个byte序列转换成一个String时，你都在使用一个字符集，不管是否显式指定了它。\n19. 漂亮的火花（块注释符）\n```java\npublic class Classifier {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(classify('n') + classify('+') + classify('2'));\n\t}\n\n\tstatic String classify(char ch) {\n\t\tif (\"0123456789\".indexOf(ch) >= 0)\n\t\t\treturn \"NUMERAL \";\n\t\tif (\"abcdefghijklmnopqrstuvwxyz\".indexOf(ch) >= 0)\n\t\t\treturn \"LETTER \";\n\t\t/* (Operators not supported yet)\n\t\tif (\"+-*/&|!=\".indexOf(ch) >= 0)\n\t\treturn \"OPERATOR \";\n\t\t*/\n\t\treturn \"UNKNOWN \";\n\t}\n}\n```\n在注释中没有特殊处理字符串字面常量。\n块注释不能嵌套。\n注释掉代码段的最好方式是使用单行的注释序列。\n块注释不能可靠地注释掉代码段。\n20. 我的类是什么\n```java\npublic class Me {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(Me.class.getName().replaceAll(\".\", \"/\") + \".class\");\n\t}\n}\n```\nString.replaceAll接受了一个正则表达式作为它的第一个参数。正则表达式”.”可以匹配任何单个的字符。\n```java\nMe.class.getName().replaceAll(\"\\\\.\", \"/\");\nSystem.out.println(Me.class.getName().replaceAll(Pattern.quote(\".\"), \"/\") + \".class\");\n```\n21. 我的类是什么？镜头2\n```java\npublic class MeToo {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(MeToo.class.getName().replaceAll(\"\\\\.\",\n\t\t\t\tFile.separator)\n\t\t\t\t+ \".class\");\n\t}\n}\n```\n第二个参数不是一个普通的字符串，而是一个替代字符串。在替代字符串中出现的反斜杠会把紧随其后的字符进行转义，从而导致其被按字面含义而处理了。\n```java\nSystem.out.println(MeToo.class.getName().replaceAll(\"\\\\.\",\n    Matcher.quoteReplacement(File.separator))\n    + \".class\");\nSystem.out.println(MeToo.class.getName().replace(\".\", File.separator)     + \".class\");\nSystem.out.println(MeToo.class.getName().replace('.',                    File.separatorChar) + \".class\");\n```\n在使用不熟悉的类库方法时一定要格外小心。\n22. URL的愚弄\n```java\npublic class BrowserTest {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.print(\"iexplore:\");\n\t\thttp: // www.google.com;\n\t\tSystem.out.println(\":maximize\");\n\t}\n}\n```\n在程序中间出现的URL是一个语句标号（statement label）后面跟着尾注释（end-of-line comment）。\n仔细地写注释，并让它们跟上时代；去除那些已遭废弃的代码。\n23. 不劳而获\n```java\npublic class Rhymes {\n\tprivate static Random rnd = new Random();\n\n\tpublic static void main(String[] args) {\n\t\tStringBuffer word = null;\n\t\tswitch (rnd.nextInt(2)) {\n\t\tcase 1:\n\t\t\tword = new StringBuffer('P');\n\t\tcase 2:\n\t\t\tword = new StringBuffer('G');\n\t\tdefault:\n\t\t\tword = new StringBuffer('M');\n\t\t}\n\t\tword.append('a');\n\t\tword.append('i');\n\t\tword.append('n');\n\t\tSystem.out.println(word);\n\t}\n}\n```\n要当心栅栏柱错误。\n不要从一个非空的case向下进入另一个case。\n不管在什么时候，都要尽可能使用熟悉的惯用法和API。如果必须使用不熟悉的API，那么请仔细阅读其文档。\n```java\n\t\tswitch (rnd.nextInt(3)) {\n\t\tcase 1:\n\t\t\tword = new StringBuffer(\"P\");\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tword = new StringBuffer(\"G\");\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tword = new StringBuffer(\"M\");\n\t\t\tbreak;\n\t\t}\n\nSystem.out.println(\"PGM\".charAt(rnd.nextInt(3)) + \"ain\");\n\npublic class Rhymes {\n\tpublic static void main(String args[]) {\n\t\tString a[] = { \"Main\", \"Pain\", \"Gain\" };\n\t\tSystem.out.println(randomElement(a));\n\t}\n\n\tprivate static Random rnd = new Random();\n\n\tprivate static String randomElement(String[] a) {\n\t\treturn a[rnd.nextInt(a.length)];\n\t}\n}\n```\nchar不是String，而是更像int。\n要提防各种诡异的谜题。\n## 第4章 循环之谜\n24.\t尽情享受每一个字节\n```java\npublic class BigDelight {\n\tpublic static void main(String[] args) {\n\t\tfor (byte b = Byte.MIN_VALUE; b < Byte.MAX_VALUE; b++) {\n\t\t\tif (b == 0x90)\n\t\t\t\tSystem.out.print(\"Joy!\");\n\t\t}\n\t}\n}\n\nif (b == (byte)0x90)\tSystem.out.print(\"Joy!\");\n\nif ((b & 0xff) == 0x90)\tSystem.out.print(\"Joy!\");\n\nprivate static final byte TARGET = (byte) 0x90; \nif (b == TARGET)\tSystem.out.print(\"Joy!\");\n```\n要避免混合类型比较，因为它们内在地容易引起混乱。\n请使用声明的常量替代“魔数”。\n25.\t无情的增量操作\n```java\npublic class Increment {\n\tpublic static void main(String[] args) {\n\t\tint j = 0;\n\t\tfor (int i = 0; i < 100; i++)\n\t\t\tj = j++;\n\t\tSystem.out.println(j);\n\t}\n}\n```\n不要在单个表达式中对相同的变量赋值超过一次。\n26.\t在循环中\n```java\npublic class InTheLoop {\n\tpublic static final int END = Integer.MAX_VALUE;\n\tpublic static final int START = END - 100;\n\n\tpublic static void main(String[] args) {\n\t\tint count = 0;\n\t\tfor (int i = START; i <= END; i++)\n\t\t\tcount++;\n\t\tSystem.out.println(count);\n\t}\n}\n\nfor (long i = START; i <= END; i++)\n```\n无论你在何时使用了一个整数类型，都要意识到其边界条件。\n```java\nint i = START;\ndo {\n\tcount++;\n} while (i++ != END);\n```\n27.\t变幻莫测的i值\n```java\npublic class Shifty {\n\tpublic static void main(String[] args) {\n\t\tint i = 0;\n\t\twhile(-1 << i != 0)\n\t\t\ti++;\n\t\tSystem.out.println(i);\n\t}\n}\n```\n移位操作符只使用其右操作数的低5位作为移位长度。或者是低6位，如果其左操作数是一个long类型数值。\n28.\t就\n29.\tGf\n30.\tD\n31.\tG\n32.\tG\n33.\tG\n34.\tG\n35.\tG\n## 第5章 异常之谜\n36.\tF\n37.\tF\n38.\tF\n39.\tF\n40.\tF\n41.\tF\n42.\tF\n43.\tF\n44.\tF\n45.\tF\n\n## 第6章 类之谜\n46.\t令人混淆的构造器案例\n```java\npublic class Confusing {\n\tprivate Confusing(Object o) {\n\t\tSystem.out.println(\"Object\");\n\t}\n\n\tprivate Confusing(double[] dArray) {\n\t\tSystem.out.println(\"double array\");\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tnew Confusing(null);\n\t}\n}\n```\nJava的重载解析过程是分两阶段运行的。第一阶段选取所有可获得并且可应用的方法或构造器。第二阶段在第一阶段选取的方法或构造器中选取最精确的一个。\n在测试哪一个方法或构造器最精确时，并没有使用实参。\n要想强制要求编译器选择一个精确的重载版本，需要将实参转型为形参所声明的类型。\n避免使用重载。\n47. 啊呀！狸猫变犬子\n```java\nclass Counter {\n\tprivate static int count;\n\n\tpublic static void increment() {\n\t\tcount++;\n\t}\n\n\tpublic static int getCount() {\n\t\treturn count;\n\t}\n}\n\nclass Dog extends Counter {\n\tpublic Dog() {\n\t}\n\n\tpublic void woof() {\n\t\tincrement();\n\t}\n}\n\nclass Cat extends Counter {\n\tpublic Cat() {\n\t}\n\n\tpublic void meow() {\n\t\tincrement();\n\t}\n}\n\npublic class Ruckus {\n\tpublic static void main(String[] args) {\n\t\tDog[] dogs = { new Dog(), new Dog() };\n\t\tfor (int i = 0; i < dogs.length; i++)\n\t\t\tdogs[i].woof();\n\t\tCat[] cats = { new Cat(), new Cat(), new Cat() };\n\t\tfor (int i = 0; i < cats.length; i++)\n\t\t\tcats[i].meow();\n\t\tSystem.out.print(Dog.getCount() + \" woofs and \");\n\t\tSystem.out.println(Cat.getCount() + \" meows\");\n\t}\n}\n```\n每一个静态字段在声明它的类及其所有子类中共享一份单一的副本。\n优选组合而不是继承。\n48. 我所得到的都是静态的\n```java\nclass Dog {\n\tpublic static void bark() {\n\t\tSystem.out.print(\"woof \");\n\t}\n}\n\nclass Basenji extends Dog {\n\tpublic static void bark() {\n\t}\n}\n\npublic class Bark {\n\tpublic static void main(String args[]) {\n\t\tDog woofer = new Dog();\n\t\tDog nipper = new Basenji();\n\t\twoofer.bark();\n\t\tnipper.bark();\n\t}\n}\n```\n对静态方法的调用不存在任何动态的分派机制。\n千万不要用一个表达式来标识一个静态方法调用。\n千万不要隐藏静态方法。\n49.\t比生命更大\n```java\npublic class Elvis {\n\tpublic static final Elvis INSTANCE = new Elvis();\n\tprivate final int beltSize;\n\tprivate static final int CURRENT_YEAR = Calendar.getInstance().get(\n\t\t\tCalendar.YEAR);\n\n\tprivate Elvis() {\n\t\tbeltSize = CURRENT_YEAR - 1930;\n\t}\n\n\tpublic int beltSize() {\n\t\treturn beltSize;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(\"Elvis wears a size \" + INSTANCE.beltSize()\n\t\t\t\t+ \" belt.\");\n\t}\n}\n```\n在final类型的静态字段被初始化之前，存在着读取其值的可能。\n要想改正一个类初始化循环，需要重新对静态字段的初始器进行排序，使得每一个初始器都出现在任何依赖于它的初始器之前。\n要当心类初始化循环。\n50.\t不是你的类型\n```java\npublic class Type1 {\n\tpublic static void main(String[] args) {\n\t\tString s = null;\n\t\tSystem.out.println(s instanceof String);\n\t}\n}\n```\ninstanceof操作符被定义为在其左操作数为null时返回false。\n```java\npublic class Type2 {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(new Type2() instanceof String);\n\t}\n}\n```\ninstanceof操作符有这样的要求：如果两个操作数的类型都是类，其中一个必须是另一个的子类型。\n```java\npublic class Type3 {\n\tpublic static void main(String args[]) {\n\t\tType3 t3 = (Type3) new Object();\n\t}\n}\n```\n51.\t要点何在\n```java\nclass Point {\n\tprivate final int x, y;\n\tprivate final String name; // Cached at construction time\n\n\tPoint(int x, int y) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tname = makeName();\n\t}\n\n\tprotected String makeName() {\n\t\treturn \"[\" + x + \",\" + y + \"]\";\n\t}\n\n\tpublic final String toString() {\n\t\treturn name;\n\t}\n}\n\npublic class ColorPoint extends Point {\n\tprivate final String color;\n\n\tColorPoint(int x, int y, String color) {\n\t\tsuper(x, y);\n\t\tthis.color = color;\n\t}\n\n\tprotected String makeName() {\n\t\treturn super.makeName() + \":\" + color;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(new ColorPoint(4, 2, \"purple\"));\n\t}\n}\n```\n在一个final类型的实例字段被赋值之前，存在着取用其值的可能。\n循环的实例初始化时可以且总是应该避免的。\n千万不要在构造器中调用可覆写的方法。\n52.\t总和的玩笑\n```java\nclass Cache {\n\tstatic {\n\t\tinitializeIfNecessary();\n\t}\n\tprivate static int sum;\n\n\tpublic static int getSum() {\n\t\tinitializeIfNecessary();\n\t\treturn sum;\n\t}\n\n\tprivate static boolean initialized = false;\n\n\tprivate static synchronized void initializeIfNecessary() {\n\t\tif (!initialized) {\n\t\t\tfor (int i = 0; i < 100; i++)\n\t\t\t\tsum += i;\n\t\t\tinitialized = true;\n\t\t}\n\t}\n}\n\npublic class Client {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(Cache.getSum());\n\t}\n}\n```\n要么使用积极初始化，要么使用延迟初始化，千万不要同时使用二者。\n请考虑类初始化的顺序，特别是当初始化显得很重要时更是如此。\n53.\t做你的事吧\n54.\tNull与Void\n```java\npublic class Null {\n\tpublic static void greet() {\n\t\tSystem.out.println(\"Hello world!\");\n\t}\n\n\tpublic static void main(String[] args) {\n\t\t((Null) null).greet();\n\t}\n}\n```\n静态方法调用的限定表达式是可以计算的，但是它的值将被忽略。\n```java\nNull.greet();\ngreet();\n```\n55.\t特创论\n```java\npublic class Creator {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0; i < 100; i++)\n\t\t\tCreature creature = new Creature();\n\t\tSystem.out.println(Creature.numCreated());\n\t}\n}\n\nclass Creature {\n\tprivate static long numCreated = 0;\n\n\tpublic Creature() {\n\t\tnumCreated++;\n\t}\n\n\tpublic static long numCreated() {\n\t\treturn numCreated;\n\t}\n}\n```\n一个局部变量声明作为一条语句只能直接出现在一个语句块中。（一个语句块是由一对花括号以及包含在这对花括号的语句和声明构成的）\n```java\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tCreature creature = new Creature();\n\t\t}\n\n\t\tfor (int i = 0; i < 100; i++)\n\t\t\tnew Creature();\n\n// Thread-safe creation counter\nclass Creature {\n\tprivate static long numCreated;\n\n\tpublic Creature() {\n\t\tsynchronized (Creature.class) {\n\t\t\tnumCreated++;\n\t\t}\n\t}\n\n\tpublic static synchronized long numCreated() {\n\t\treturn numCreated;\n\t}\n}\n\nclass Creature {\n\tprivate static AtomicLong numCreated = new AtomicLong();\n\n\tpublic Creature() {\n\t\tnumCreated.incrementAndGet();\n\t}\n\n\tpublic static long numCreated() {\n\t\treturn numCreated.get();\n\t}\n}\n```\n在使用一个变量来对实例的创建进行计数时，要使用long类型而不是int类型的变量，以防止溢出。\n## 第7章 库之谜\n56. 大问题\n```java\npublic class BigProblem {\n\tpublic static void main(String[] args) {\n\t\tBigInteger fiveThousand = new BigInteger(\"5000\");\n\t\tBigInteger fiftyThousand = new BigInteger(\"50000\");\n\t\tBigInteger fiveHundredThousand = new BigInteger(\"500000\");\n\t\tBigInteger total = BigInteger.ZERO;\n\t\ttotal.add(fiveThousand);\n\t\ttotal.add(fiftyThousand);\n\t\ttotal.add(fiveHundredThousand);\n\t\tSystem.out.println(total);\n\t}\n}\n```\nBigInteger实例是不可变的。\n```java\ntotal = total.add(fiveThousand);\ntotal = total.add(fiftyThousand);\ntotal = total.add(fiveHundredThousand);\n```\n57.\t名字里有什么\n```java\npublic class Name {\n\tprivate final String first, last;\n\n\tpublic Name(String first, String last) {\n\t\tthis.first = first;\n\t\tthis.last = last;\n\t}\n\n\tpublic boolean equals(Object o) {\n\t\tif (!(o instanceof Name))\n\t\t\treturn false;\n\t\tName n = (Name) o;\n\t\treturn n.first.equals(first) && n.last.equals(last);\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tSet<Name> s = new HashSet<Name>();\n\t\ts.add(new Name(\"Mickey\", \"Mouse\"));\n\t\tSystem.out.println(s.contains(new Name(\"Mickey\", \"Mouse\")));\n\t}\n}\n```\n无论何时，只要覆写了equals方法，就必须同时覆写hashCode方法。\n58.\t产生它的散列码\n```java\npublic class Name {\n\tprivate final String first, last;\n\n\tpublic Name(String first, String last) {\n\t\tthis.first = first;\n\t\tthis.last = last;\n\t}\n\n\tpublic boolean equals(Name n) {\n\t\treturn n.first.equals(first) && n.last.equals(last);\n\t}\n\n\tpublic int hashCode() {\n\t\treturn 31 * first.hashCode() + last.hashCode();\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tSet<Name> s = new HashSet<Name>();\n\t\ts.add(new Name(\"Donald\", \"Duck\"));\n\t\tSystem.out.println(s.contains(new Name(\"Donald\", \"Duck\")));\n\t}\n}\n```\n重载为错误和混乱提供了机会。\n为了避免无意识地重载，应该机械地对你想要覆写的每一个超类方法都复制其声明。\n59. 差是什么\n以0开头的整型字面常量将被解释成为八进制数值。\n千万不要在一个整型字面常量前面加上一个0。\n60. 一行以毙之\n了解类库中有些什么可以为你节省大量的时间和精力，并且可以提高程序的速度和质量。\n61. 日期游戏\nDate将一月表示为0，而Calendar延续了这个错误。\nDate.getDay返回的是Date实例所表示的星期日期，而不是月份日期。\n在使用Calendar或Date的时候一定要当心，千万要记着查阅API文档。\n62. 名字游戏\n不要使用IdentityHashMap，除非你需要其基于标识的语义，它不是一个通用目的的Map实现。\n63. 更多同样的问题\n不要因为偶然地添加了一个返回类型，而将一个构造器声明变成了一个方法声明。\n要遵守标准的命名约定。\n64. 按余数编组\nMath.abs不能保证一定会返回非负的结果。\n65. 疑似配需的惊人传奇\n不要使用基于减法的比较器，除非你能够确保要比较的数值之间的差永远不会大于Integer.MAX_VALUE。\n## 第8章 更多类之谜\n66. 一件私事\n```java\nclass Base {\n\tpublic String className = \"Base\";\n}\n\nclass Derived extends Base {\n\tprivate String className = \"Derived\";\n}\n\npublic class PrivateMatter {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(new Derived().className);\n\t}\n}\n```\n避免隐藏。\n一个覆写方法的访问修饰符所提供的访问权限要大于等于被覆写方法的访问修饰符所提供的访问权限。而字段则不必。\n67.\t对字符串上瘾\n要避免重用平台类的名字，并且千万不要难过重用java.lang中的类名。\n68.\t灰色的阴影\n```java\npublic class ShadesOfGray {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(X.Y.Z);\n\t}\n}\n\nclass X {\n\tstatic class Y {\n\t\tstatic String Z = \"Black\";\n\t}\n\n\tstatic C Y = new C();\n}\n\nclass C {\n\tString Z = \"White\";\n}\n```\n当一个变量和一个类型具有相同的名字，并且它们位于相同的作用域时，变量名具有优先权。\n相似地，变量名和类型名可以遮掩包名。\n69.\t黑色的渐隐\n70.\t一揽子交易\n```java\npackage click;\npublic class CodeTalk {\n\tpublic void doIt() {\n\t\tprintMessage();\n\t}\n\n\tvoid printMessage() {\n\t\tSystem.out.println(\"Click\");\n\t}\n}\n\npackage hack;\nimport click.CodeTalk;\npublic class TypeIt {\n\tprivate static class ClickIt extends CodeTalk {\n\t\tvoid printMessage() {\n\t\t\tSystem.out.println(\"Hack\");\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tClickIt clickit = new ClickIt();\n\t\tclickit.doIt();\n\t}\n}\n```\n一个包内私有的方法不能被位于另一个包中的某个方法直接覆写。\n71.\t进口税\n72.\t终极危难\nfinal修饰符对方法和字段而言，意味着某些完全不同的事情。对于方法，final意味着该方法不能被覆写（对实例方法而言）或者隐藏（对静态方法而言）。对于字段，final意味着该字段不能被赋值超过一次。\n73.\t隐私在公开\n重用名字是危险的；应该避免隐藏、遮蔽和遮掩。\n74.\t同一性的危机\n75.\t头还是尾\n名字重用的术语表\n第9章 更多库之谜\n76.\t乒乓\n```java\npublic class PingPong {\n\tpublic static synchronized void main(String[] a) {\n\t\tThread t = new Thread() {\n\t\t\tpublic void run() {\n\t\t\t\tpong();\n\t\t\t}\n\t\t};\n\t\tt.run();\n\t\tSystem.out.print(\"Ping\");\n\t}\n\n\tstatic synchronized void pong() {\n\t\tSystem.out.print(\"Pong\");\n\t}\n}\n```\n当你想调用一个线程的start方法时要多加小心，别弄错成调用这个线程的run方法了。\n77.\t乱锁之妖\n78.\t反射的影响\n```java\npublic class Reflector {\n\tpublic static void main(String[] args) throws Exception {\n\t\tSet<String> s = new HashSet<String>();\n\t\ts.add(\"foo\");\n\t\tIterator it = s.iterator();\n\t\tMethod m = it.getClass().getMethod(\"hasNext\");\n\t\tSystem.out.println(m.invoke(it));\n\t}\n}\n```\n访问位于其它包中的非公共类型的成员是不合法的。\nObject.getClass().getMethod(“methodName”)这种惯用法虽然很常见，但是却有问题，它不应该被使用。\n在使用反射访问某个类型时，请使用表示某种可访问类型的Class对象。\nMethod m = Iterator.class.getMethod(\"hasNext\");\n79.\t狗狗的幸福生活\n避免遮蔽。\n使用Thread(Runnable)构造器来替代对Thread的继承。\n80.\t更深层的反射\n```java\npublic class Outer {\n\tpublic static void main(String[] args) throws Exception {\n\t\tnew Outer().greetWorld();\n\t}\n\n\tprivate void greetWorld() throws Exception {\n\t\tSystem.out.println(Inner.class.newInstance());\n\t}\n\n\tpublic class Inner {\n\t\tpublic String toString() {\n\t\t\treturn \"Hello world\";\n\t\t}\n\t}\n}\n```\n除非你确实需要一个外围实例i，否则应该优先使用静态成员类而不是非静态成员类。\n请避免使用反射类实例化内部类。\n81.\t无法识别的字符化\n```java\npublic class Greeter {\n\tpublic static void main(String[] args) {\n\t\tString greeting = \"Hello world\";\n\t\tfor (int i = 0; i < greeting.length(); i++)\n\t\t\tSystem.out.write(greeting.charAt(i));\n\t}\n}\n```\nwrite(int)是唯一一个在自动刷新功能开启的情况下不刷新PrintStream的输出方法。\n尽可能使用熟悉的惯用法，如果不得不使用陌生的API，请一定要参考相关的文档。\n82.\t啤酒爆炸\n83.\t诵读困难者的一神论\n84.\t戛然而止\n```java\npublic class SelfInterruption {\n\tpublic static void main(String[] args) {\n\t\tThread.currentThread().interrupt();\n\t\tif (Thread.interrupted()) {\n\t\t\tSystem.out.println(\"Interrupted: \" + Thread.interrupted());\n\t\t} else {\n\t\t\tSystem.out.println(\"Not interrupted: \" + Thread.interrupted());\n\t\t}\n\t}\n}\n```\n调用Thread.interrupted方法总是会清除当前线程的中断状态。\nThread.currentThread().isInterrupted()\n不要使用Thread.interrupted方法，除非你想要清除当前线程的中断状态。\n85.\t延迟初始化\n\n\n\n\n\n\n","slug":"Java解惑","published":1,"updated":"2019-04-16T15:54:16.431Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuldtu4e0005nodiyazmd5fo","content":"<h1 id=\"Java解惑\"><a href=\"#Java解惑\" class=\"headerlink\" title=\"Java解惑\"></a>Java解惑</h1><hr>\n<h2 id=\"第2章-表达式之谜\"><a href=\"#第2章-表达式之谜\" class=\"headerlink\" title=\"第2章 表达式之谜\"></a>第2章 表达式之谜</h2><ol>\n<li>奇数性<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isOdd</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> i % <span class=\"number\">2</span> == <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>当取余操作返回一个非零的结果时，它与左操作数具有相同的正负符号。<br>当i是一个负奇数时，i%2等于-1而不是1。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isOdd</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i % <span class=\"number\">2</span> != <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ol start=\"2\">\n<li>找零时刻<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Change</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"number\">2.00</span>-<span class=\"number\">1.10</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>问题在于1.1这个数字不能被精确表示为一个double，因此被表示为最接近它的double值。<br>并不是所有的小数都可以用二进制浮点数精确表示。<br>二进制浮点对于货币计算是非常不合适的。<br>解决该问题的一种方式是使用某种整数类型。<br>解决该问题的另一种方式是使用执行精确小数运算的BigDecimal。<br>一定要用BigDecimal(String)构造器，而千万不要用BigDecimal(double)。<br>在需要精确答案的地方，要避免使用float和double；对于货币计算，要使用int、long或BigDecimal。</p>\n<ol start=\"3\">\n<li><p>长整除</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LongDivision</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> <span class=\"keyword\">long</span> MICROS_PER_DAY = <span class=\"number\">24</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">1000</span> * <span class=\"number\">1000</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> <span class=\"keyword\">long</span> MILLIS_PER_DAY = <span class=\"number\">24</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">1000</span>;</span><br><span class=\"line\">\t\tSystem.out.println(MICROS_PER_DAY/MILLIS_PER_DAY);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> final long MICROS_PER_DAY = 24L <em> 60 </em> 60 <em> 1000 </em> 1000;<br> final long MILLIS_PER_DAY = 24L <em> 60 </em> 60 * 1000;<br>当在操作很大的数字时，千万要提防溢出——它可是一个缄默杀手。</p>\n</li>\n<li>初级问题<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Elementary</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"number\">12345</span> + <span class=\"number\">5432l</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在long类型字面常量中，一定要用大写的L，千万不要用小写的l。<br>要避免使用单个l字母作为变量名。</p>\n<ol start=\"5\">\n<li>十六进制的趣事<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JoyOfHex</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(Long.toHexString(<span class=\"number\">0x100000000L</span> + <span class=\"number\">0xcafebabe</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>负的十进制常量可以很明确地用一个减号来标识。<br>如果十六进制和八进制字面常量的最高位被置位了，那么它们就是负数。<br>System.out.println(Long.toHexString(0x100000000L + 0xcafebabeL));<br>通常最好是避免混合类型的计算。</p>\n<ol start=\"6\">\n<li>多重转型<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Multicast</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println((<span class=\"keyword\">int</span>)(<span class=\"keyword\">char</span>)(<span class=\"keyword\">byte</span>)-<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>如果最初的数值类型是有符号的，就执行符号扩展；如果它是char，那么不管它将要被转换成什么类型，都执行零扩展。</p>\n<ol start=\"7\">\n<li>互换内容<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CleverSwap</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x = <span class=\"number\">1984</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> y = <span class=\"number\">2001</span>;</span><br><span class=\"line\">\t\tx ^= y ^= x ^= y;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"x=\"</span>+x+<span class=\"string\">\";y=\"</span>+y);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>C/C++中运行正确。Java中不正确。<br>操作符的操作数是从左向右求值的。<br>实际运行过程如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> tmp1 = x;</span><br><span class=\"line\"><span class=\"keyword\">int</span> tmp2 = y;</span><br><span class=\"line\"><span class=\"keyword\">int</span> tmp3 = x ^ y;</span><br><span class=\"line\">x = tmp3;</span><br><span class=\"line\">y = tmp2 ^ tmp3;</span><br><span class=\"line\">x = tmp1 ^ y;</span><br><span class=\"line\">y = (x ^= (y ^= x)) ^ y;</span><br></pre></td></tr></table></figure></p>\n<p>在单个表达式中不要对相同的变量赋值两次。</p>\n<ol start=\"8\">\n<li>Dos Equis<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DosEquis</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> x= <span class=\"string\">'X'</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">true</span> ? x : <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">false</span> ? i : x);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>混合类型的计算会引起混乱，而这一点在条件表达式中比在其他任何地方都表现得更明显。<br>确定条件表达式结果类型的规则：<br>（1） 如果第二个和第三个操作数具有相同的类型，那么它就是条件表达式的类型。<br>（2） 如果一个操作数的类型是T，T表示byte、short、或char，而另一个操作数是一个int类型的常数表达式，它的值可以用类型T表示，那么条件表达式的类型就是T。<br>（3） 否则，将对操作数类型进行二进制数字提升，而条件表达式的类型就是第二个和第三个操作数被提升之后的类型。<br>将final修饰符用于i的声明可以把i转变为一个常量表达式。<br>在条件表达式中使用类型相同的第二个和第三个操作数。</p>\n<ol start=\"9\">\n<li>半斤<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x += i;</span><br><span class=\"line\">x = x + i;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>复合赋值E1 op= E2等价于简单赋值E1=(T)((E1)op(E2))，其中T是E1的类型。<br>复合赋值表达式自动将所执行计算的结果转型为其左侧变量的类型。<br>请不要将复合赋值操作符作用于byte、short或char类型的变量。在将复合赋值操作符作用于int类型的变量上时，要确保表达式右侧不是long、float或double类型。在将复合赋值操作符作用于float类型的变量上时，要确保表达式右侧不是double类型。</p>\n<ol start=\"10\">\n<li>八两<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = x + i;</span><br><span class=\"line\">x += i;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>如果在+=操作符左侧的操作数是String类型的，那么它允许右侧的操作数是任意类型。<br>简单赋值操作符（=）允许其左侧的是对象引用类型，只要表达式的右侧与左侧的变量时赋值兼容的即可。</p>\n<h2 id=\"第3章-字符之谜\"><a href=\"#第3章-字符之谜\" class=\"headerlink\" title=\"第3章 字符之谜\"></a>第3章 字符之谜</h2><ol start=\"11\">\n<li>最后的笑声<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LastLaugh</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"H\"</span> + <span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">'H'</span> + <span class=\"string\">'a'</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>当且仅当+操作符的操作数中至少有一个是String类型时，才会执行字符串连接操作。<br>    System.out.println(“2+2=”+2+2);</p>\n<ol start=\"12\">\n<li><p>ABC</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Abc</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tString letters = <span class=\"string\">\"ABC\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span>[] numbers = &#123;<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>&#125;;</span><br><span class=\"line\">\t\tSystem.out.println(letters + <span class=\"string\">\" easy as \"</span> + numbers);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>System.out.println(numbers);<br>要想将一个char数组转换成一个字符串，就要调用String.valueOf(char[])方法。</p>\n</li>\n<li>动物庄园<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnimalFarm</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> String pig = <span class=\"string\">\"length:10\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> String dog = <span class=\"string\">\"length:\"</span> + pig.length();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Animals are equal:\"</span> + pig == dog);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>+比==的优先级高。<br>在使用字符串连接操作符时，总是将重要的操作数用括号括起来。<br>在比较对象引用时，应该优先使用equals方法而不是==操作符，除非需要比较的是对象的标识而不是对象的值。</p>\n<ol start=\"14\">\n<li>转义字符的溃败<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EscapeRout</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// \\u0022 is the Unicode escape for double quote (\")</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"a\\u0022.length()+\\u0022b\"</span>.length());\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>Java对在字符串字面常量中的Unicode转义字符没有提供任何特殊处理。<br>在字符串和字符字面常量中优先选择的是转义字符序列，而不是Unicode转义字符。<br>不要使用Unicode转义字符来表示ASCII字符。</p>\n<ol start=\"15\">\n<li>令人晕头转向的Hello<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Generated by the IBM IDL-to-Java compiler, version 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> * from F:\\TestRoot\\apps\\a1\\units\\include\\PolicyHome.idl</span></span><br><span class=\"line\"><span class=\"comment\"> * Wednesday, June 17, 1998 6:44:40 o'clock AM GMT+00:00</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.print(<span class=\"string\">\"Hell\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"o world\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>问题在于注释的第三行，它包含了字符\\units。<br>Unicode转义字符必须是良构的，即使出现在注释中也是如此。<br>在Javadoc注释中，应该使用HTML实体转义字符来代替Unicode转义字符。<br>工具应该确保不将Windows文件名置于所生成的Java源文件的注释中。</p>\n<ol start=\"16\">\n<li>行打印程序<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinePrinter</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Note: \\u000A is Unicode representation of linefeed (LF)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> c = <span class=\"number\">0x000A</span>;</span><br><span class=\"line\">\t\tSystem.out.println(c);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>第三行的注释<br>除非确实是必需的，否则就不要用使用Unicode转义字符。</p>\n<ol start=\"17\">\n<li>嗯？<br>只有在你要向程序中插入用其他任何方式都无法表示的字符时，Unicode转义字符才是必需的，除此之外的任何情况都应该避免使用它们。</li>\n<li>字符串奶酪<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StringCheese</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">256</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">256</span>; i++)</span><br><span class=\"line\">\t\t\tbytes[i] = (<span class=\"keyword\">byte</span>) i;</span><br><span class=\"line\">\t\tString str = <span class=\"keyword\">new</span> String(bytes);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, n = str.length(); i &lt; n; i++)</span><br><span class=\"line\">\t\t\tSystem.out.print((<span class=\"keyword\">int</span>) str.charAt(i) + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在char序列和byte序列之间转换时，可以且通常应该显式地指定字符集。<br>每当要将一个byte序列转换成一个String时，你都在使用一个字符集，不管是否显式指定了它。</p>\n<ol start=\"19\">\n<li>漂亮的火花（块注释符）<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Classifier</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(classify(<span class=\"string\">'n'</span>) + classify(<span class=\"string\">'+'</span>) + classify(<span class=\"string\">'2'</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> String <span class=\"title\">classify</span><span class=\"params\">(<span class=\"keyword\">char</span> ch)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"string\">\"0123456789\"</span>.indexOf(ch) &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"NUMERAL \"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"string\">\"abcdefghijklmnopqrstuvwxyz\"</span>.indexOf(ch) &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"LETTER \"</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">/* (Operators not supported yet)</span></span><br><span class=\"line\"><span class=\"comment\">\t\tif (\"+-*/</span>&amp;|!=<span class=\"string\">\".indexOf(ch) &gt;= 0)</span></span><br><span class=\"line\"><span class=\"string\">\t\treturn \"</span>OPERATOR <span class=\"string\">\";</span></span><br><span class=\"line\"><span class=\"string\">\t\t*/</span></span><br><span class=\"line\"><span class=\"string\">\t\treturn \"</span>UNKNOWN <span class=\"string\">\";</span></span><br><span class=\"line\"><span class=\"string\">\t&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在注释中没有特殊处理字符串字面常量。<br>块注释不能嵌套。<br>注释掉代码段的最好方式是使用单行的注释序列。<br>块注释不能可靠地注释掉代码段。</p>\n<ol start=\"20\">\n<li>我的类是什么<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Me</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(Me.class.getName().replaceAll(<span class=\"string\">\".\"</span>, <span class=\"string\">\"/\"</span>) + <span class=\"string\">\".class\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>String.replaceAll接受了一个正则表达式作为它的第一个参数。正则表达式”.”可以匹配任何单个的字符。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Me.class.getName().replaceAll(<span class=\"string\">\"\\\\.\"</span>, <span class=\"string\">\"/\"</span>);</span><br><span class=\"line\">System.out.println(Me.class.getName().replaceAll(Pattern.quote(<span class=\"string\">\".\"</span>), <span class=\"string\">\"/\"</span>) + <span class=\"string\">\".class\"</span>);</span><br></pre></td></tr></table></figure></p>\n<ol start=\"21\">\n<li>我的类是什么？镜头2<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MeToo</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(MeToo.class.getName().replaceAll(<span class=\"string\">\"\\\\.\"</span>,</span><br><span class=\"line\">\t\t\t\tFile.separator)</span><br><span class=\"line\">\t\t\t\t+ <span class=\"string\">\".class\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>第二个参数不是一个普通的字符串，而是一个替代字符串。在替代字符串中出现的反斜杠会把紧随其后的字符进行转义，从而导致其被按字面含义而处理了。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(MeToo.class.getName().replaceAll(<span class=\"string\">\"\\\\.\"</span>,</span><br><span class=\"line\">    Matcher.quoteReplacement(File.separator))</span><br><span class=\"line\">    + <span class=\"string\">\".class\"</span>);</span><br><span class=\"line\">System.out.println(MeToo.class.getName().replace(<span class=\"string\">\".\"</span>, File.separator)     + <span class=\"string\">\".class\"</span>);</span><br><span class=\"line\">System.out.println(MeToo.class.getName().replace(<span class=\"string\">'.'</span>,                    File.separatorChar) + <span class=\"string\">\".class\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>在使用不熟悉的类库方法时一定要格外小心。</p>\n<ol start=\"22\">\n<li>URL的愚弄<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BrowserTest</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.print(<span class=\"string\">\"iexplore:\"</span>);</span><br><span class=\"line\">\t\thttp: <span class=\"comment\">// www.google.com;</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\":maximize\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在程序中间出现的URL是一个语句标号（statement label）后面跟着尾注释（end-of-line comment）。<br>仔细地写注释，并让它们跟上时代；去除那些已遭废弃的代码。</p>\n<ol start=\"23\">\n<li>不劳而获<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rhymes</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Random rnd = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tStringBuffer word = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (rnd.nextInt(<span class=\"number\">2</span>)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t\tword = <span class=\"keyword\">new</span> StringBuffer(<span class=\"string\">'P'</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\t\tword = <span class=\"keyword\">new</span> StringBuffer(<span class=\"string\">'G'</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\tword = <span class=\"keyword\">new</span> StringBuffer(<span class=\"string\">'M'</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tword.append(<span class=\"string\">'a'</span>);</span><br><span class=\"line\">\t\tword.append(<span class=\"string\">'i'</span>);</span><br><span class=\"line\">\t\tword.append(<span class=\"string\">'n'</span>);</span><br><span class=\"line\">\t\tSystem.out.println(word);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>要当心栅栏柱错误。<br>不要从一个非空的case向下进入另一个case。<br>不管在什么时候，都要尽可能使用熟悉的惯用法和API。如果必须使用不熟悉的API，那么请仔细阅读其文档。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (rnd.nextInt(<span class=\"number\">3</span>)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t\tword = <span class=\"keyword\">new</span> StringBuffer(<span class=\"string\">\"P\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\t\tword = <span class=\"keyword\">new</span> StringBuffer(<span class=\"string\">\"G\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\tword = <span class=\"keyword\">new</span> StringBuffer(<span class=\"string\">\"M\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"PGM\"</span>.charAt(rnd.nextInt(<span class=\"number\">3</span>)) + <span class=\"string\">\"ain\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rhymes</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</span><br><span class=\"line\">\t\tString a[] = &#123; <span class=\"string\">\"Main\"</span>, <span class=\"string\">\"Pain\"</span>, <span class=\"string\">\"Gain\"</span> &#125;;</span><br><span class=\"line\">\t\tSystem.out.println(randomElement(a));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Random rnd = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">randomElement</span><span class=\"params\">(String[] a)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a[rnd.nextInt(a.length)];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>char不是String，而是更像int。<br>要提防各种诡异的谜题。</p>\n<h2 id=\"第4章-循环之谜\"><a href=\"#第4章-循环之谜\" class=\"headerlink\" title=\"第4章 循环之谜\"></a>第4章 循环之谜</h2><ol start=\"24\">\n<li>尽情享受每一个字节<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BigDelight</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">byte</span> b = Byte.MIN_VALUE; b &lt; Byte.MAX_VALUE; b++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (b == <span class=\"number\">0x90</span>)</span><br><span class=\"line\">\t\t\t\tSystem.out.print(<span class=\"string\">\"Joy!\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (b == (<span class=\"keyword\">byte</span>)<span class=\"number\">0x90</span>)\tSystem.out.print(<span class=\"string\">\"Joy!\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> ((b &amp; <span class=\"number\">0xff</span>) == <span class=\"number\">0x90</span>)\tSystem.out.print(<span class=\"string\">\"Joy!\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> TARGET = (<span class=\"keyword\">byte</span>) <span class=\"number\">0x90</span>; </span><br><span class=\"line\"><span class=\"keyword\">if</span> (b == TARGET)\tSystem.out.print(<span class=\"string\">\"Joy!\"</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>要避免混合类型比较，因为它们内在地容易引起混乱。<br>请使用声明的常量替代“魔数”。</p>\n<ol start=\"25\">\n<li>无情的增量操作<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Increment</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++)</span><br><span class=\"line\">\t\t\tj = j++;</span><br><span class=\"line\">\t\tSystem.out.println(j);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>不要在单个表达式中对相同的变量赋值超过一次。</p>\n<ol start=\"26\">\n<li>在循环中<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InTheLoop</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> END = Integer.MAX_VALUE;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> START = END - <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = START; i &lt;= END; i++)</span><br><span class=\"line\">\t\t\tcount++;</span><br><span class=\"line\">\t\tSystem.out.println(count);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">long</span> i = START; i &lt;= END; i++)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>无论你在何时使用了一个整数类型，都要意识到其边界条件。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i = START;</span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">\tcount++;</span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span> (i++ != END);</span><br></pre></td></tr></table></figure></p>\n<ol start=\"27\">\n<li>变幻莫测的i值<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shifty</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(-<span class=\"number\">1</span> &lt;&lt; i != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\ti++;</span><br><span class=\"line\">\t\tSystem.out.println(i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>移位操作符只使用其右操作数的低5位作为移位长度。或者是低6位，如果其左操作数是一个long类型数值。</p>\n<ol start=\"28\">\n<li>就</li>\n<li>Gf</li>\n<li>D</li>\n<li>G</li>\n<li>G</li>\n<li>G</li>\n<li>G</li>\n<li>G<h2 id=\"第5章-异常之谜\"><a href=\"#第5章-异常之谜\" class=\"headerlink\" title=\"第5章 异常之谜\"></a>第5章 异常之谜</h2></li>\n<li>F</li>\n<li>F</li>\n<li>F</li>\n<li>F</li>\n<li>F</li>\n<li>F</li>\n<li>F</li>\n<li>F</li>\n<li>F</li>\n<li>F</li>\n</ol>\n<h2 id=\"第6章-类之谜\"><a href=\"#第6章-类之谜\" class=\"headerlink\" title=\"第6章 类之谜\"></a>第6章 类之谜</h2><ol start=\"46\">\n<li>令人混淆的构造器案例<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Confusing</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Confusing</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Object\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Confusing</span><span class=\"params\">(<span class=\"keyword\">double</span>[] dArray)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"double array\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Confusing(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>Java的重载解析过程是分两阶段运行的。第一阶段选取所有可获得并且可应用的方法或构造器。第二阶段在第一阶段选取的方法或构造器中选取最精确的一个。<br>在测试哪一个方法或构造器最精确时，并没有使用实参。<br>要想强制要求编译器选择一个精确的重载版本，需要将实参转型为形参所声明的类型。<br>避免使用重载。</p>\n<ol start=\"47\">\n<li>啊呀！狸猫变犬子<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Counter</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> count;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">increment</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tcount++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> count;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title\">Counter</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Dog</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">woof</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tincrement();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> <span class=\"keyword\">extends</span> <span class=\"title\">Counter</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Cat</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">meow</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tincrement();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Ruckus</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tDog[] dogs = &#123; <span class=\"keyword\">new</span> Dog(), <span class=\"keyword\">new</span> Dog() &#125;;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; dogs.length; i++)</span><br><span class=\"line\">\t\t\tdogs[i].woof();</span><br><span class=\"line\">\t\tCat[] cats = &#123; <span class=\"keyword\">new</span> Cat(), <span class=\"keyword\">new</span> Cat(), <span class=\"keyword\">new</span> Cat() &#125;;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; cats.length; i++)</span><br><span class=\"line\">\t\t\tcats[i].meow();</span><br><span class=\"line\">\t\tSystem.out.print(Dog.getCount() + <span class=\"string\">\" woofs and \"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(Cat.getCount() + <span class=\"string\">\" meows\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>每一个静态字段在声明它的类及其所有子类中共享一份单一的副本。<br>优选组合而不是继承。</p>\n<ol start=\"48\">\n<li>我所得到的都是静态的<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bark</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.print(<span class=\"string\">\"woof \"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Basenji</span> <span class=\"keyword\">extends</span> <span class=\"title\">Dog</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bark</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bark</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</span><br><span class=\"line\">\t\tDog woofer = <span class=\"keyword\">new</span> Dog();</span><br><span class=\"line\">\t\tDog nipper = <span class=\"keyword\">new</span> Basenji();</span><br><span class=\"line\">\t\twoofer.bark();</span><br><span class=\"line\">\t\tnipper.bark();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>对静态方法的调用不存在任何动态的分派机制。<br>千万不要用一个表达式来标识一个静态方法调用。<br>千万不要隐藏静态方法。</p>\n<ol start=\"49\">\n<li>比生命更大<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Elvis</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Elvis INSTANCE = <span class=\"keyword\">new</span> Elvis();</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> beltSize;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> CURRENT_YEAR = Calendar.getInstance().get(</span><br><span class=\"line\">\t\t\tCalendar.YEAR);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Elvis</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tbeltSize = CURRENT_YEAR - <span class=\"number\">1930</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">beltSize</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> beltSize;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Elvis wears a size \"</span> + INSTANCE.beltSize()</span><br><span class=\"line\">\t\t\t\t+ <span class=\"string\">\" belt.\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在final类型的静态字段被初始化之前，存在着读取其值的可能。<br>要想改正一个类初始化循环，需要重新对静态字段的初始器进行排序，使得每一个初始器都出现在任何依赖于它的初始器之前。<br>要当心类初始化循环。</p>\n<ol start=\"50\">\n<li>不是你的类型<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Type1</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tString s = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tSystem.out.println(s <span class=\"keyword\">instanceof</span> String);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>instanceof操作符被定义为在其左操作数为null时返回false。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Type2</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">new</span> Type2() <span class=\"keyword\">instanceof</span> String);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>instanceof操作符有这样的要求：如果两个操作数的类型都是类，其中一个必须是另一个的子类型。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Type3</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</span><br><span class=\"line\">\t\tType3 t3 = (Type3) <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ol start=\"51\">\n<li>要点何在<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> x, y;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String name; <span class=\"comment\">// Cached at construction time</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tPoint(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">\t\tname = makeName();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">makeName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"[\"</span> + x + <span class=\"string\">\",\"</span> + y + <span class=\"string\">\"]\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ColorPoint</span> <span class=\"keyword\">extends</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String color;</span><br><span class=\"line\"></span><br><span class=\"line\">\tColorPoint(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, String color) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(x, y);</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.color = color;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">makeName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.makeName() + <span class=\"string\">\":\"</span> + color;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">new</span> ColorPoint(<span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"string\">\"purple\"</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在一个final类型的实例字段被赋值之前，存在着取用其值的可能。<br>循环的实例初始化时可以且总是应该避免的。<br>千万不要在构造器中调用可覆写的方法。</p>\n<ol start=\"52\">\n<li>总和的玩笑<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cache</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\t\tinitializeIfNecessary();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> sum;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getSum</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tinitializeIfNecessary();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> initialized = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">initializeIfNecessary</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!initialized) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++)</span><br><span class=\"line\">\t\t\t\tsum += i;</span><br><span class=\"line\">\t\t\tinitialized = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(Cache.getSum());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>要么使用积极初始化，要么使用延迟初始化，千万不要同时使用二者。<br>请考虑类初始化的顺序，特别是当初始化显得很重要时更是如此。</p>\n<ol start=\"53\">\n<li>做你的事吧</li>\n<li>Null与Void<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Null</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">greet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Hello world!\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t((Null) <span class=\"keyword\">null</span>).greet();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>静态方法调用的限定表达式是可以计算的，但是它的值将被忽略。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Null.greet();</span><br><span class=\"line\">greet();</span><br></pre></td></tr></table></figure></p>\n<ol start=\"55\">\n<li>特创论<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Creator</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++)</span><br><span class=\"line\">\t\t\tCreature creature = <span class=\"keyword\">new</span> Creature();</span><br><span class=\"line\">\t\tSystem.out.println(Creature.numCreated());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Creature</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> numCreated = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Creature</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tnumCreated++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">numCreated</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> numCreated;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>一个局部变量声明作为一条语句只能直接出现在一个语句块中。（一个语句块是由一对花括号以及包含在这对花括号的语句和声明构成的）<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">\t\t\tCreature creature = <span class=\"keyword\">new</span> Creature();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">new</span> Creature();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Thread-safe creation counter</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Creature</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> numCreated;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Creature</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (Creature.class) &#123;</span><br><span class=\"line\">\t\t\tnumCreated++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">long</span> <span class=\"title\">numCreated</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> numCreated;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Creature</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> AtomicLong numCreated = <span class=\"keyword\">new</span> AtomicLong();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Creature</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tnumCreated.incrementAndGet();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">numCreated</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> numCreated.get();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在使用一个变量来对实例的创建进行计数时，要使用long类型而不是int类型的变量，以防止溢出。</p>\n<h2 id=\"第7章-库之谜\"><a href=\"#第7章-库之谜\" class=\"headerlink\" title=\"第7章 库之谜\"></a>第7章 库之谜</h2><ol start=\"56\">\n<li>大问题<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BigProblem</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tBigInteger fiveThousand = <span class=\"keyword\">new</span> BigInteger(<span class=\"string\">\"5000\"</span>);</span><br><span class=\"line\">\t\tBigInteger fiftyThousand = <span class=\"keyword\">new</span> BigInteger(<span class=\"string\">\"50000\"</span>);</span><br><span class=\"line\">\t\tBigInteger fiveHundredThousand = <span class=\"keyword\">new</span> BigInteger(<span class=\"string\">\"500000\"</span>);</span><br><span class=\"line\">\t\tBigInteger total = BigInteger.ZERO;</span><br><span class=\"line\">\t\ttotal.add(fiveThousand);</span><br><span class=\"line\">\t\ttotal.add(fiftyThousand);</span><br><span class=\"line\">\t\ttotal.add(fiveHundredThousand);</span><br><span class=\"line\">\t\tSystem.out.println(total);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>BigInteger实例是不可变的。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">total = total.add(fiveThousand);</span><br><span class=\"line\">total = total.add(fiftyThousand);</span><br><span class=\"line\">total = total.add(fiveHundredThousand);</span><br></pre></td></tr></table></figure></p>\n<ol start=\"57\">\n<li>名字里有什么<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Name</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String first, last;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Name</span><span class=\"params\">(String first, String last)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.first = first;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.last = last;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!(o <span class=\"keyword\">instanceof</span> Name))</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\tName n = (Name) o;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> n.first.equals(first) &amp;&amp; n.last.equals(last);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSet&lt;Name&gt; s = <span class=\"keyword\">new</span> HashSet&lt;Name&gt;();</span><br><span class=\"line\">\t\ts.add(<span class=\"keyword\">new</span> Name(<span class=\"string\">\"Mickey\"</span>, <span class=\"string\">\"Mouse\"</span>));</span><br><span class=\"line\">\t\tSystem.out.println(s.contains(<span class=\"keyword\">new</span> Name(<span class=\"string\">\"Mickey\"</span>, <span class=\"string\">\"Mouse\"</span>)));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>无论何时，只要覆写了equals方法，就必须同时覆写hashCode方法。</p>\n<ol start=\"58\">\n<li>产生它的散列码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Name</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String first, last;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Name</span><span class=\"params\">(String first, String last)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.first = first;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.last = last;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Name n)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> n.first.equals(first) &amp;&amp; n.last.equals(last);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">31</span> * first.hashCode() + last.hashCode();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSet&lt;Name&gt; s = <span class=\"keyword\">new</span> HashSet&lt;Name&gt;();</span><br><span class=\"line\">\t\ts.add(<span class=\"keyword\">new</span> Name(<span class=\"string\">\"Donald\"</span>, <span class=\"string\">\"Duck\"</span>));</span><br><span class=\"line\">\t\tSystem.out.println(s.contains(<span class=\"keyword\">new</span> Name(<span class=\"string\">\"Donald\"</span>, <span class=\"string\">\"Duck\"</span>)));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>重载为错误和混乱提供了机会。<br>为了避免无意识地重载，应该机械地对你想要覆写的每一个超类方法都复制其声明。</p>\n<ol start=\"59\">\n<li>差是什么<br>以0开头的整型字面常量将被解释成为八进制数值。<br>千万不要在一个整型字面常量前面加上一个0。</li>\n<li>一行以毙之<br>了解类库中有些什么可以为你节省大量的时间和精力，并且可以提高程序的速度和质量。</li>\n<li>日期游戏<br>Date将一月表示为0，而Calendar延续了这个错误。<br>Date.getDay返回的是Date实例所表示的星期日期，而不是月份日期。<br>在使用Calendar或Date的时候一定要当心，千万要记着查阅API文档。</li>\n<li>名字游戏<br>不要使用IdentityHashMap，除非你需要其基于标识的语义，它不是一个通用目的的Map实现。</li>\n<li>更多同样的问题<br>不要因为偶然地添加了一个返回类型，而将一个构造器声明变成了一个方法声明。<br>要遵守标准的命名约定。</li>\n<li>按余数编组<br>Math.abs不能保证一定会返回非负的结果。</li>\n<li>疑似配需的惊人传奇<br>不要使用基于减法的比较器，除非你能够确保要比较的数值之间的差永远不会大于Integer.MAX_VALUE。<h2 id=\"第8章-更多类之谜\"><a href=\"#第8章-更多类之谜\" class=\"headerlink\" title=\"第8章 更多类之谜\"></a>第8章 更多类之谜</h2></li>\n<li>一件私事<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String className = <span class=\"string\">\"Base\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Derived</span> <span class=\"keyword\">extends</span> <span class=\"title\">Base</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String className = <span class=\"string\">\"Derived\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrivateMatter</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">new</span> Derived().className);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>避免隐藏。<br>一个覆写方法的访问修饰符所提供的访问权限要大于等于被覆写方法的访问修饰符所提供的访问权限。而字段则不必。</p>\n<ol start=\"67\">\n<li>对字符串上瘾<br>要避免重用平台类的名字，并且千万不要难过重用java.lang中的类名。</li>\n<li>灰色的阴影<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShadesOfGray</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(X.Y.Z);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">X</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Y</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">static</span> String Z = <span class=\"string\">\"Black\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> C Y = <span class=\"keyword\">new</span> C();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</span><br><span class=\"line\">\tString Z = <span class=\"string\">\"White\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>当一个变量和一个类型具有相同的名字，并且它们位于相同的作用域时，变量名具有优先权。<br>相似地，变量名和类型名可以遮掩包名。</p>\n<ol start=\"69\">\n<li>黑色的渐隐</li>\n<li>一揽子交易<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> click;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CodeTalk</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doIt</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tprintMessage();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printMessage</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Click\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> hack;</span><br><span class=\"line\"><span class=\"keyword\">import</span> click.CodeTalk;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TypeIt</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClickIt</span> <span class=\"keyword\">extends</span> <span class=\"title\">CodeTalk</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printMessage</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"Hack\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tClickIt clickit = <span class=\"keyword\">new</span> ClickIt();</span><br><span class=\"line\">\t\tclickit.doIt();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>一个包内私有的方法不能被位于另一个包中的某个方法直接覆写。</p>\n<ol start=\"71\">\n<li>进口税</li>\n<li>终极危难<br>final修饰符对方法和字段而言，意味着某些完全不同的事情。对于方法，final意味着该方法不能被覆写（对实例方法而言）或者隐藏（对静态方法而言）。对于字段，final意味着该字段不能被赋值超过一次。</li>\n<li>隐私在公开<br>重用名字是危险的；应该避免隐藏、遮蔽和遮掩。</li>\n<li>同一性的危机</li>\n<li>头还是尾<br>名字重用的术语表<br>第9章 更多库之谜</li>\n<li>乒乓<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PingPong</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] a)</span> </span>&#123;</span><br><span class=\"line\">\t\tThread t = <span class=\"keyword\">new</span> Thread() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\tpong();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t\tt.run();</span><br><span class=\"line\">\t\tSystem.out.print(<span class=\"string\">\"Ping\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">pong</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.print(<span class=\"string\">\"Pong\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>当你想调用一个线程的start方法时要多加小心，别弄错成调用这个线程的run方法了。</p>\n<ol start=\"77\">\n<li>乱锁之妖</li>\n<li>反射的影响<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Reflector</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\tSet&lt;String&gt; s = <span class=\"keyword\">new</span> HashSet&lt;String&gt;();</span><br><span class=\"line\">\t\ts.add(<span class=\"string\">\"foo\"</span>);</span><br><span class=\"line\">\t\tIterator it = s.iterator();</span><br><span class=\"line\">\t\tMethod m = it.getClass().getMethod(<span class=\"string\">\"hasNext\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(m.invoke(it));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>访问位于其它包中的非公共类型的成员是不合法的。<br>Object.getClass().getMethod(“methodName”)这种惯用法虽然很常见，但是却有问题，它不应该被使用。<br>在使用反射访问某个类型时，请使用表示某种可访问类型的Class对象。<br>Method m = Iterator.class.getMethod(“hasNext”);</p>\n<ol start=\"79\">\n<li>狗狗的幸福生活<br>避免遮蔽。<br>使用Thread(Runnable)构造器来替代对Thread的继承。</li>\n<li>更深层的反射<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Outer().greetWorld();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">greetWorld</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(Inner.class.newInstance());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"Hello world\"</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>除非你确实需要一个外围实例i，否则应该优先使用静态成员类而不是非静态成员类。<br>请避免使用反射类实例化内部类。</p>\n<ol start=\"81\">\n<li>无法识别的字符化<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Greeter</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tString greeting = <span class=\"string\">\"Hello world\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; greeting.length(); i++)</span><br><span class=\"line\">\t\t\tSystem.out.write(greeting.charAt(i));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>write(int)是唯一一个在自动刷新功能开启的情况下不刷新PrintStream的输出方法。<br>尽可能使用熟悉的惯用法，如果不得不使用陌生的API，请一定要参考相关的文档。</p>\n<ol start=\"82\">\n<li>啤酒爆炸</li>\n<li>诵读困难者的一神论</li>\n<li>戛然而止<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SelfInterruption</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tThread.currentThread().interrupt();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (Thread.interrupted()) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"Interrupted: \"</span> + Thread.interrupted());</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"Not interrupted: \"</span> + Thread.interrupted());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>调用Thread.interrupted方法总是会清除当前线程的中断状态。<br>Thread.currentThread().isInterrupted()<br>不要使用Thread.interrupted方法，除非你想要清除当前线程的中断状态。</p>\n<ol start=\"85\">\n<li>延迟初始化</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Java解惑\"><a href=\"#Java解惑\" class=\"headerlink\" title=\"Java解惑\"></a>Java解惑</h1><hr>\n<h2 id=\"第2章-表达式之谜\"><a href=\"#第2章-表达式之谜\" class=\"headerlink\" title=\"第2章 表达式之谜\"></a>第2章 表达式之谜</h2><ol>\n<li>奇数性<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isOdd</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> i % <span class=\"number\">2</span> == <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>当取余操作返回一个非零的结果时，它与左操作数具有相同的正负符号。<br>当i是一个负奇数时，i%2等于-1而不是1。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isOdd</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i % <span class=\"number\">2</span> != <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ol start=\"2\">\n<li>找零时刻<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Change</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"number\">2.00</span>-<span class=\"number\">1.10</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>问题在于1.1这个数字不能被精确表示为一个double，因此被表示为最接近它的double值。<br>并不是所有的小数都可以用二进制浮点数精确表示。<br>二进制浮点对于货币计算是非常不合适的。<br>解决该问题的一种方式是使用某种整数类型。<br>解决该问题的另一种方式是使用执行精确小数运算的BigDecimal。<br>一定要用BigDecimal(String)构造器，而千万不要用BigDecimal(double)。<br>在需要精确答案的地方，要避免使用float和double；对于货币计算，要使用int、long或BigDecimal。</p>\n<ol start=\"3\">\n<li><p>长整除</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LongDivision</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> <span class=\"keyword\">long</span> MICROS_PER_DAY = <span class=\"number\">24</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">1000</span> * <span class=\"number\">1000</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> <span class=\"keyword\">long</span> MILLIS_PER_DAY = <span class=\"number\">24</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">1000</span>;</span><br><span class=\"line\">\t\tSystem.out.println(MICROS_PER_DAY/MILLIS_PER_DAY);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> final long MICROS_PER_DAY = 24L <em> 60 </em> 60 <em> 1000 </em> 1000;<br> final long MILLIS_PER_DAY = 24L <em> 60 </em> 60 * 1000;<br>当在操作很大的数字时，千万要提防溢出——它可是一个缄默杀手。</p>\n</li>\n<li>初级问题<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Elementary</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"number\">12345</span> + <span class=\"number\">5432l</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在long类型字面常量中，一定要用大写的L，千万不要用小写的l。<br>要避免使用单个l字母作为变量名。</p>\n<ol start=\"5\">\n<li>十六进制的趣事<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JoyOfHex</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(Long.toHexString(<span class=\"number\">0x100000000L</span> + <span class=\"number\">0xcafebabe</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>负的十进制常量可以很明确地用一个减号来标识。<br>如果十六进制和八进制字面常量的最高位被置位了，那么它们就是负数。<br>System.out.println(Long.toHexString(0x100000000L + 0xcafebabeL));<br>通常最好是避免混合类型的计算。</p>\n<ol start=\"6\">\n<li>多重转型<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Multicast</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println((<span class=\"keyword\">int</span>)(<span class=\"keyword\">char</span>)(<span class=\"keyword\">byte</span>)-<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>如果最初的数值类型是有符号的，就执行符号扩展；如果它是char，那么不管它将要被转换成什么类型，都执行零扩展。</p>\n<ol start=\"7\">\n<li>互换内容<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CleverSwap</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x = <span class=\"number\">1984</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> y = <span class=\"number\">2001</span>;</span><br><span class=\"line\">\t\tx ^= y ^= x ^= y;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"x=\"</span>+x+<span class=\"string\">\";y=\"</span>+y);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>C/C++中运行正确。Java中不正确。<br>操作符的操作数是从左向右求值的。<br>实际运行过程如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> tmp1 = x;</span><br><span class=\"line\"><span class=\"keyword\">int</span> tmp2 = y;</span><br><span class=\"line\"><span class=\"keyword\">int</span> tmp3 = x ^ y;</span><br><span class=\"line\">x = tmp3;</span><br><span class=\"line\">y = tmp2 ^ tmp3;</span><br><span class=\"line\">x = tmp1 ^ y;</span><br><span class=\"line\">y = (x ^= (y ^= x)) ^ y;</span><br></pre></td></tr></table></figure></p>\n<p>在单个表达式中不要对相同的变量赋值两次。</p>\n<ol start=\"8\">\n<li>Dos Equis<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DosEquis</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> x= <span class=\"string\">'X'</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">true</span> ? x : <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">false</span> ? i : x);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>混合类型的计算会引起混乱，而这一点在条件表达式中比在其他任何地方都表现得更明显。<br>确定条件表达式结果类型的规则：<br>（1） 如果第二个和第三个操作数具有相同的类型，那么它就是条件表达式的类型。<br>（2） 如果一个操作数的类型是T，T表示byte、short、或char，而另一个操作数是一个int类型的常数表达式，它的值可以用类型T表示，那么条件表达式的类型就是T。<br>（3） 否则，将对操作数类型进行二进制数字提升，而条件表达式的类型就是第二个和第三个操作数被提升之后的类型。<br>将final修饰符用于i的声明可以把i转变为一个常量表达式。<br>在条件表达式中使用类型相同的第二个和第三个操作数。</p>\n<ol start=\"9\">\n<li>半斤<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x += i;</span><br><span class=\"line\">x = x + i;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>复合赋值E1 op= E2等价于简单赋值E1=(T)((E1)op(E2))，其中T是E1的类型。<br>复合赋值表达式自动将所执行计算的结果转型为其左侧变量的类型。<br>请不要将复合赋值操作符作用于byte、short或char类型的变量。在将复合赋值操作符作用于int类型的变量上时，要确保表达式右侧不是long、float或double类型。在将复合赋值操作符作用于float类型的变量上时，要确保表达式右侧不是double类型。</p>\n<ol start=\"10\">\n<li>八两<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = x + i;</span><br><span class=\"line\">x += i;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>如果在+=操作符左侧的操作数是String类型的，那么它允许右侧的操作数是任意类型。<br>简单赋值操作符（=）允许其左侧的是对象引用类型，只要表达式的右侧与左侧的变量时赋值兼容的即可。</p>\n<h2 id=\"第3章-字符之谜\"><a href=\"#第3章-字符之谜\" class=\"headerlink\" title=\"第3章 字符之谜\"></a>第3章 字符之谜</h2><ol start=\"11\">\n<li>最后的笑声<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LastLaugh</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"H\"</span> + <span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">'H'</span> + <span class=\"string\">'a'</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>当且仅当+操作符的操作数中至少有一个是String类型时，才会执行字符串连接操作。<br>    System.out.println(“2+2=”+2+2);</p>\n<ol start=\"12\">\n<li><p>ABC</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Abc</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tString letters = <span class=\"string\">\"ABC\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span>[] numbers = &#123;<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>&#125;;</span><br><span class=\"line\">\t\tSystem.out.println(letters + <span class=\"string\">\" easy as \"</span> + numbers);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>System.out.println(numbers);<br>要想将一个char数组转换成一个字符串，就要调用String.valueOf(char[])方法。</p>\n</li>\n<li>动物庄园<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnimalFarm</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> String pig = <span class=\"string\">\"length:10\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> String dog = <span class=\"string\">\"length:\"</span> + pig.length();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Animals are equal:\"</span> + pig == dog);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>+比==的优先级高。<br>在使用字符串连接操作符时，总是将重要的操作数用括号括起来。<br>在比较对象引用时，应该优先使用equals方法而不是==操作符，除非需要比较的是对象的标识而不是对象的值。</p>\n<ol start=\"14\">\n<li>转义字符的溃败<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EscapeRout</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// \\u0022 is the Unicode escape for double quote (\")</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"a\\u0022.length()+\\u0022b\"</span>.length());\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>Java对在字符串字面常量中的Unicode转义字符没有提供任何特殊处理。<br>在字符串和字符字面常量中优先选择的是转义字符序列，而不是Unicode转义字符。<br>不要使用Unicode转义字符来表示ASCII字符。</p>\n<ol start=\"15\">\n<li>令人晕头转向的Hello<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Generated by the IBM IDL-to-Java compiler, version 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> * from F:\\TestRoot\\apps\\a1\\units\\include\\PolicyHome.idl</span></span><br><span class=\"line\"><span class=\"comment\"> * Wednesday, June 17, 1998 6:44:40 o'clock AM GMT+00:00</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.print(<span class=\"string\">\"Hell\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"o world\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>问题在于注释的第三行，它包含了字符\\units。<br>Unicode转义字符必须是良构的，即使出现在注释中也是如此。<br>在Javadoc注释中，应该使用HTML实体转义字符来代替Unicode转义字符。<br>工具应该确保不将Windows文件名置于所生成的Java源文件的注释中。</p>\n<ol start=\"16\">\n<li>行打印程序<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinePrinter</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Note: \\u000A is Unicode representation of linefeed (LF)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> c = <span class=\"number\">0x000A</span>;</span><br><span class=\"line\">\t\tSystem.out.println(c);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>第三行的注释<br>除非确实是必需的，否则就不要用使用Unicode转义字符。</p>\n<ol start=\"17\">\n<li>嗯？<br>只有在你要向程序中插入用其他任何方式都无法表示的字符时，Unicode转义字符才是必需的，除此之外的任何情况都应该避免使用它们。</li>\n<li>字符串奶酪<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StringCheese</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">256</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">256</span>; i++)</span><br><span class=\"line\">\t\t\tbytes[i] = (<span class=\"keyword\">byte</span>) i;</span><br><span class=\"line\">\t\tString str = <span class=\"keyword\">new</span> String(bytes);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, n = str.length(); i &lt; n; i++)</span><br><span class=\"line\">\t\t\tSystem.out.print((<span class=\"keyword\">int</span>) str.charAt(i) + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在char序列和byte序列之间转换时，可以且通常应该显式地指定字符集。<br>每当要将一个byte序列转换成一个String时，你都在使用一个字符集，不管是否显式指定了它。</p>\n<ol start=\"19\">\n<li>漂亮的火花（块注释符）<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Classifier</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(classify(<span class=\"string\">'n'</span>) + classify(<span class=\"string\">'+'</span>) + classify(<span class=\"string\">'2'</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> String <span class=\"title\">classify</span><span class=\"params\">(<span class=\"keyword\">char</span> ch)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"string\">\"0123456789\"</span>.indexOf(ch) &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"NUMERAL \"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"string\">\"abcdefghijklmnopqrstuvwxyz\"</span>.indexOf(ch) &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"LETTER \"</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">/* (Operators not supported yet)</span></span><br><span class=\"line\"><span class=\"comment\">\t\tif (\"+-*/</span>&amp;|!=<span class=\"string\">\".indexOf(ch) &gt;= 0)</span></span><br><span class=\"line\"><span class=\"string\">\t\treturn \"</span>OPERATOR <span class=\"string\">\";</span></span><br><span class=\"line\"><span class=\"string\">\t\t*/</span></span><br><span class=\"line\"><span class=\"string\">\t\treturn \"</span>UNKNOWN <span class=\"string\">\";</span></span><br><span class=\"line\"><span class=\"string\">\t&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在注释中没有特殊处理字符串字面常量。<br>块注释不能嵌套。<br>注释掉代码段的最好方式是使用单行的注释序列。<br>块注释不能可靠地注释掉代码段。</p>\n<ol start=\"20\">\n<li>我的类是什么<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Me</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(Me.class.getName().replaceAll(<span class=\"string\">\".\"</span>, <span class=\"string\">\"/\"</span>) + <span class=\"string\">\".class\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>String.replaceAll接受了一个正则表达式作为它的第一个参数。正则表达式”.”可以匹配任何单个的字符。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Me.class.getName().replaceAll(<span class=\"string\">\"\\\\.\"</span>, <span class=\"string\">\"/\"</span>);</span><br><span class=\"line\">System.out.println(Me.class.getName().replaceAll(Pattern.quote(<span class=\"string\">\".\"</span>), <span class=\"string\">\"/\"</span>) + <span class=\"string\">\".class\"</span>);</span><br></pre></td></tr></table></figure></p>\n<ol start=\"21\">\n<li>我的类是什么？镜头2<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MeToo</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(MeToo.class.getName().replaceAll(<span class=\"string\">\"\\\\.\"</span>,</span><br><span class=\"line\">\t\t\t\tFile.separator)</span><br><span class=\"line\">\t\t\t\t+ <span class=\"string\">\".class\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>第二个参数不是一个普通的字符串，而是一个替代字符串。在替代字符串中出现的反斜杠会把紧随其后的字符进行转义，从而导致其被按字面含义而处理了。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(MeToo.class.getName().replaceAll(<span class=\"string\">\"\\\\.\"</span>,</span><br><span class=\"line\">    Matcher.quoteReplacement(File.separator))</span><br><span class=\"line\">    + <span class=\"string\">\".class\"</span>);</span><br><span class=\"line\">System.out.println(MeToo.class.getName().replace(<span class=\"string\">\".\"</span>, File.separator)     + <span class=\"string\">\".class\"</span>);</span><br><span class=\"line\">System.out.println(MeToo.class.getName().replace(<span class=\"string\">'.'</span>,                    File.separatorChar) + <span class=\"string\">\".class\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>在使用不熟悉的类库方法时一定要格外小心。</p>\n<ol start=\"22\">\n<li>URL的愚弄<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BrowserTest</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.print(<span class=\"string\">\"iexplore:\"</span>);</span><br><span class=\"line\">\t\thttp: <span class=\"comment\">// www.google.com;</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\":maximize\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在程序中间出现的URL是一个语句标号（statement label）后面跟着尾注释（end-of-line comment）。<br>仔细地写注释，并让它们跟上时代；去除那些已遭废弃的代码。</p>\n<ol start=\"23\">\n<li>不劳而获<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rhymes</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Random rnd = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tStringBuffer word = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (rnd.nextInt(<span class=\"number\">2</span>)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t\tword = <span class=\"keyword\">new</span> StringBuffer(<span class=\"string\">'P'</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\t\tword = <span class=\"keyword\">new</span> StringBuffer(<span class=\"string\">'G'</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\tword = <span class=\"keyword\">new</span> StringBuffer(<span class=\"string\">'M'</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tword.append(<span class=\"string\">'a'</span>);</span><br><span class=\"line\">\t\tword.append(<span class=\"string\">'i'</span>);</span><br><span class=\"line\">\t\tword.append(<span class=\"string\">'n'</span>);</span><br><span class=\"line\">\t\tSystem.out.println(word);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>要当心栅栏柱错误。<br>不要从一个非空的case向下进入另一个case。<br>不管在什么时候，都要尽可能使用熟悉的惯用法和API。如果必须使用不熟悉的API，那么请仔细阅读其文档。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (rnd.nextInt(<span class=\"number\">3</span>)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t\tword = <span class=\"keyword\">new</span> StringBuffer(<span class=\"string\">\"P\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\t\tword = <span class=\"keyword\">new</span> StringBuffer(<span class=\"string\">\"G\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\tword = <span class=\"keyword\">new</span> StringBuffer(<span class=\"string\">\"M\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"PGM\"</span>.charAt(rnd.nextInt(<span class=\"number\">3</span>)) + <span class=\"string\">\"ain\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rhymes</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</span><br><span class=\"line\">\t\tString a[] = &#123; <span class=\"string\">\"Main\"</span>, <span class=\"string\">\"Pain\"</span>, <span class=\"string\">\"Gain\"</span> &#125;;</span><br><span class=\"line\">\t\tSystem.out.println(randomElement(a));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Random rnd = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">randomElement</span><span class=\"params\">(String[] a)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a[rnd.nextInt(a.length)];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>char不是String，而是更像int。<br>要提防各种诡异的谜题。</p>\n<h2 id=\"第4章-循环之谜\"><a href=\"#第4章-循环之谜\" class=\"headerlink\" title=\"第4章 循环之谜\"></a>第4章 循环之谜</h2><ol start=\"24\">\n<li>尽情享受每一个字节<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BigDelight</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">byte</span> b = Byte.MIN_VALUE; b &lt; Byte.MAX_VALUE; b++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (b == <span class=\"number\">0x90</span>)</span><br><span class=\"line\">\t\t\t\tSystem.out.print(<span class=\"string\">\"Joy!\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (b == (<span class=\"keyword\">byte</span>)<span class=\"number\">0x90</span>)\tSystem.out.print(<span class=\"string\">\"Joy!\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> ((b &amp; <span class=\"number\">0xff</span>) == <span class=\"number\">0x90</span>)\tSystem.out.print(<span class=\"string\">\"Joy!\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> TARGET = (<span class=\"keyword\">byte</span>) <span class=\"number\">0x90</span>; </span><br><span class=\"line\"><span class=\"keyword\">if</span> (b == TARGET)\tSystem.out.print(<span class=\"string\">\"Joy!\"</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>要避免混合类型比较，因为它们内在地容易引起混乱。<br>请使用声明的常量替代“魔数”。</p>\n<ol start=\"25\">\n<li>无情的增量操作<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Increment</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++)</span><br><span class=\"line\">\t\t\tj = j++;</span><br><span class=\"line\">\t\tSystem.out.println(j);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>不要在单个表达式中对相同的变量赋值超过一次。</p>\n<ol start=\"26\">\n<li>在循环中<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InTheLoop</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> END = Integer.MAX_VALUE;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> START = END - <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = START; i &lt;= END; i++)</span><br><span class=\"line\">\t\t\tcount++;</span><br><span class=\"line\">\t\tSystem.out.println(count);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">long</span> i = START; i &lt;= END; i++)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>无论你在何时使用了一个整数类型，都要意识到其边界条件。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i = START;</span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">\tcount++;</span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span> (i++ != END);</span><br></pre></td></tr></table></figure></p>\n<ol start=\"27\">\n<li>变幻莫测的i值<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shifty</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(-<span class=\"number\">1</span> &lt;&lt; i != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\ti++;</span><br><span class=\"line\">\t\tSystem.out.println(i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>移位操作符只使用其右操作数的低5位作为移位长度。或者是低6位，如果其左操作数是一个long类型数值。</p>\n<ol start=\"28\">\n<li>就</li>\n<li>Gf</li>\n<li>D</li>\n<li>G</li>\n<li>G</li>\n<li>G</li>\n<li>G</li>\n<li>G<h2 id=\"第5章-异常之谜\"><a href=\"#第5章-异常之谜\" class=\"headerlink\" title=\"第5章 异常之谜\"></a>第5章 异常之谜</h2></li>\n<li>F</li>\n<li>F</li>\n<li>F</li>\n<li>F</li>\n<li>F</li>\n<li>F</li>\n<li>F</li>\n<li>F</li>\n<li>F</li>\n<li>F</li>\n</ol>\n<h2 id=\"第6章-类之谜\"><a href=\"#第6章-类之谜\" class=\"headerlink\" title=\"第6章 类之谜\"></a>第6章 类之谜</h2><ol start=\"46\">\n<li>令人混淆的构造器案例<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Confusing</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Confusing</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Object\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Confusing</span><span class=\"params\">(<span class=\"keyword\">double</span>[] dArray)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"double array\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Confusing(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>Java的重载解析过程是分两阶段运行的。第一阶段选取所有可获得并且可应用的方法或构造器。第二阶段在第一阶段选取的方法或构造器中选取最精确的一个。<br>在测试哪一个方法或构造器最精确时，并没有使用实参。<br>要想强制要求编译器选择一个精确的重载版本，需要将实参转型为形参所声明的类型。<br>避免使用重载。</p>\n<ol start=\"47\">\n<li>啊呀！狸猫变犬子<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Counter</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> count;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">increment</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tcount++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> count;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title\">Counter</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Dog</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">woof</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tincrement();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> <span class=\"keyword\">extends</span> <span class=\"title\">Counter</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Cat</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">meow</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tincrement();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Ruckus</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tDog[] dogs = &#123; <span class=\"keyword\">new</span> Dog(), <span class=\"keyword\">new</span> Dog() &#125;;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; dogs.length; i++)</span><br><span class=\"line\">\t\t\tdogs[i].woof();</span><br><span class=\"line\">\t\tCat[] cats = &#123; <span class=\"keyword\">new</span> Cat(), <span class=\"keyword\">new</span> Cat(), <span class=\"keyword\">new</span> Cat() &#125;;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; cats.length; i++)</span><br><span class=\"line\">\t\t\tcats[i].meow();</span><br><span class=\"line\">\t\tSystem.out.print(Dog.getCount() + <span class=\"string\">\" woofs and \"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(Cat.getCount() + <span class=\"string\">\" meows\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>每一个静态字段在声明它的类及其所有子类中共享一份单一的副本。<br>优选组合而不是继承。</p>\n<ol start=\"48\">\n<li>我所得到的都是静态的<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bark</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.print(<span class=\"string\">\"woof \"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Basenji</span> <span class=\"keyword\">extends</span> <span class=\"title\">Dog</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bark</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bark</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</span><br><span class=\"line\">\t\tDog woofer = <span class=\"keyword\">new</span> Dog();</span><br><span class=\"line\">\t\tDog nipper = <span class=\"keyword\">new</span> Basenji();</span><br><span class=\"line\">\t\twoofer.bark();</span><br><span class=\"line\">\t\tnipper.bark();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>对静态方法的调用不存在任何动态的分派机制。<br>千万不要用一个表达式来标识一个静态方法调用。<br>千万不要隐藏静态方法。</p>\n<ol start=\"49\">\n<li>比生命更大<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Elvis</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Elvis INSTANCE = <span class=\"keyword\">new</span> Elvis();</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> beltSize;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> CURRENT_YEAR = Calendar.getInstance().get(</span><br><span class=\"line\">\t\t\tCalendar.YEAR);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Elvis</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tbeltSize = CURRENT_YEAR - <span class=\"number\">1930</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">beltSize</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> beltSize;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Elvis wears a size \"</span> + INSTANCE.beltSize()</span><br><span class=\"line\">\t\t\t\t+ <span class=\"string\">\" belt.\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在final类型的静态字段被初始化之前，存在着读取其值的可能。<br>要想改正一个类初始化循环，需要重新对静态字段的初始器进行排序，使得每一个初始器都出现在任何依赖于它的初始器之前。<br>要当心类初始化循环。</p>\n<ol start=\"50\">\n<li>不是你的类型<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Type1</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tString s = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tSystem.out.println(s <span class=\"keyword\">instanceof</span> String);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>instanceof操作符被定义为在其左操作数为null时返回false。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Type2</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">new</span> Type2() <span class=\"keyword\">instanceof</span> String);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>instanceof操作符有这样的要求：如果两个操作数的类型都是类，其中一个必须是另一个的子类型。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Type3</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</span><br><span class=\"line\">\t\tType3 t3 = (Type3) <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ol start=\"51\">\n<li>要点何在<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> x, y;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String name; <span class=\"comment\">// Cached at construction time</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tPoint(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">\t\tname = makeName();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">makeName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"[\"</span> + x + <span class=\"string\">\",\"</span> + y + <span class=\"string\">\"]\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ColorPoint</span> <span class=\"keyword\">extends</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String color;</span><br><span class=\"line\"></span><br><span class=\"line\">\tColorPoint(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, String color) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(x, y);</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.color = color;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">makeName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.makeName() + <span class=\"string\">\":\"</span> + color;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">new</span> ColorPoint(<span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"string\">\"purple\"</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在一个final类型的实例字段被赋值之前，存在着取用其值的可能。<br>循环的实例初始化时可以且总是应该避免的。<br>千万不要在构造器中调用可覆写的方法。</p>\n<ol start=\"52\">\n<li>总和的玩笑<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cache</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\t\tinitializeIfNecessary();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> sum;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getSum</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tinitializeIfNecessary();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> initialized = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">initializeIfNecessary</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!initialized) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++)</span><br><span class=\"line\">\t\t\t\tsum += i;</span><br><span class=\"line\">\t\t\tinitialized = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(Cache.getSum());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>要么使用积极初始化，要么使用延迟初始化，千万不要同时使用二者。<br>请考虑类初始化的顺序，特别是当初始化显得很重要时更是如此。</p>\n<ol start=\"53\">\n<li>做你的事吧</li>\n<li>Null与Void<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Null</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">greet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Hello world!\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t((Null) <span class=\"keyword\">null</span>).greet();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>静态方法调用的限定表达式是可以计算的，但是它的值将被忽略。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Null.greet();</span><br><span class=\"line\">greet();</span><br></pre></td></tr></table></figure></p>\n<ol start=\"55\">\n<li>特创论<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Creator</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++)</span><br><span class=\"line\">\t\t\tCreature creature = <span class=\"keyword\">new</span> Creature();</span><br><span class=\"line\">\t\tSystem.out.println(Creature.numCreated());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Creature</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> numCreated = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Creature</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tnumCreated++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">numCreated</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> numCreated;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>一个局部变量声明作为一条语句只能直接出现在一个语句块中。（一个语句块是由一对花括号以及包含在这对花括号的语句和声明构成的）<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">\t\t\tCreature creature = <span class=\"keyword\">new</span> Creature();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">new</span> Creature();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Thread-safe creation counter</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Creature</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> numCreated;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Creature</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (Creature.class) &#123;</span><br><span class=\"line\">\t\t\tnumCreated++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">long</span> <span class=\"title\">numCreated</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> numCreated;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Creature</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> AtomicLong numCreated = <span class=\"keyword\">new</span> AtomicLong();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Creature</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tnumCreated.incrementAndGet();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">numCreated</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> numCreated.get();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在使用一个变量来对实例的创建进行计数时，要使用long类型而不是int类型的变量，以防止溢出。</p>\n<h2 id=\"第7章-库之谜\"><a href=\"#第7章-库之谜\" class=\"headerlink\" title=\"第7章 库之谜\"></a>第7章 库之谜</h2><ol start=\"56\">\n<li>大问题<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BigProblem</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tBigInteger fiveThousand = <span class=\"keyword\">new</span> BigInteger(<span class=\"string\">\"5000\"</span>);</span><br><span class=\"line\">\t\tBigInteger fiftyThousand = <span class=\"keyword\">new</span> BigInteger(<span class=\"string\">\"50000\"</span>);</span><br><span class=\"line\">\t\tBigInteger fiveHundredThousand = <span class=\"keyword\">new</span> BigInteger(<span class=\"string\">\"500000\"</span>);</span><br><span class=\"line\">\t\tBigInteger total = BigInteger.ZERO;</span><br><span class=\"line\">\t\ttotal.add(fiveThousand);</span><br><span class=\"line\">\t\ttotal.add(fiftyThousand);</span><br><span class=\"line\">\t\ttotal.add(fiveHundredThousand);</span><br><span class=\"line\">\t\tSystem.out.println(total);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>BigInteger实例是不可变的。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">total = total.add(fiveThousand);</span><br><span class=\"line\">total = total.add(fiftyThousand);</span><br><span class=\"line\">total = total.add(fiveHundredThousand);</span><br></pre></td></tr></table></figure></p>\n<ol start=\"57\">\n<li>名字里有什么<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Name</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String first, last;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Name</span><span class=\"params\">(String first, String last)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.first = first;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.last = last;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!(o <span class=\"keyword\">instanceof</span> Name))</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\tName n = (Name) o;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> n.first.equals(first) &amp;&amp; n.last.equals(last);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSet&lt;Name&gt; s = <span class=\"keyword\">new</span> HashSet&lt;Name&gt;();</span><br><span class=\"line\">\t\ts.add(<span class=\"keyword\">new</span> Name(<span class=\"string\">\"Mickey\"</span>, <span class=\"string\">\"Mouse\"</span>));</span><br><span class=\"line\">\t\tSystem.out.println(s.contains(<span class=\"keyword\">new</span> Name(<span class=\"string\">\"Mickey\"</span>, <span class=\"string\">\"Mouse\"</span>)));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>无论何时，只要覆写了equals方法，就必须同时覆写hashCode方法。</p>\n<ol start=\"58\">\n<li>产生它的散列码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Name</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String first, last;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Name</span><span class=\"params\">(String first, String last)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.first = first;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.last = last;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Name n)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> n.first.equals(first) &amp;&amp; n.last.equals(last);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">31</span> * first.hashCode() + last.hashCode();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSet&lt;Name&gt; s = <span class=\"keyword\">new</span> HashSet&lt;Name&gt;();</span><br><span class=\"line\">\t\ts.add(<span class=\"keyword\">new</span> Name(<span class=\"string\">\"Donald\"</span>, <span class=\"string\">\"Duck\"</span>));</span><br><span class=\"line\">\t\tSystem.out.println(s.contains(<span class=\"keyword\">new</span> Name(<span class=\"string\">\"Donald\"</span>, <span class=\"string\">\"Duck\"</span>)));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>重载为错误和混乱提供了机会。<br>为了避免无意识地重载，应该机械地对你想要覆写的每一个超类方法都复制其声明。</p>\n<ol start=\"59\">\n<li>差是什么<br>以0开头的整型字面常量将被解释成为八进制数值。<br>千万不要在一个整型字面常量前面加上一个0。</li>\n<li>一行以毙之<br>了解类库中有些什么可以为你节省大量的时间和精力，并且可以提高程序的速度和质量。</li>\n<li>日期游戏<br>Date将一月表示为0，而Calendar延续了这个错误。<br>Date.getDay返回的是Date实例所表示的星期日期，而不是月份日期。<br>在使用Calendar或Date的时候一定要当心，千万要记着查阅API文档。</li>\n<li>名字游戏<br>不要使用IdentityHashMap，除非你需要其基于标识的语义，它不是一个通用目的的Map实现。</li>\n<li>更多同样的问题<br>不要因为偶然地添加了一个返回类型，而将一个构造器声明变成了一个方法声明。<br>要遵守标准的命名约定。</li>\n<li>按余数编组<br>Math.abs不能保证一定会返回非负的结果。</li>\n<li>疑似配需的惊人传奇<br>不要使用基于减法的比较器，除非你能够确保要比较的数值之间的差永远不会大于Integer.MAX_VALUE。<h2 id=\"第8章-更多类之谜\"><a href=\"#第8章-更多类之谜\" class=\"headerlink\" title=\"第8章 更多类之谜\"></a>第8章 更多类之谜</h2></li>\n<li>一件私事<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String className = <span class=\"string\">\"Base\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Derived</span> <span class=\"keyword\">extends</span> <span class=\"title\">Base</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String className = <span class=\"string\">\"Derived\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrivateMatter</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">new</span> Derived().className);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>避免隐藏。<br>一个覆写方法的访问修饰符所提供的访问权限要大于等于被覆写方法的访问修饰符所提供的访问权限。而字段则不必。</p>\n<ol start=\"67\">\n<li>对字符串上瘾<br>要避免重用平台类的名字，并且千万不要难过重用java.lang中的类名。</li>\n<li>灰色的阴影<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShadesOfGray</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(X.Y.Z);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">X</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Y</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">static</span> String Z = <span class=\"string\">\"Black\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> C Y = <span class=\"keyword\">new</span> C();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</span><br><span class=\"line\">\tString Z = <span class=\"string\">\"White\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>当一个变量和一个类型具有相同的名字，并且它们位于相同的作用域时，变量名具有优先权。<br>相似地，变量名和类型名可以遮掩包名。</p>\n<ol start=\"69\">\n<li>黑色的渐隐</li>\n<li>一揽子交易<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> click;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CodeTalk</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doIt</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tprintMessage();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printMessage</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Click\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> hack;</span><br><span class=\"line\"><span class=\"keyword\">import</span> click.CodeTalk;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TypeIt</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClickIt</span> <span class=\"keyword\">extends</span> <span class=\"title\">CodeTalk</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printMessage</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"Hack\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tClickIt clickit = <span class=\"keyword\">new</span> ClickIt();</span><br><span class=\"line\">\t\tclickit.doIt();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>一个包内私有的方法不能被位于另一个包中的某个方法直接覆写。</p>\n<ol start=\"71\">\n<li>进口税</li>\n<li>终极危难<br>final修饰符对方法和字段而言，意味着某些完全不同的事情。对于方法，final意味着该方法不能被覆写（对实例方法而言）或者隐藏（对静态方法而言）。对于字段，final意味着该字段不能被赋值超过一次。</li>\n<li>隐私在公开<br>重用名字是危险的；应该避免隐藏、遮蔽和遮掩。</li>\n<li>同一性的危机</li>\n<li>头还是尾<br>名字重用的术语表<br>第9章 更多库之谜</li>\n<li>乒乓<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PingPong</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] a)</span> </span>&#123;</span><br><span class=\"line\">\t\tThread t = <span class=\"keyword\">new</span> Thread() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\tpong();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t\tt.run();</span><br><span class=\"line\">\t\tSystem.out.print(<span class=\"string\">\"Ping\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">pong</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.print(<span class=\"string\">\"Pong\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>当你想调用一个线程的start方法时要多加小心，别弄错成调用这个线程的run方法了。</p>\n<ol start=\"77\">\n<li>乱锁之妖</li>\n<li>反射的影响<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Reflector</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\tSet&lt;String&gt; s = <span class=\"keyword\">new</span> HashSet&lt;String&gt;();</span><br><span class=\"line\">\t\ts.add(<span class=\"string\">\"foo\"</span>);</span><br><span class=\"line\">\t\tIterator it = s.iterator();</span><br><span class=\"line\">\t\tMethod m = it.getClass().getMethod(<span class=\"string\">\"hasNext\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(m.invoke(it));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>访问位于其它包中的非公共类型的成员是不合法的。<br>Object.getClass().getMethod(“methodName”)这种惯用法虽然很常见，但是却有问题，它不应该被使用。<br>在使用反射访问某个类型时，请使用表示某种可访问类型的Class对象。<br>Method m = Iterator.class.getMethod(“hasNext”);</p>\n<ol start=\"79\">\n<li>狗狗的幸福生活<br>避免遮蔽。<br>使用Thread(Runnable)构造器来替代对Thread的继承。</li>\n<li>更深层的反射<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Outer().greetWorld();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">greetWorld</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(Inner.class.newInstance());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"Hello world\"</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>除非你确实需要一个外围实例i，否则应该优先使用静态成员类而不是非静态成员类。<br>请避免使用反射类实例化内部类。</p>\n<ol start=\"81\">\n<li>无法识别的字符化<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Greeter</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tString greeting = <span class=\"string\">\"Hello world\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; greeting.length(); i++)</span><br><span class=\"line\">\t\t\tSystem.out.write(greeting.charAt(i));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>write(int)是唯一一个在自动刷新功能开启的情况下不刷新PrintStream的输出方法。<br>尽可能使用熟悉的惯用法，如果不得不使用陌生的API，请一定要参考相关的文档。</p>\n<ol start=\"82\">\n<li>啤酒爆炸</li>\n<li>诵读困难者的一神论</li>\n<li>戛然而止<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SelfInterruption</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tThread.currentThread().interrupt();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (Thread.interrupted()) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"Interrupted: \"</span> + Thread.interrupted());</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"Not interrupted: \"</span> + Thread.interrupted());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>调用Thread.interrupted方法总是会清除当前线程的中断状态。<br>Thread.currentThread().isInterrupted()<br>不要使用Thread.interrupted方法，除非你想要清除当前线程的中断状态。</p>\n<ol start=\"85\">\n<li>延迟初始化</li>\n</ol>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2019-04-16T15:09:11.286Z","updated":"2019-04-16T15:09:11.286Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuldtu4o0007nodijwln5tph","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"正则表达式必知必会","date":"2019-04-15T16:00:00.000Z","_content":"\n# 正则表达式必知必会\n\n---\n\n1. 正则表达式的两种基本用途：搜索和替换。\n2. 正则表达式是一些用来匹配和处理文本的字符串。\n3. 正则表达式是区分字母大小写的。\n4. .字符（英文句号）可以匹配任何一个单个的字符。\n正则表达式里的.字符相当于DOS的?字符，相当于SQL中的_（下划线）字符。\n5. \\是一个元字符（metacharacter，表示“这个字符有特殊含义，而不是字符本身含义”）。\n6. [和]定义一个字符集合。\n7. 字符区间可以用-（连字符）来定义。\n8. ^ 取非匹配\n9. 匹配数字（与非数字）\n|元字符|说明|\n|:--:|:--:|\n|\\d|任何一个数字字符（等价于[0-9]）|\n|\\D|任何一个非数字字符（等价于[^0-9]）|\n10. 匹配字母和数字（与非字母和数字）\n|元字符|说明|\n|:--:|:--:|\n|\\w|任何一个字母数字字符（大小写均可）或下划线字符（等价于[a-zA-Z0-9_]）|\n|\\W|任何一个非字母数字或下划线字符（等价于[^a-zA-Z0-9_]）|\n11. 匹配空白字符（与非空白字符）\n|元字符|说明|\n|:--:|:--:|\n|\\s|任何一个空白字符（等价于[\\f\\n\\r\\t\\v]）|\n|\\S|任何一个非空白字符（等价于[^\\f\\n\\r\\t\\v]）|\n12. 匹配十六进制或八进制数值\n在正则表达式里，十六进制数值要用前缀\\x来给出，八进制数值要用前缀\\0来给出。\n13. 使用POSIX字符类（JavaScript不支持）\n14. +匹配一个或多个字符（至少一个；不匹配零个字符的情况）。\n15. 当在字符集合里使用的时候，像.和+这样的元字符将被解释为普通字符，不需要被转义。\n16. *匹配字符（或字符集合连续出现零次或多次的情况）。\n17. ?只能匹配一个字符（或字符集合）的零次或一次出现，最多不超过一次。\n18. 重复次数要用{和}字符来给出——把数值写在它们之间。\n19. 防止过度匹配\n|贪婪型元字符|懒惰型元字符|\n|:--:|:--:|\n|* | *?|\n|+|+?|\n|{n,}|{n,}?|\n20. 单词边界：\n\\b用来匹配一个单词的开始或结尾，不匹配一个单词边界，使用\\B。\n21. 字符串边界：\n`用来定义字符串边界的元字符有两个：一个是用来定义字符串开头的^，另一个是用来定义字符串结尾的$。`\n22. 子表达式必须用(和)括起来。\n23. 一般来说，元字符.不匹配换行符。\n24. 回溯引用指的是模式的后半部分引用在前半部分中定义的子表达式。\n25. 回溯引用只能用来引用模式里的子表达式（用(和)括起来的正则表达式片段）。\n26. 回溯引用匹配通常从1开始计数（\\1、\\2，等等）。在许多实现里，第0个匹配（\\0）可以用来代表整个正则表达式。\n27. 回溯引用在替换操作中的应用\n() $\n28. 大小写转换\n|元字符|说明|\n|:--:|:--:|\n|\\E|结束\\L或\\U转换|\n|\\l|把下一个字符转换为小写|\n|\\L|把\\L到\\E之间的字符全部转换为小写|\n|\\u|把下一个字符转换为大写|\n|\\U|把\\U到\\E之间的字符全部转换为大写|\n29. 向前查找模式就是一个以?=开头的子表达式，需要匹配的文本跟在=的后面。\n30. 向后查找操作符时?<=。\n31. 向前查找模式的长度是可变的，它们可以包含.和+之类的元字符。\n而向后查找模式只能是固定长度。\n32. 对前后查找取非\n|操作符|说明|\n|:--:|:--:|\n|(?=)|正向前查找|\n|(?!)|负向前查找|\n|(?<=)|正向后查找|\n|(?<!)|负向后查找|\n\n\n\n\n\n\n","source":"_posts/正则表达式必知必会.md","raw":"---\ntitle: 正则表达式必知必会\ndate: 2019-04-16\ncategories: 正则表达式\n---\n\n# 正则表达式必知必会\n\n---\n\n1. 正则表达式的两种基本用途：搜索和替换。\n2. 正则表达式是一些用来匹配和处理文本的字符串。\n3. 正则表达式是区分字母大小写的。\n4. .字符（英文句号）可以匹配任何一个单个的字符。\n正则表达式里的.字符相当于DOS的?字符，相当于SQL中的_（下划线）字符。\n5. \\是一个元字符（metacharacter，表示“这个字符有特殊含义，而不是字符本身含义”）。\n6. [和]定义一个字符集合。\n7. 字符区间可以用-（连字符）来定义。\n8. ^ 取非匹配\n9. 匹配数字（与非数字）\n|元字符|说明|\n|:--:|:--:|\n|\\d|任何一个数字字符（等价于[0-9]）|\n|\\D|任何一个非数字字符（等价于[^0-9]）|\n10. 匹配字母和数字（与非字母和数字）\n|元字符|说明|\n|:--:|:--:|\n|\\w|任何一个字母数字字符（大小写均可）或下划线字符（等价于[a-zA-Z0-9_]）|\n|\\W|任何一个非字母数字或下划线字符（等价于[^a-zA-Z0-9_]）|\n11. 匹配空白字符（与非空白字符）\n|元字符|说明|\n|:--:|:--:|\n|\\s|任何一个空白字符（等价于[\\f\\n\\r\\t\\v]）|\n|\\S|任何一个非空白字符（等价于[^\\f\\n\\r\\t\\v]）|\n12. 匹配十六进制或八进制数值\n在正则表达式里，十六进制数值要用前缀\\x来给出，八进制数值要用前缀\\0来给出。\n13. 使用POSIX字符类（JavaScript不支持）\n14. +匹配一个或多个字符（至少一个；不匹配零个字符的情况）。\n15. 当在字符集合里使用的时候，像.和+这样的元字符将被解释为普通字符，不需要被转义。\n16. *匹配字符（或字符集合连续出现零次或多次的情况）。\n17. ?只能匹配一个字符（或字符集合）的零次或一次出现，最多不超过一次。\n18. 重复次数要用{和}字符来给出——把数值写在它们之间。\n19. 防止过度匹配\n|贪婪型元字符|懒惰型元字符|\n|:--:|:--:|\n|* | *?|\n|+|+?|\n|{n,}|{n,}?|\n20. 单词边界：\n\\b用来匹配一个单词的开始或结尾，不匹配一个单词边界，使用\\B。\n21. 字符串边界：\n`用来定义字符串边界的元字符有两个：一个是用来定义字符串开头的^，另一个是用来定义字符串结尾的$。`\n22. 子表达式必须用(和)括起来。\n23. 一般来说，元字符.不匹配换行符。\n24. 回溯引用指的是模式的后半部分引用在前半部分中定义的子表达式。\n25. 回溯引用只能用来引用模式里的子表达式（用(和)括起来的正则表达式片段）。\n26. 回溯引用匹配通常从1开始计数（\\1、\\2，等等）。在许多实现里，第0个匹配（\\0）可以用来代表整个正则表达式。\n27. 回溯引用在替换操作中的应用\n() $\n28. 大小写转换\n|元字符|说明|\n|:--:|:--:|\n|\\E|结束\\L或\\U转换|\n|\\l|把下一个字符转换为小写|\n|\\L|把\\L到\\E之间的字符全部转换为小写|\n|\\u|把下一个字符转换为大写|\n|\\U|把\\U到\\E之间的字符全部转换为大写|\n29. 向前查找模式就是一个以?=开头的子表达式，需要匹配的文本跟在=的后面。\n30. 向后查找操作符时?<=。\n31. 向前查找模式的长度是可变的，它们可以包含.和+之类的元字符。\n而向后查找模式只能是固定长度。\n32. 对前后查找取非\n|操作符|说明|\n|:--:|:--:|\n|(?=)|正向前查找|\n|(?!)|负向前查找|\n|(?<=)|正向后查找|\n|(?<!)|负向后查找|\n\n\n\n\n\n\n","slug":"正则表达式必知必会","published":1,"updated":"2019-04-16T15:55:02.409Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuldtu4r0008nodilnm7lo9w","content":"<h1 id=\"正则表达式必知必会\"><a href=\"#正则表达式必知必会\" class=\"headerlink\" title=\"正则表达式必知必会\"></a>正则表达式必知必会</h1><hr>\n<ol>\n<li>正则表达式的两种基本用途：搜索和替换。</li>\n<li>正则表达式是一些用来匹配和处理文本的字符串。</li>\n<li>正则表达式是区分字母大小写的。</li>\n<li>.字符（英文句号）可以匹配任何一个单个的字符。<br>正则表达式里的.字符相当于DOS的?字符，相当于SQL中的_（下划线）字符。</li>\n<li>\\是一个元字符（metacharacter，表示“这个字符有特殊含义，而不是字符本身含义”）。</li>\n<li>[和]定义一个字符集合。</li>\n<li>字符区间可以用-（连字符）来定义。</li>\n<li>^ 取非匹配</li>\n<li>匹配数字（与非数字）<br>|元字符|说明|<br>|:–:|:–:|<br>|\\d|任何一个数字字符（等价于[0-9]）|<br>|\\D|任何一个非数字字符（等价于[^0-9]）|</li>\n<li>匹配字母和数字（与非字母和数字）<br>|元字符|说明|<br>|:–:|:–:|<br>|\\w|任何一个字母数字字符（大小写均可）或下划线字符（等价于[a-zA-Z0-9_]）|<br>|\\W|任何一个非字母数字或下划线字符（等价于[^a-zA-Z0-9_]）|</li>\n<li>匹配空白字符（与非空白字符）<br>|元字符|说明|<br>|:–:|:–:|<br>|\\s|任何一个空白字符（等价于[\\f\\n\\r\\t\\v]）|<br>|\\S|任何一个非空白字符（等价于[^\\f\\n\\r\\t\\v]）|</li>\n<li>匹配十六进制或八进制数值<br>在正则表达式里，十六进制数值要用前缀\\x来给出，八进制数值要用前缀\\0来给出。</li>\n<li>使用POSIX字符类（JavaScript不支持）</li>\n<li>+匹配一个或多个字符（至少一个；不匹配零个字符的情况）。</li>\n<li>当在字符集合里使用的时候，像.和+这样的元字符将被解释为普通字符，不需要被转义。</li>\n<li>*匹配字符（或字符集合连续出现零次或多次的情况）。</li>\n<li>?只能匹配一个字符（或字符集合）的零次或一次出现，最多不超过一次。</li>\n<li>重复次数要用{和}字符来给出——把数值写在它们之间。</li>\n<li>防止过度匹配<br>|贪婪型元字符|懒惰型元字符|<br>|:–:|:–:|<br>|<em> | </em>?|<br>|+|+?|<br>|{n,}|{n,}?|</li>\n<li>单词边界：<br>\\b用来匹配一个单词的开始或结尾，不匹配一个单词边界，使用\\B。</li>\n<li>字符串边界：<br><code>用来定义字符串边界的元字符有两个：一个是用来定义字符串开头的^，另一个是用来定义字符串结尾的$。</code></li>\n<li>子表达式必须用(和)括起来。</li>\n<li>一般来说，元字符.不匹配换行符。</li>\n<li>回溯引用指的是模式的后半部分引用在前半部分中定义的子表达式。</li>\n<li>回溯引用只能用来引用模式里的子表达式（用(和)括起来的正则表达式片段）。</li>\n<li>回溯引用匹配通常从1开始计数（\\1、\\2，等等）。在许多实现里，第0个匹配（\\0）可以用来代表整个正则表达式。</li>\n<li>回溯引用在替换操作中的应用<br>() $</li>\n<li>大小写转换<br>|元字符|说明|<br>|:–:|:–:|<br>|\\E|结束\\L或\\U转换|<br>|\\l|把下一个字符转换为小写|<br>|\\L|把\\L到\\E之间的字符全部转换为小写|<br>|\\u|把下一个字符转换为大写|<br>|\\U|把\\U到\\E之间的字符全部转换为大写|</li>\n<li>向前查找模式就是一个以?=开头的子表达式，需要匹配的文本跟在=的后面。</li>\n<li>向后查找操作符时?&lt;=。</li>\n<li>向前查找模式的长度是可变的，它们可以包含.和+之类的元字符。<br>而向后查找模式只能是固定长度。</li>\n<li>对前后查找取非<br>|操作符|说明|<br>|:–:|:–:|<br>|(?=)|正向前查找|<br>|(?!)|负向前查找|<br>|(?&lt;=)|正向后查找|<br>|(?&lt;!)|负向后查找|</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"正则表达式必知必会\"><a href=\"#正则表达式必知必会\" class=\"headerlink\" title=\"正则表达式必知必会\"></a>正则表达式必知必会</h1><hr>\n<ol>\n<li>正则表达式的两种基本用途：搜索和替换。</li>\n<li>正则表达式是一些用来匹配和处理文本的字符串。</li>\n<li>正则表达式是区分字母大小写的。</li>\n<li>.字符（英文句号）可以匹配任何一个单个的字符。<br>正则表达式里的.字符相当于DOS的?字符，相当于SQL中的_（下划线）字符。</li>\n<li>\\是一个元字符（metacharacter，表示“这个字符有特殊含义，而不是字符本身含义”）。</li>\n<li>[和]定义一个字符集合。</li>\n<li>字符区间可以用-（连字符）来定义。</li>\n<li>^ 取非匹配</li>\n<li>匹配数字（与非数字）<br>|元字符|说明|<br>|:–:|:–:|<br>|\\d|任何一个数字字符（等价于[0-9]）|<br>|\\D|任何一个非数字字符（等价于[^0-9]）|</li>\n<li>匹配字母和数字（与非字母和数字）<br>|元字符|说明|<br>|:–:|:–:|<br>|\\w|任何一个字母数字字符（大小写均可）或下划线字符（等价于[a-zA-Z0-9_]）|<br>|\\W|任何一个非字母数字或下划线字符（等价于[^a-zA-Z0-9_]）|</li>\n<li>匹配空白字符（与非空白字符）<br>|元字符|说明|<br>|:–:|:–:|<br>|\\s|任何一个空白字符（等价于[\\f\\n\\r\\t\\v]）|<br>|\\S|任何一个非空白字符（等价于[^\\f\\n\\r\\t\\v]）|</li>\n<li>匹配十六进制或八进制数值<br>在正则表达式里，十六进制数值要用前缀\\x来给出，八进制数值要用前缀\\0来给出。</li>\n<li>使用POSIX字符类（JavaScript不支持）</li>\n<li>+匹配一个或多个字符（至少一个；不匹配零个字符的情况）。</li>\n<li>当在字符集合里使用的时候，像.和+这样的元字符将被解释为普通字符，不需要被转义。</li>\n<li>*匹配字符（或字符集合连续出现零次或多次的情况）。</li>\n<li>?只能匹配一个字符（或字符集合）的零次或一次出现，最多不超过一次。</li>\n<li>重复次数要用{和}字符来给出——把数值写在它们之间。</li>\n<li>防止过度匹配<br>|贪婪型元字符|懒惰型元字符|<br>|:–:|:–:|<br>|<em> | </em>?|<br>|+|+?|<br>|{n,}|{n,}?|</li>\n<li>单词边界：<br>\\b用来匹配一个单词的开始或结尾，不匹配一个单词边界，使用\\B。</li>\n<li>字符串边界：<br><code>用来定义字符串边界的元字符有两个：一个是用来定义字符串开头的^，另一个是用来定义字符串结尾的$。</code></li>\n<li>子表达式必须用(和)括起来。</li>\n<li>一般来说，元字符.不匹配换行符。</li>\n<li>回溯引用指的是模式的后半部分引用在前半部分中定义的子表达式。</li>\n<li>回溯引用只能用来引用模式里的子表达式（用(和)括起来的正则表达式片段）。</li>\n<li>回溯引用匹配通常从1开始计数（\\1、\\2，等等）。在许多实现里，第0个匹配（\\0）可以用来代表整个正则表达式。</li>\n<li>回溯引用在替换操作中的应用<br>() $</li>\n<li>大小写转换<br>|元字符|说明|<br>|:–:|:–:|<br>|\\E|结束\\L或\\U转换|<br>|\\l|把下一个字符转换为小写|<br>|\\L|把\\L到\\E之间的字符全部转换为小写|<br>|\\u|把下一个字符转换为大写|<br>|\\U|把\\U到\\E之间的字符全部转换为大写|</li>\n<li>向前查找模式就是一个以?=开头的子表达式，需要匹配的文本跟在=的后面。</li>\n<li>向后查找操作符时?&lt;=。</li>\n<li>向前查找模式的长度是可变的，它们可以包含.和+之类的元字符。<br>而向后查找模式只能是固定长度。</li>\n<li>对前后查找取非<br>|操作符|说明|<br>|:–:|:–:|<br>|(?=)|正向前查找|<br>|(?!)|负向前查找|<br>|(?&lt;=)|正向后查找|<br>|(?&lt;!)|负向后查找|</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjuldtu3g0000nodiyaoourhi","category_id":"cjuldtu430004nodi0xj5x0c1","_id":"cjuldtu4v000anodild4kfxbz"},{"post_id":"cjuldtu3t0002nodipw58gpky","category_id":"cjuldtu4u0009nodiykc0rusn","_id":"cjuldtu4x000cnodi36ksn3nh"},{"post_id":"cjuldtu4e0005nodiyazmd5fo","category_id":"cjuldtu4w000bnodied7symtk","_id":"cjuldtu4z000enodijfdb6eqb"},{"post_id":"cjuldtu4r0008nodilnm7lo9w","category_id":"cjuldtu4y000dnodibwn7wyc7","_id":"cjuldtu50000fnodiqdezuf15"}],"PostTag":[],"Tag":[]}}