{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[],"Cache":[{"_id":"source/categories/index.md","hash":"847174edc3974782f62f166be836e76a4028fcb5","modified":1555466745715},{"_id":"source/_posts/Git Command.md","hash":"87cd34a4a5bf390242385e004dae604509fcfcbd","modified":1555466745522},{"_id":"source/_posts/IntelliJ IDEA Default Keymap.md","hash":"bbfe9ad004297cabb524296a491b6de0df0942ae","modified":1555466745525},{"_id":"source/tags/index.md","hash":"64810cb38d0e484d53348b094129f129272aa4a0","modified":1555466745717},{"_id":"source/_posts/Java解惑.md","hash":"e276fefd4b1299b890da7b7dbdff5945ed1fa4a9","modified":1555466745711},{"_id":"source/_posts/正则表达式必知必会.md","hash":"d27deba5b211e749370e9fb220ffbfcb8253b8df","modified":1555466745712},{"_id":"source/_posts/hello-world.md","hash":"029f91fccbe8f87c0f3ea10c4042300d2fa7edc0","modified":1555392403453},{"_id":"public/categories/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555491077585},{"_id":"public/tags/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555491077585},{"_id":"public/2019/04/16/hello-world/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555491077586},{"_id":"public/2019/04/16/Git Command/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555491077586},{"_id":"public/2019/04/16/IntelliJ IDEA Default Keymap/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555491077586},{"_id":"public/2019/04/16/正则表达式必知必会/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555491077587},{"_id":"public/2019/04/16/Java解惑/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555491077587},{"_id":"public/categories/Git/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555491077587},{"_id":"public/categories/IDEA/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555491077587},{"_id":"public/categories/正则表达式/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555491077587},{"_id":"public/categories/Java/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555491077588},{"_id":"public/archives/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555491077588},{"_id":"public/archives/2019/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555491077590},{"_id":"public/archives/2019/04/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555491077591},{"_id":"public/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555491077591}],"Category":[{"name":"Git","_id":"cjukz83nw00037syv4dunyyvt"},{"name":"IDEA","_id":"cjukz83o100047syv8t60k7is"},{"name":"正则表达式","_id":"cjukz83oi00097syvfoxxoxr1"},{"name":"Java","_id":"cjukz83or000d7syvu5m85bmz"}],"Data":[],"Page":[{"title":"分类","date":"2019-04-16T16:06:09.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2019-04-17 00:06:09\ntype: \"categories\"\n---\n","updated":"2019-04-17T02:05:45.715Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjukz83n900007syv2mo17afp","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2019-04-16T16:07:31.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2019-04-17 00:07:31\ntype: \"tags\"\n---\n","updated":"2019-04-17T02:05:45.717Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjukz83o900077syviccspew6","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Git Command","date":"2019-04-15T16:00:00.000Z","_content":"\n[github-git-cheat-sheet](https://training.github.com/kit/downloads/github-git-cheat-sheet.pdf)\n\n[Git Reference](http://gitref.org/)\n\n[git-cheat-sheet-detail](http://www.git-tower.com/blog/git-cheat-sheet-detail/)\n","source":"_posts/Git Command.md","raw":"---\ntitle: Git Command\ndate: 2019-04-16\ncategories: Git\n---\n\n[github-git-cheat-sheet](https://training.github.com/kit/downloads/github-git-cheat-sheet.pdf)\n\n[Git Reference](http://gitref.org/)\n\n[git-cheat-sheet-detail](http://www.git-tower.com/blog/git-cheat-sheet-detail/)\n","slug":"Git Command","published":1,"updated":"2019-04-17T02:05:45.522Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjukz83ni00017syvv1qgqp4l","content":"<p><a href=\"https://training.github.com/kit/downloads/github-git-cheat-sheet.pdf\" target=\"_blank\" rel=\"noopener\">github-git-cheat-sheet</a></p>\n<p><a href=\"http://gitref.org/\" target=\"_blank\" rel=\"noopener\">Git Reference</a></p>\n<p><a href=\"http://www.git-tower.com/blog/git-cheat-sheet-detail/\" target=\"_blank\" rel=\"noopener\">git-cheat-sheet-detail</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://training.github.com/kit/downloads/github-git-cheat-sheet.pdf\" target=\"_blank\" rel=\"noopener\">github-git-cheat-sheet</a></p>\n<p><a href=\"http://gitref.org/\" target=\"_blank\" rel=\"noopener\">Git Reference</a></p>\n<p><a href=\"http://www.git-tower.com/blog/git-cheat-sheet-detail/\" target=\"_blank\" rel=\"noopener\">git-cheat-sheet-detail</a></p>\n"},{"title":"IntelliJ IDEA Default Keymap","date":"2019-04-15T16:00:00.000Z","_content":"\n[IntelliJ IDEA Default Keymap](https://www.jetbrains.com/idea/docs/IntelliJIDEA_ReferenceCard.pdf)","source":"_posts/IntelliJ IDEA Default Keymap.md","raw":"---\ntitle: IntelliJ IDEA Default Keymap\ndate: 2019-04-16\ncategories: IDEA\n---\n\n[IntelliJ IDEA Default Keymap](https://www.jetbrains.com/idea/docs/IntelliJIDEA_ReferenceCard.pdf)","slug":"IntelliJ IDEA Default Keymap","published":1,"updated":"2019-04-17T02:05:45.525Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjukz83nq00027syvtt75nz9q","content":"<p><a href=\"https://www.jetbrains.com/idea/docs/IntelliJIDEA_ReferenceCard.pdf\" target=\"_blank\" rel=\"noopener\">IntelliJ IDEA Default Keymap</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.jetbrains.com/idea/docs/IntelliJIDEA_ReferenceCard.pdf\" target=\"_blank\" rel=\"noopener\">IntelliJ IDEA Default Keymap</a></p>\n"},{"title":"正则表达式必知必会","date":"2019-04-15T16:00:00.000Z","_content":"\n# 正则表达式必知必会\n\n---\n\n1. 正则表达式的两种基本用途：搜索和替换。\n2. 正则表达式是一些用来匹配和处理文本的字符串。\n3. 正则表达式是区分字母大小写的。\n4. .字符（英文句号）可以匹配任何一个单个的字符。\n正则表达式里的.字符相当于DOS的?字符，相当于SQL中的_（下划线）字符。\n5. \\是一个元字符（metacharacter，表示“这个字符有特殊含义，而不是字符本身含义”）。\n6. [和]定义一个字符集合。\n7. 字符区间可以用-（连字符）来定义。\n8. ^ 取非匹配\n9. 匹配数字（与非数字）\n|元字符|说明|\n|:--:|:--:|\n|\\d|任何一个数字字符（等价于[0-9]）|\n|\\D|任何一个非数字字符（等价于[^0-9]）|\n10. 匹配字母和数字（与非字母和数字）\n|元字符|说明|\n|:--:|:--:|\n|\\w|任何一个字母数字字符（大小写均可）或下划线字符（等价于[a-zA-Z0-9_]）|\n|\\W|任何一个非字母数字或下划线字符（等价于[^a-zA-Z0-9_]）|\n11. 匹配空白字符（与非空白字符）\n|元字符|说明|\n|:--:|:--:|\n|\\s|任何一个空白字符（等价于[\\f\\n\\r\\t\\v]）|\n|\\S|任何一个非空白字符（等价于[^\\f\\n\\r\\t\\v]）|\n12. 匹配十六进制或八进制数值\n在正则表达式里，十六进制数值要用前缀\\x来给出，八进制数值要用前缀\\0来给出。\n13. 使用POSIX字符类（JavaScript不支持）\n14. +匹配一个或多个字符（至少一个；不匹配零个字符的情况）。\n15. 当在字符集合里使用的时候，像.和+这样的元字符将被解释为普通字符，不需要被转义。\n16. *匹配字符（或字符集合连续出现零次或多次的情况）。\n17. ?只能匹配一个字符（或字符集合）的零次或一次出现，最多不超过一次。\n18. 重复次数要用{和}字符来给出——把数值写在它们之间。\n19. 防止过度匹配\n|贪婪型元字符|懒惰型元字符|\n|:--:|:--:|\n|* | *?|\n|+|+?|\n|{n,}|{n,}?|\n20. 单词边界：\n\\b用来匹配一个单词的开始或结尾，不匹配一个单词边界，使用\\B。\n21. 字符串边界：\n`用来定义字符串边界的元字符有两个：一个是用来定义字符串开头的^，另一个是用来定义字符串结尾的$。`\n22. 子表达式必须用(和)括起来。\n23. 一般来说，元字符.不匹配换行符。\n24. 回溯引用指的是模式的后半部分引用在前半部分中定义的子表达式。\n25. 回溯引用只能用来引用模式里的子表达式（用(和)括起来的正则表达式片段）。\n26. 回溯引用匹配通常从1开始计数（\\1、\\2，等等）。在许多实现里，第0个匹配（\\0）可以用来代表整个正则表达式。\n27. 回溯引用在替换操作中的应用\n() $\n28. 大小写转换\n|元字符|说明|\n|:--:|:--:|\n|\\E|结束\\L或\\U转换|\n|\\l|把下一个字符转换为小写|\n|\\L|把\\L到\\E之间的字符全部转换为小写|\n|\\u|把下一个字符转换为大写|\n|\\U|把\\U到\\E之间的字符全部转换为大写|\n29. 向前查找模式就是一个以?=开头的子表达式，需要匹配的文本跟在=的后面。\n30. 向后查找操作符时?<=。\n31. 向前查找模式的长度是可变的，它们可以包含.和+之类的元字符。\n而向后查找模式只能是固定长度。\n32. 对前后查找取非\n|操作符|说明|\n|:--:|:--:|\n|(?=)|正向前查找|\n|(?!)|负向前查找|\n|(?<=)|正向后查找|\n|(?<!)|负向后查找|\n\n\n\n\n\n\n","source":"_posts/正则表达式必知必会.md","raw":"---\ntitle: 正则表达式必知必会\ndate: 2019-04-16\ncategories: 正则表达式\n---\n\n# 正则表达式必知必会\n\n---\n\n1. 正则表达式的两种基本用途：搜索和替换。\n2. 正则表达式是一些用来匹配和处理文本的字符串。\n3. 正则表达式是区分字母大小写的。\n4. .字符（英文句号）可以匹配任何一个单个的字符。\n正则表达式里的.字符相当于DOS的?字符，相当于SQL中的_（下划线）字符。\n5. \\是一个元字符（metacharacter，表示“这个字符有特殊含义，而不是字符本身含义”）。\n6. [和]定义一个字符集合。\n7. 字符区间可以用-（连字符）来定义。\n8. ^ 取非匹配\n9. 匹配数字（与非数字）\n|元字符|说明|\n|:--:|:--:|\n|\\d|任何一个数字字符（等价于[0-9]）|\n|\\D|任何一个非数字字符（等价于[^0-9]）|\n10. 匹配字母和数字（与非字母和数字）\n|元字符|说明|\n|:--:|:--:|\n|\\w|任何一个字母数字字符（大小写均可）或下划线字符（等价于[a-zA-Z0-9_]）|\n|\\W|任何一个非字母数字或下划线字符（等价于[^a-zA-Z0-9_]）|\n11. 匹配空白字符（与非空白字符）\n|元字符|说明|\n|:--:|:--:|\n|\\s|任何一个空白字符（等价于[\\f\\n\\r\\t\\v]）|\n|\\S|任何一个非空白字符（等价于[^\\f\\n\\r\\t\\v]）|\n12. 匹配十六进制或八进制数值\n在正则表达式里，十六进制数值要用前缀\\x来给出，八进制数值要用前缀\\0来给出。\n13. 使用POSIX字符类（JavaScript不支持）\n14. +匹配一个或多个字符（至少一个；不匹配零个字符的情况）。\n15. 当在字符集合里使用的时候，像.和+这样的元字符将被解释为普通字符，不需要被转义。\n16. *匹配字符（或字符集合连续出现零次或多次的情况）。\n17. ?只能匹配一个字符（或字符集合）的零次或一次出现，最多不超过一次。\n18. 重复次数要用{和}字符来给出——把数值写在它们之间。\n19. 防止过度匹配\n|贪婪型元字符|懒惰型元字符|\n|:--:|:--:|\n|* | *?|\n|+|+?|\n|{n,}|{n,}?|\n20. 单词边界：\n\\b用来匹配一个单词的开始或结尾，不匹配一个单词边界，使用\\B。\n21. 字符串边界：\n`用来定义字符串边界的元字符有两个：一个是用来定义字符串开头的^，另一个是用来定义字符串结尾的$。`\n22. 子表达式必须用(和)括起来。\n23. 一般来说，元字符.不匹配换行符。\n24. 回溯引用指的是模式的后半部分引用在前半部分中定义的子表达式。\n25. 回溯引用只能用来引用模式里的子表达式（用(和)括起来的正则表达式片段）。\n26. 回溯引用匹配通常从1开始计数（\\1、\\2，等等）。在许多实现里，第0个匹配（\\0）可以用来代表整个正则表达式。\n27. 回溯引用在替换操作中的应用\n() $\n28. 大小写转换\n|元字符|说明|\n|:--:|:--:|\n|\\E|结束\\L或\\U转换|\n|\\l|把下一个字符转换为小写|\n|\\L|把\\L到\\E之间的字符全部转换为小写|\n|\\u|把下一个字符转换为大写|\n|\\U|把\\U到\\E之间的字符全部转换为大写|\n29. 向前查找模式就是一个以?=开头的子表达式，需要匹配的文本跟在=的后面。\n30. 向后查找操作符时?<=。\n31. 向前查找模式的长度是可变的，它们可以包含.和+之类的元字符。\n而向后查找模式只能是固定长度。\n32. 对前后查找取非\n|操作符|说明|\n|:--:|:--:|\n|(?=)|正向前查找|\n|(?!)|负向前查找|\n|(?<=)|正向后查找|\n|(?<!)|负向后查找|\n\n\n\n\n\n\n","slug":"正则表达式必知必会","published":1,"updated":"2019-04-17T02:05:45.712Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjukz83od00087syvk167pbhf","content":"<h1 id=\"正则表达式必知必会\"><a href=\"#正则表达式必知必会\" class=\"headerlink\" title=\"正则表达式必知必会\"></a>正则表达式必知必会</h1><hr>\n<ol>\n<li>正则表达式的两种基本用途：搜索和替换。</li>\n<li>正则表达式是一些用来匹配和处理文本的字符串。</li>\n<li>正则表达式是区分字母大小写的。</li>\n<li>.字符（英文句号）可以匹配任何一个单个的字符。<br>正则表达式里的.字符相当于DOS的?字符，相当于SQL中的_（下划线）字符。</li>\n<li>\\是一个元字符（metacharacter，表示“这个字符有特殊含义，而不是字符本身含义”）。</li>\n<li>[和]定义一个字符集合。</li>\n<li>字符区间可以用-（连字符）来定义。</li>\n<li>^ 取非匹配</li>\n<li>匹配数字（与非数字）<br>|元字符|说明|<br>|:–:|:–:|<br>|\\d|任何一个数字字符（等价于[0-9]）|<br>|\\D|任何一个非数字字符（等价于[^0-9]）|</li>\n<li>匹配字母和数字（与非字母和数字）<br>|元字符|说明|<br>|:–:|:–:|<br>|\\w|任何一个字母数字字符（大小写均可）或下划线字符（等价于[a-zA-Z0-9_]）|<br>|\\W|任何一个非字母数字或下划线字符（等价于[^a-zA-Z0-9_]）|</li>\n<li>匹配空白字符（与非空白字符）<br>|元字符|说明|<br>|:–:|:–:|<br>|\\s|任何一个空白字符（等价于[\\f\\n\\r\\t\\v]）|<br>|\\S|任何一个非空白字符（等价于[^\\f\\n\\r\\t\\v]）|</li>\n<li>匹配十六进制或八进制数值<br>在正则表达式里，十六进制数值要用前缀\\x来给出，八进制数值要用前缀\\0来给出。</li>\n<li>使用POSIX字符类（JavaScript不支持）</li>\n<li>+匹配一个或多个字符（至少一个；不匹配零个字符的情况）。</li>\n<li>当在字符集合里使用的时候，像.和+这样的元字符将被解释为普通字符，不需要被转义。</li>\n<li>*匹配字符（或字符集合连续出现零次或多次的情况）。</li>\n<li>?只能匹配一个字符（或字符集合）的零次或一次出现，最多不超过一次。</li>\n<li>重复次数要用{和}字符来给出——把数值写在它们之间。</li>\n<li>防止过度匹配<br>|贪婪型元字符|懒惰型元字符|<br>|:–:|:–:|<br>|<em> | </em>?|<br>|+|+?|<br>|{n,}|{n,}?|</li>\n<li>单词边界：<br>\\b用来匹配一个单词的开始或结尾，不匹配一个单词边界，使用\\B。</li>\n<li>字符串边界：<br><code>用来定义字符串边界的元字符有两个：一个是用来定义字符串开头的^，另一个是用来定义字符串结尾的$。</code></li>\n<li>子表达式必须用(和)括起来。</li>\n<li>一般来说，元字符.不匹配换行符。</li>\n<li>回溯引用指的是模式的后半部分引用在前半部分中定义的子表达式。</li>\n<li>回溯引用只能用来引用模式里的子表达式（用(和)括起来的正则表达式片段）。</li>\n<li>回溯引用匹配通常从1开始计数（\\1、\\2，等等）。在许多实现里，第0个匹配（\\0）可以用来代表整个正则表达式。</li>\n<li>回溯引用在替换操作中的应用<br>() $</li>\n<li>大小写转换<br>|元字符|说明|<br>|:–:|:–:|<br>|\\E|结束\\L或\\U转换|<br>|\\l|把下一个字符转换为小写|<br>|\\L|把\\L到\\E之间的字符全部转换为小写|<br>|\\u|把下一个字符转换为大写|<br>|\\U|把\\U到\\E之间的字符全部转换为大写|</li>\n<li>向前查找模式就是一个以?=开头的子表达式，需要匹配的文本跟在=的后面。</li>\n<li>向后查找操作符时?&lt;=。</li>\n<li>向前查找模式的长度是可变的，它们可以包含.和+之类的元字符。<br>而向后查找模式只能是固定长度。</li>\n<li>对前后查找取非<br>|操作符|说明|<br>|:–:|:–:|<br>|(?=)|正向前查找|<br>|(?!)|负向前查找|<br>|(?&lt;=)|正向后查找|<br>|(?&lt;!)|负向后查找|</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"正则表达式必知必会\"><a href=\"#正则表达式必知必会\" class=\"headerlink\" title=\"正则表达式必知必会\"></a>正则表达式必知必会</h1><hr>\n<ol>\n<li>正则表达式的两种基本用途：搜索和替换。</li>\n<li>正则表达式是一些用来匹配和处理文本的字符串。</li>\n<li>正则表达式是区分字母大小写的。</li>\n<li>.字符（英文句号）可以匹配任何一个单个的字符。<br>正则表达式里的.字符相当于DOS的?字符，相当于SQL中的_（下划线）字符。</li>\n<li>\\是一个元字符（metacharacter，表示“这个字符有特殊含义，而不是字符本身含义”）。</li>\n<li>[和]定义一个字符集合。</li>\n<li>字符区间可以用-（连字符）来定义。</li>\n<li>^ 取非匹配</li>\n<li>匹配数字（与非数字）<br>|元字符|说明|<br>|:–:|:–:|<br>|\\d|任何一个数字字符（等价于[0-9]）|<br>|\\D|任何一个非数字字符（等价于[^0-9]）|</li>\n<li>匹配字母和数字（与非字母和数字）<br>|元字符|说明|<br>|:–:|:–:|<br>|\\w|任何一个字母数字字符（大小写均可）或下划线字符（等价于[a-zA-Z0-9_]）|<br>|\\W|任何一个非字母数字或下划线字符（等价于[^a-zA-Z0-9_]）|</li>\n<li>匹配空白字符（与非空白字符）<br>|元字符|说明|<br>|:–:|:–:|<br>|\\s|任何一个空白字符（等价于[\\f\\n\\r\\t\\v]）|<br>|\\S|任何一个非空白字符（等价于[^\\f\\n\\r\\t\\v]）|</li>\n<li>匹配十六进制或八进制数值<br>在正则表达式里，十六进制数值要用前缀\\x来给出，八进制数值要用前缀\\0来给出。</li>\n<li>使用POSIX字符类（JavaScript不支持）</li>\n<li>+匹配一个或多个字符（至少一个；不匹配零个字符的情况）。</li>\n<li>当在字符集合里使用的时候，像.和+这样的元字符将被解释为普通字符，不需要被转义。</li>\n<li>*匹配字符（或字符集合连续出现零次或多次的情况）。</li>\n<li>?只能匹配一个字符（或字符集合）的零次或一次出现，最多不超过一次。</li>\n<li>重复次数要用{和}字符来给出——把数值写在它们之间。</li>\n<li>防止过度匹配<br>|贪婪型元字符|懒惰型元字符|<br>|:–:|:–:|<br>|<em> | </em>?|<br>|+|+?|<br>|{n,}|{n,}?|</li>\n<li>单词边界：<br>\\b用来匹配一个单词的开始或结尾，不匹配一个单词边界，使用\\B。</li>\n<li>字符串边界：<br><code>用来定义字符串边界的元字符有两个：一个是用来定义字符串开头的^，另一个是用来定义字符串结尾的$。</code></li>\n<li>子表达式必须用(和)括起来。</li>\n<li>一般来说，元字符.不匹配换行符。</li>\n<li>回溯引用指的是模式的后半部分引用在前半部分中定义的子表达式。</li>\n<li>回溯引用只能用来引用模式里的子表达式（用(和)括起来的正则表达式片段）。</li>\n<li>回溯引用匹配通常从1开始计数（\\1、\\2，等等）。在许多实现里，第0个匹配（\\0）可以用来代表整个正则表达式。</li>\n<li>回溯引用在替换操作中的应用<br>() $</li>\n<li>大小写转换<br>|元字符|说明|<br>|:–:|:–:|<br>|\\E|结束\\L或\\U转换|<br>|\\l|把下一个字符转换为小写|<br>|\\L|把\\L到\\E之间的字符全部转换为小写|<br>|\\u|把下一个字符转换为大写|<br>|\\U|把\\U到\\E之间的字符全部转换为大写|</li>\n<li>向前查找模式就是一个以?=开头的子表达式，需要匹配的文本跟在=的后面。</li>\n<li>向后查找操作符时?&lt;=。</li>\n<li>向前查找模式的长度是可变的，它们可以包含.和+之类的元字符。<br>而向后查找模式只能是固定长度。</li>\n<li>对前后查找取非<br>|操作符|说明|<br>|:–:|:–:|<br>|(?=)|正向前查找|<br>|(?!)|负向前查找|<br>|(?&lt;=)|正向后查找|<br>|(?&lt;!)|负向后查找|</li>\n</ol>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2019-04-16T05:26:43.453Z","updated":"2019-04-16T05:26:43.453Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjukz83ok000b7syvzlq0u0z0","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"Java解惑","date":"2019-04-15T16:00:00.000Z","_content":"\n# Java解惑\n\n---\n\n## 第2章 表达式之谜\n1. 奇数性\n```java\npublic static boolean isOdd(int i) {\n\treturn i % 2 == 1;\n}\n```\n当取余操作返回一个非零的结果时，它与左操作数具有相同的正负符号。\n当i是一个负奇数时，i%2等于-1而不是1。\n```java\npublic static boolean isOdd(int i) {\n    return i % 2 != 0;\n}\n```\n2. 找零时刻\n```java\npublic class Change {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(2.00-1.10);\n\t}\n}\n```\n问题在于1.1这个数字不能被精确表示为一个double，因此被表示为最接近它的double值。\n并不是所有的小数都可以用二进制浮点数精确表示。\n二进制浮点对于货币计算是非常不合适的。\n解决该问题的一种方式是使用某种整数类型。\n解决该问题的另一种方式是使用执行精确小数运算的BigDecimal。\n一定要用BigDecimal(String)构造器，而千万不要用BigDecimal(double)。\n在需要精确答案的地方，要避免使用float和double；对于货币计算，要使用int、long或BigDecimal。\n3. 长整除\n```java\npublic class LongDivision {\n\tpublic static void main(String[] args) {\n\t\tfinal long MICROS_PER_DAY = 24 * 60 * 60 * 1000 * 1000;\n\t\tfinal long MILLIS_PER_DAY = 24 * 60 * 60 * 1000;\n\t\tSystem.out.println(MICROS_PER_DAY/MILLIS_PER_DAY);\n\t}\n}\n```\n\tfinal long MICROS_PER_DAY = 24L * 60 * 60 * 1000 * 1000;\n\tfinal long MILLIS_PER_DAY = 24L * 60 * 60 * 1000;\n当在操作很大的数字时，千万要提防溢出——它可是一个缄默杀手。\n4. 初级问题\n```java\npublic class Elementary {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(12345 + 5432l);\n\t}\n}\n```\n在long类型字面常量中，一定要用大写的L，千万不要用小写的l。\n要避免使用单个l字母作为变量名。\n5. 十六进制的趣事\n```java\npublic class JoyOfHex {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(Long.toHexString(0x100000000L + 0xcafebabe));\n\t}\n}\n```\n负的十进制常量可以很明确地用一个减号来标识。\n如果十六进制和八进制字面常量的最高位被置位了，那么它们就是负数。\nSystem.out.println(Long.toHexString(0x100000000L + 0xcafebabeL));\n通常最好是避免混合类型的计算。\n6. 多重转型\n```java\npublic class Multicast {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println((int)(char)(byte)-1);\n\t}\n}\n```\n如果最初的数值类型是有符号的，就执行符号扩展；如果它是char，那么不管它将要被转换成什么类型，都执行零扩展。\n7. 互换内容\n```java\npublic class CleverSwap {\n\tpublic static void main(String[] args) {\n\t\tint x = 1984;\n\t\tint y = 2001;\n\t\tx ^= y ^= x ^= y;\n\t\tSystem.out.println(\"x=\"+x+\";y=\"+y);\n\t}\n}\n```\nC/C++中运行正确。Java中不正确。\n操作符的操作数是从左向右求值的。\n实际运行过程如下：\n```java\nint tmp1 = x;\nint tmp2 = y;\nint tmp3 = x ^ y;\nx = tmp3;\ny = tmp2 ^ tmp3;\nx = tmp1 ^ y;\ny = (x ^= (y ^= x)) ^ y;\n```\n在单个表达式中不要对相同的变量赋值两次。\n8. Dos Equis\n```java\npublic class DosEquis {\n\tpublic static void main(String[] args) {\n\t\tchar x= 'X';\n\t\tint i = 0;\n\t\tSystem.out.println(true ? x : 0);\n\t\tSystem.out.println(false ? i : x);\n\t}\n}\n```\n混合类型的计算会引起混乱，而这一点在条件表达式中比在其他任何地方都表现得更明显。\n确定条件表达式结果类型的规则：\n（1） 如果第二个和第三个操作数具有相同的类型，那么它就是条件表达式的类型。\n（2） 如果一个操作数的类型是T，T表示byte、short、或char，而另一个操作数是一个int类型的常数表达式，它的值可以用类型T表示，那么条件表达式的类型就是T。\n（3） 否则，将对操作数类型进行二进制数字提升，而条件表达式的类型就是第二个和第三个操作数被提升之后的类型。\n将final修饰符用于i的声明可以把i转变为一个常量表达式。\n在条件表达式中使用类型相同的第二个和第三个操作数。\n9. 半斤\n```java\nx += i;\nx = x + i;\n```\n复合赋值E1 op= E2等价于简单赋值E1=(T)((E1)op(E2))，其中T是E1的类型。\n复合赋值表达式自动将所执行计算的结果转型为其左侧变量的类型。\n请不要将复合赋值操作符作用于byte、short或char类型的变量。在将复合赋值操作符作用于int类型的变量上时，要确保表达式右侧不是long、float或double类型。在将复合赋值操作符作用于float类型的变量上时，要确保表达式右侧不是double类型。\n10. 八两\n```java\nx = x + i;\nx += i;\n```\n如果在+=操作符左侧的操作数是String类型的，那么它允许右侧的操作数是任意类型。\n简单赋值操作符（=）允许其左侧的是对象引用类型，只要表达式的右侧与左侧的变量时赋值兼容的即可。\n## 第3章 字符之谜\n11. 最后的笑声\n```java\npublic class LastLaugh {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(\"H\" + \"a\");\n\t\tSystem.out.println('H' + 'a');\n\t}\n}\n```\n当且仅当+操作符的操作数中至少有一个是String类型时，才会执行字符串连接操作。\n    System.out.println(\"2+2=\"+2+2);\n12. ABC\n```java\npublic class Abc {\n\tpublic static void main(String[] args) {\n\t\tString letters = \"ABC\";\n\t\tchar[] numbers = {'1', '2', '3'};\n\t\tSystem.out.println(letters + \" easy as \" + numbers);\n\t}\n}\n```\n\tSystem.out.println(numbers);\n要想将一个char数组转换成一个字符串，就要调用String.valueOf(char[])方法。\n13. 动物庄园\n```java\npublic class AnimalFarm {\n\tpublic static void main(String[] args) {\n\t\tfinal String pig = \"length:10\";\n\t\tfinal String dog = \"length:\" + pig.length();\n\t\tSystem.out.println(\"Animals are equal:\" + pig == dog);\n\t}\n}\n```\n+比==的优先级高。\n在使用字符串连接操作符时，总是将重要的操作数用括号括起来。\n在比较对象引用时，应该优先使用equals方法而不是==操作符，除非需要比较的是对象的标识而不是对象的值。\n14. 转义字符的溃败\n```java\npublic class EscapeRout {\n\tpublic static void main(String[] args) {\n\t\t// \\u0022 is the Unicode escape for double quote (\")\n\t\tSystem.out.println(\"a\\u0022.length()+\\u0022b\".length());\t}\n}\n```\nJava对在字符串字面常量中的Unicode转义字符没有提供任何特殊处理。\n在字符串和字符字面常量中优先选择的是转义字符序列，而不是Unicode转义字符。\n不要使用Unicode转义字符来表示ASCII字符。\n15. 令人晕头转向的Hello\n```java\n/**\n * Generated by the IBM IDL-to-Java compiler, version 1.0\n * from F:\\TestRoot\\apps\\a1\\units\\include\\PolicyHome.idl\n * Wednesday, June 17, 1998 6:44:40 o'clock AM GMT+00:00\n */\npublic class Test {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.print(\"Hell\");\n\t\tSystem.out.println(\"o world\");\n\t}\n}\n```\n问题在于注释的第三行，它包含了字符\\units。\nUnicode转义字符必须是良构的，即使出现在注释中也是如此。\n在Javadoc注释中，应该使用HTML实体转义字符来代替Unicode转义字符。\n工具应该确保不将Windows文件名置于所生成的Java源文件的注释中。\n16. 行打印程序\n```java\npublic class LinePrinter {\n\tpublic static void main(String[] args) {\n\t\t// Note: \\u000A is Unicode representation of linefeed (LF)\n\t\tchar c = 0x000A;\n\t\tSystem.out.println(c);\n\t}\n}\n```\n第三行的注释\n除非确实是必需的，否则就不要用使用Unicode转义字符。\n17. 嗯？\n只有在你要向程序中插入用其他任何方式都无法表示的字符时，Unicode转义字符才是必需的，除此之外的任何情况都应该避免使用它们。\n18. 字符串奶酪\n```java\npublic class StringCheese {\n\tpublic static void main(String[] args) {\n\t\tbyte[] bytes = new byte[256];\n\t\tfor (int i = 0; i < 256; i++)\n\t\t\tbytes[i] = (byte) i;\n\t\tString str = new String(bytes);\n\t\tfor (int i = 0, n = str.length(); i < n; i++)\n\t\t\tSystem.out.print((int) str.charAt(i) + \" \");\n\t}\n}\n```\n在char序列和byte序列之间转换时，可以且通常应该显式地指定字符集。\n每当要将一个byte序列转换成一个String时，你都在使用一个字符集，不管是否显式指定了它。\n19. 漂亮的火花（块注释符）\n```java\npublic class Classifier {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(classify('n') + classify('+') + classify('2'));\n\t}\n\n\tstatic String classify(char ch) {\n\t\tif (\"0123456789\".indexOf(ch) >= 0)\n\t\t\treturn \"NUMERAL \";\n\t\tif (\"abcdefghijklmnopqrstuvwxyz\".indexOf(ch) >= 0)\n\t\t\treturn \"LETTER \";\n\t\t/* (Operators not supported yet)\n\t\tif (\"+-*/&|!=\".indexOf(ch) >= 0)\n\t\treturn \"OPERATOR \";\n\t\t*/\n\t\treturn \"UNKNOWN \";\n\t}\n}\n```\n在注释中没有特殊处理字符串字面常量。\n块注释不能嵌套。\n注释掉代码段的最好方式是使用单行的注释序列。\n块注释不能可靠地注释掉代码段。\n20. 我的类是什么\n```java\npublic class Me {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(Me.class.getName().replaceAll(\".\", \"/\") + \".class\");\n\t}\n}\n```\nString.replaceAll接受了一个正则表达式作为它的第一个参数。正则表达式”.”可以匹配任何单个的字符。\n```java\nMe.class.getName().replaceAll(\"\\\\.\", \"/\");\nSystem.out.println(Me.class.getName().replaceAll(Pattern.quote(\".\"), \"/\") + \".class\");\n```\n21. 我的类是什么？镜头2\n```java\npublic class MeToo {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(MeToo.class.getName().replaceAll(\"\\\\.\",\n\t\t\t\tFile.separator)\n\t\t\t\t+ \".class\");\n\t}\n}\n```\n第二个参数不是一个普通的字符串，而是一个替代字符串。在替代字符串中出现的反斜杠会把紧随其后的字符进行转义，从而导致其被按字面含义而处理了。\n```java\nSystem.out.println(MeToo.class.getName().replaceAll(\"\\\\.\",\n    Matcher.quoteReplacement(File.separator))\n    + \".class\");\nSystem.out.println(MeToo.class.getName().replace(\".\", File.separator)     + \".class\");\nSystem.out.println(MeToo.class.getName().replace('.',                    File.separatorChar) + \".class\");\n```\n在使用不熟悉的类库方法时一定要格外小心。\n22. URL的愚弄\n```java\npublic class BrowserTest {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.print(\"iexplore:\");\n\t\thttp: // www.google.com;\n\t\tSystem.out.println(\":maximize\");\n\t}\n}\n```\n在程序中间出现的URL是一个语句标号（statement label）后面跟着尾注释（end-of-line comment）。\n仔细地写注释，并让它们跟上时代；去除那些已遭废弃的代码。\n23. 不劳而获\n```java\npublic class Rhymes {\n\tprivate static Random rnd = new Random();\n\n\tpublic static void main(String[] args) {\n\t\tStringBuffer word = null;\n\t\tswitch (rnd.nextInt(2)) {\n\t\tcase 1:\n\t\t\tword = new StringBuffer('P');\n\t\tcase 2:\n\t\t\tword = new StringBuffer('G');\n\t\tdefault:\n\t\t\tword = new StringBuffer('M');\n\t\t}\n\t\tword.append('a');\n\t\tword.append('i');\n\t\tword.append('n');\n\t\tSystem.out.println(word);\n\t}\n}\n```\n要当心栅栏柱错误。\n不要从一个非空的case向下进入另一个case。\n不管在什么时候，都要尽可能使用熟悉的惯用法和API。如果必须使用不熟悉的API，那么请仔细阅读其文档。\n```java\n\t\tswitch (rnd.nextInt(3)) {\n\t\tcase 1:\n\t\t\tword = new StringBuffer(\"P\");\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tword = new StringBuffer(\"G\");\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tword = new StringBuffer(\"M\");\n\t\t\tbreak;\n\t\t}\n\nSystem.out.println(\"PGM\".charAt(rnd.nextInt(3)) + \"ain\");\n\npublic class Rhymes {\n\tpublic static void main(String args[]) {\n\t\tString a[] = { \"Main\", \"Pain\", \"Gain\" };\n\t\tSystem.out.println(randomElement(a));\n\t}\n\n\tprivate static Random rnd = new Random();\n\n\tprivate static String randomElement(String[] a) {\n\t\treturn a[rnd.nextInt(a.length)];\n\t}\n}\n```\nchar不是String，而是更像int。\n要提防各种诡异的谜题。\n## 第4章 循环之谜\n24.\t尽情享受每一个字节\n```java\npublic class BigDelight {\n\tpublic static void main(String[] args) {\n\t\tfor (byte b = Byte.MIN_VALUE; b < Byte.MAX_VALUE; b++) {\n\t\t\tif (b == 0x90)\n\t\t\t\tSystem.out.print(\"Joy!\");\n\t\t}\n\t}\n}\n\nif (b == (byte)0x90)\tSystem.out.print(\"Joy!\");\n\nif ((b & 0xff) == 0x90)\tSystem.out.print(\"Joy!\");\n\nprivate static final byte TARGET = (byte) 0x90; \nif (b == TARGET)\tSystem.out.print(\"Joy!\");\n```\n要避免混合类型比较，因为它们内在地容易引起混乱。\n请使用声明的常量替代“魔数”。\n25.\t无情的增量操作\n```java\npublic class Increment {\n\tpublic static void main(String[] args) {\n\t\tint j = 0;\n\t\tfor (int i = 0; i < 100; i++)\n\t\t\tj = j++;\n\t\tSystem.out.println(j);\n\t}\n}\n```\n不要在单个表达式中对相同的变量赋值超过一次。\n26.\t在循环中\n```java\npublic class InTheLoop {\n\tpublic static final int END = Integer.MAX_VALUE;\n\tpublic static final int START = END - 100;\n\n\tpublic static void main(String[] args) {\n\t\tint count = 0;\n\t\tfor (int i = START; i <= END; i++)\n\t\t\tcount++;\n\t\tSystem.out.println(count);\n\t}\n}\n\nfor (long i = START; i <= END; i++)\n```\n无论你在何时使用了一个整数类型，都要意识到其边界条件。\n```java\nint i = START;\ndo {\n\tcount++;\n} while (i++ != END);\n```\n27.\t变幻莫测的i值\n```java\npublic class Shifty {\n\tpublic static void main(String[] args) {\n\t\tint i = 0;\n\t\twhile(-1 << i != 0)\n\t\t\ti++;\n\t\tSystem.out.println(i);\n\t}\n}\n```\n移位操作符只使用其右操作数的低5位作为移位长度。或者是低6位，如果其左操作数是一个long类型数值。\n28.\t就\n29.\tGf\n30.\tD\n31.\tG\n32.\tG\n33.\tG\n34.\tG\n35.\tG\n## 第5章 异常之谜\n36.\tF\n37.\tF\n38.\tF\n39.\tF\n40.\tF\n41.\tF\n42.\tF\n43.\tF\n44.\tF\n45.\tF\n\n## 第6章 类之谜\n46.\t令人混淆的构造器案例\n```java\npublic class Confusing {\n\tprivate Confusing(Object o) {\n\t\tSystem.out.println(\"Object\");\n\t}\n\n\tprivate Confusing(double[] dArray) {\n\t\tSystem.out.println(\"double array\");\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tnew Confusing(null);\n\t}\n}\n```\nJava的重载解析过程是分两阶段运行的。第一阶段选取所有可获得并且可应用的方法或构造器。第二阶段在第一阶段选取的方法或构造器中选取最精确的一个。\n在测试哪一个方法或构造器最精确时，并没有使用实参。\n要想强制要求编译器选择一个精确的重载版本，需要将实参转型为形参所声明的类型。\n避免使用重载。\n47. 啊呀！狸猫变犬子\n```java\nclass Counter {\n\tprivate static int count;\n\n\tpublic static void increment() {\n\t\tcount++;\n\t}\n\n\tpublic static int getCount() {\n\t\treturn count;\n\t}\n}\n\nclass Dog extends Counter {\n\tpublic Dog() {\n\t}\n\n\tpublic void woof() {\n\t\tincrement();\n\t}\n}\n\nclass Cat extends Counter {\n\tpublic Cat() {\n\t}\n\n\tpublic void meow() {\n\t\tincrement();\n\t}\n}\n\npublic class Ruckus {\n\tpublic static void main(String[] args) {\n\t\tDog[] dogs = { new Dog(), new Dog() };\n\t\tfor (int i = 0; i < dogs.length; i++)\n\t\t\tdogs[i].woof();\n\t\tCat[] cats = { new Cat(), new Cat(), new Cat() };\n\t\tfor (int i = 0; i < cats.length; i++)\n\t\t\tcats[i].meow();\n\t\tSystem.out.print(Dog.getCount() + \" woofs and \");\n\t\tSystem.out.println(Cat.getCount() + \" meows\");\n\t}\n}\n```\n每一个静态字段在声明它的类及其所有子类中共享一份单一的副本。\n优选组合而不是继承。\n48. 我所得到的都是静态的\n```java\nclass Dog {\n\tpublic static void bark() {\n\t\tSystem.out.print(\"woof \");\n\t}\n}\n\nclass Basenji extends Dog {\n\tpublic static void bark() {\n\t}\n}\n\npublic class Bark {\n\tpublic static void main(String args[]) {\n\t\tDog woofer = new Dog();\n\t\tDog nipper = new Basenji();\n\t\twoofer.bark();\n\t\tnipper.bark();\n\t}\n}\n```\n对静态方法的调用不存在任何动态的分派机制。\n千万不要用一个表达式来标识一个静态方法调用。\n千万不要隐藏静态方法。\n49.\t比生命更大\n```java\npublic class Elvis {\n\tpublic static final Elvis INSTANCE = new Elvis();\n\tprivate final int beltSize;\n\tprivate static final int CURRENT_YEAR = Calendar.getInstance().get(\n\t\t\tCalendar.YEAR);\n\n\tprivate Elvis() {\n\t\tbeltSize = CURRENT_YEAR - 1930;\n\t}\n\n\tpublic int beltSize() {\n\t\treturn beltSize;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(\"Elvis wears a size \" + INSTANCE.beltSize()\n\t\t\t\t+ \" belt.\");\n\t}\n}\n```\n在final类型的静态字段被初始化之前，存在着读取其值的可能。\n要想改正一个类初始化循环，需要重新对静态字段的初始器进行排序，使得每一个初始器都出现在任何依赖于它的初始器之前。\n要当心类初始化循环。\n50.\t不是你的类型\n```java\npublic class Type1 {\n\tpublic static void main(String[] args) {\n\t\tString s = null;\n\t\tSystem.out.println(s instanceof String);\n\t}\n}\n```\ninstanceof操作符被定义为在其左操作数为null时返回false。\n```java\npublic class Type2 {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(new Type2() instanceof String);\n\t}\n}\n```\ninstanceof操作符有这样的要求：如果两个操作数的类型都是类，其中一个必须是另一个的子类型。\n```java\npublic class Type3 {\n\tpublic static void main(String args[]) {\n\t\tType3 t3 = (Type3) new Object();\n\t}\n}\n```\n51.\t要点何在\n```java\nclass Point {\n\tprivate final int x, y;\n\tprivate final String name; // Cached at construction time\n\n\tPoint(int x, int y) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tname = makeName();\n\t}\n\n\tprotected String makeName() {\n\t\treturn \"[\" + x + \",\" + y + \"]\";\n\t}\n\n\tpublic final String toString() {\n\t\treturn name;\n\t}\n}\n\npublic class ColorPoint extends Point {\n\tprivate final String color;\n\n\tColorPoint(int x, int y, String color) {\n\t\tsuper(x, y);\n\t\tthis.color = color;\n\t}\n\n\tprotected String makeName() {\n\t\treturn super.makeName() + \":\" + color;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(new ColorPoint(4, 2, \"purple\"));\n\t}\n}\n```\n在一个final类型的实例字段被赋值之前，存在着取用其值的可能。\n循环的实例初始化时可以且总是应该避免的。\n千万不要在构造器中调用可覆写的方法。\n52.\t总和的玩笑\n```java\nclass Cache {\n\tstatic {\n\t\tinitializeIfNecessary();\n\t}\n\tprivate static int sum;\n\n\tpublic static int getSum() {\n\t\tinitializeIfNecessary();\n\t\treturn sum;\n\t}\n\n\tprivate static boolean initialized = false;\n\n\tprivate static synchronized void initializeIfNecessary() {\n\t\tif (!initialized) {\n\t\t\tfor (int i = 0; i < 100; i++)\n\t\t\t\tsum += i;\n\t\t\tinitialized = true;\n\t\t}\n\t}\n}\n\npublic class Client {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(Cache.getSum());\n\t}\n}\n```\n要么使用积极初始化，要么使用延迟初始化，千万不要同时使用二者。\n请考虑类初始化的顺序，特别是当初始化显得很重要时更是如此。\n53.\t做你的事吧\n54.\tNull与Void\n```java\npublic class Null {\n\tpublic static void greet() {\n\t\tSystem.out.println(\"Hello world!\");\n\t}\n\n\tpublic static void main(String[] args) {\n\t\t((Null) null).greet();\n\t}\n}\n```\n静态方法调用的限定表达式是可以计算的，但是它的值将被忽略。\n```java\nNull.greet();\ngreet();\n```\n55.\t特创论\n```java\npublic class Creator {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0; i < 100; i++)\n\t\t\tCreature creature = new Creature();\n\t\tSystem.out.println(Creature.numCreated());\n\t}\n}\n\nclass Creature {\n\tprivate static long numCreated = 0;\n\n\tpublic Creature() {\n\t\tnumCreated++;\n\t}\n\n\tpublic static long numCreated() {\n\t\treturn numCreated;\n\t}\n}\n```\n一个局部变量声明作为一条语句只能直接出现在一个语句块中。（一个语句块是由一对花括号以及包含在这对花括号的语句和声明构成的）\n```java\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tCreature creature = new Creature();\n\t\t}\n\n\t\tfor (int i = 0; i < 100; i++)\n\t\t\tnew Creature();\n\n// Thread-safe creation counter\nclass Creature {\n\tprivate static long numCreated;\n\n\tpublic Creature() {\n\t\tsynchronized (Creature.class) {\n\t\t\tnumCreated++;\n\t\t}\n\t}\n\n\tpublic static synchronized long numCreated() {\n\t\treturn numCreated;\n\t}\n}\n\nclass Creature {\n\tprivate static AtomicLong numCreated = new AtomicLong();\n\n\tpublic Creature() {\n\t\tnumCreated.incrementAndGet();\n\t}\n\n\tpublic static long numCreated() {\n\t\treturn numCreated.get();\n\t}\n}\n```\n在使用一个变量来对实例的创建进行计数时，要使用long类型而不是int类型的变量，以防止溢出。\n## 第7章 库之谜\n56. 大问题\n```java\npublic class BigProblem {\n\tpublic static void main(String[] args) {\n\t\tBigInteger fiveThousand = new BigInteger(\"5000\");\n\t\tBigInteger fiftyThousand = new BigInteger(\"50000\");\n\t\tBigInteger fiveHundredThousand = new BigInteger(\"500000\");\n\t\tBigInteger total = BigInteger.ZERO;\n\t\ttotal.add(fiveThousand);\n\t\ttotal.add(fiftyThousand);\n\t\ttotal.add(fiveHundredThousand);\n\t\tSystem.out.println(total);\n\t}\n}\n```\nBigInteger实例是不可变的。\n```java\ntotal = total.add(fiveThousand);\ntotal = total.add(fiftyThousand);\ntotal = total.add(fiveHundredThousand);\n```\n57.\t名字里有什么\n```java\npublic class Name {\n\tprivate final String first, last;\n\n\tpublic Name(String first, String last) {\n\t\tthis.first = first;\n\t\tthis.last = last;\n\t}\n\n\tpublic boolean equals(Object o) {\n\t\tif (!(o instanceof Name))\n\t\t\treturn false;\n\t\tName n = (Name) o;\n\t\treturn n.first.equals(first) && n.last.equals(last);\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tSet<Name> s = new HashSet<Name>();\n\t\ts.add(new Name(\"Mickey\", \"Mouse\"));\n\t\tSystem.out.println(s.contains(new Name(\"Mickey\", \"Mouse\")));\n\t}\n}\n```\n无论何时，只要覆写了equals方法，就必须同时覆写hashCode方法。\n58.\t产生它的散列码\n```java\npublic class Name {\n\tprivate final String first, last;\n\n\tpublic Name(String first, String last) {\n\t\tthis.first = first;\n\t\tthis.last = last;\n\t}\n\n\tpublic boolean equals(Name n) {\n\t\treturn n.first.equals(first) && n.last.equals(last);\n\t}\n\n\tpublic int hashCode() {\n\t\treturn 31 * first.hashCode() + last.hashCode();\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tSet<Name> s = new HashSet<Name>();\n\t\ts.add(new Name(\"Donald\", \"Duck\"));\n\t\tSystem.out.println(s.contains(new Name(\"Donald\", \"Duck\")));\n\t}\n}\n```\n重载为错误和混乱提供了机会。\n为了避免无意识地重载，应该机械地对你想要覆写的每一个超类方法都复制其声明。\n59. 差是什么\n以0开头的整型字面常量将被解释成为八进制数值。\n千万不要在一个整型字面常量前面加上一个0。\n60. 一行以毙之\n了解类库中有些什么可以为你节省大量的时间和精力，并且可以提高程序的速度和质量。\n61. 日期游戏\nDate将一月表示为0，而Calendar延续了这个错误。\nDate.getDay返回的是Date实例所表示的星期日期，而不是月份日期。\n在使用Calendar或Date的时候一定要当心，千万要记着查阅API文档。\n62. 名字游戏\n不要使用IdentityHashMap，除非你需要其基于标识的语义，它不是一个通用目的的Map实现。\n63. 更多同样的问题\n不要因为偶然地添加了一个返回类型，而将一个构造器声明变成了一个方法声明。\n要遵守标准的命名约定。\n64. 按余数编组\nMath.abs不能保证一定会返回非负的结果。\n65. 疑似配需的惊人传奇\n不要使用基于减法的比较器，除非你能够确保要比较的数值之间的差永远不会大于Integer.MAX_VALUE。\n## 第8章 更多类之谜\n66. 一件私事\n```java\nclass Base {\n\tpublic String className = \"Base\";\n}\n\nclass Derived extends Base {\n\tprivate String className = \"Derived\";\n}\n\npublic class PrivateMatter {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(new Derived().className);\n\t}\n}\n```\n避免隐藏。\n一个覆写方法的访问修饰符所提供的访问权限要大于等于被覆写方法的访问修饰符所提供的访问权限。而字段则不必。\n67.\t对字符串上瘾\n要避免重用平台类的名字，并且千万不要难过重用java.lang中的类名。\n68.\t灰色的阴影\n```java\npublic class ShadesOfGray {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(X.Y.Z);\n\t}\n}\n\nclass X {\n\tstatic class Y {\n\t\tstatic String Z = \"Black\";\n\t}\n\n\tstatic C Y = new C();\n}\n\nclass C {\n\tString Z = \"White\";\n}\n```\n当一个变量和一个类型具有相同的名字，并且它们位于相同的作用域时，变量名具有优先权。\n相似地，变量名和类型名可以遮掩包名。\n69.\t黑色的渐隐\n70.\t一揽子交易\n```java\npackage click;\npublic class CodeTalk {\n\tpublic void doIt() {\n\t\tprintMessage();\n\t}\n\n\tvoid printMessage() {\n\t\tSystem.out.println(\"Click\");\n\t}\n}\n\npackage hack;\nimport click.CodeTalk;\npublic class TypeIt {\n\tprivate static class ClickIt extends CodeTalk {\n\t\tvoid printMessage() {\n\t\t\tSystem.out.println(\"Hack\");\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tClickIt clickit = new ClickIt();\n\t\tclickit.doIt();\n\t}\n}\n```\n一个包内私有的方法不能被位于另一个包中的某个方法直接覆写。\n71.\t进口税\n72.\t终极危难\nfinal修饰符对方法和字段而言，意味着某些完全不同的事情。对于方法，final意味着该方法不能被覆写（对实例方法而言）或者隐藏（对静态方法而言）。对于字段，final意味着该字段不能被赋值超过一次。\n73.\t隐私在公开\n重用名字是危险的；应该避免隐藏、遮蔽和遮掩。\n74.\t同一性的危机\n75.\t头还是尾\n名字重用的术语表\n第9章 更多库之谜\n76.\t乒乓\n```java\npublic class PingPong {\n\tpublic static synchronized void main(String[] a) {\n\t\tThread t = new Thread() {\n\t\t\tpublic void run() {\n\t\t\t\tpong();\n\t\t\t}\n\t\t};\n\t\tt.run();\n\t\tSystem.out.print(\"Ping\");\n\t}\n\n\tstatic synchronized void pong() {\n\t\tSystem.out.print(\"Pong\");\n\t}\n}\n```\n当你想调用一个线程的start方法时要多加小心，别弄错成调用这个线程的run方法了。\n77.\t乱锁之妖\n78.\t反射的影响\n```java\npublic class Reflector {\n\tpublic static void main(String[] args) throws Exception {\n\t\tSet<String> s = new HashSet<String>();\n\t\ts.add(\"foo\");\n\t\tIterator it = s.iterator();\n\t\tMethod m = it.getClass().getMethod(\"hasNext\");\n\t\tSystem.out.println(m.invoke(it));\n\t}\n}\n```\n访问位于其它包中的非公共类型的成员是不合法的。\nObject.getClass().getMethod(“methodName”)这种惯用法虽然很常见，但是却有问题，它不应该被使用。\n在使用反射访问某个类型时，请使用表示某种可访问类型的Class对象。\nMethod m = Iterator.class.getMethod(\"hasNext\");\n79.\t狗狗的幸福生活\n避免遮蔽。\n使用Thread(Runnable)构造器来替代对Thread的继承。\n80.\t更深层的反射\n```java\npublic class Outer {\n\tpublic static void main(String[] args) throws Exception {\n\t\tnew Outer().greetWorld();\n\t}\n\n\tprivate void greetWorld() throws Exception {\n\t\tSystem.out.println(Inner.class.newInstance());\n\t}\n\n\tpublic class Inner {\n\t\tpublic String toString() {\n\t\t\treturn \"Hello world\";\n\t\t}\n\t}\n}\n```\n除非你确实需要一个外围实例i，否则应该优先使用静态成员类而不是非静态成员类。\n请避免使用反射类实例化内部类。\n81.\t无法识别的字符化\n```java\npublic class Greeter {\n\tpublic static void main(String[] args) {\n\t\tString greeting = \"Hello world\";\n\t\tfor (int i = 0; i < greeting.length(); i++)\n\t\t\tSystem.out.write(greeting.charAt(i));\n\t}\n}\n```\nwrite(int)是唯一一个在自动刷新功能开启的情况下不刷新PrintStream的输出方法。\n尽可能使用熟悉的惯用法，如果不得不使用陌生的API，请一定要参考相关的文档。\n82.\t啤酒爆炸\n83.\t诵读困难者的一神论\n84.\t戛然而止\n```java\npublic class SelfInterruption {\n\tpublic static void main(String[] args) {\n\t\tThread.currentThread().interrupt();\n\t\tif (Thread.interrupted()) {\n\t\t\tSystem.out.println(\"Interrupted: \" + Thread.interrupted());\n\t\t} else {\n\t\t\tSystem.out.println(\"Not interrupted: \" + Thread.interrupted());\n\t\t}\n\t}\n}\n```\n调用Thread.interrupted方法总是会清除当前线程的中断状态。\nThread.currentThread().isInterrupted()\n不要使用Thread.interrupted方法，除非你想要清除当前线程的中断状态。\n85.\t延迟初始化\n\n\n\n\n\n\n","source":"_posts/Java解惑.md","raw":"---\ntitle: Java解惑\ndate: 2019-04-16\ncategories: Java\n---\n\n# Java解惑\n\n---\n\n## 第2章 表达式之谜\n1. 奇数性\n```java\npublic static boolean isOdd(int i) {\n\treturn i % 2 == 1;\n}\n```\n当取余操作返回一个非零的结果时，它与左操作数具有相同的正负符号。\n当i是一个负奇数时，i%2等于-1而不是1。\n```java\npublic static boolean isOdd(int i) {\n    return i % 2 != 0;\n}\n```\n2. 找零时刻\n```java\npublic class Change {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(2.00-1.10);\n\t}\n}\n```\n问题在于1.1这个数字不能被精确表示为一个double，因此被表示为最接近它的double值。\n并不是所有的小数都可以用二进制浮点数精确表示。\n二进制浮点对于货币计算是非常不合适的。\n解决该问题的一种方式是使用某种整数类型。\n解决该问题的另一种方式是使用执行精确小数运算的BigDecimal。\n一定要用BigDecimal(String)构造器，而千万不要用BigDecimal(double)。\n在需要精确答案的地方，要避免使用float和double；对于货币计算，要使用int、long或BigDecimal。\n3. 长整除\n```java\npublic class LongDivision {\n\tpublic static void main(String[] args) {\n\t\tfinal long MICROS_PER_DAY = 24 * 60 * 60 * 1000 * 1000;\n\t\tfinal long MILLIS_PER_DAY = 24 * 60 * 60 * 1000;\n\t\tSystem.out.println(MICROS_PER_DAY/MILLIS_PER_DAY);\n\t}\n}\n```\n\tfinal long MICROS_PER_DAY = 24L * 60 * 60 * 1000 * 1000;\n\tfinal long MILLIS_PER_DAY = 24L * 60 * 60 * 1000;\n当在操作很大的数字时，千万要提防溢出——它可是一个缄默杀手。\n4. 初级问题\n```java\npublic class Elementary {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(12345 + 5432l);\n\t}\n}\n```\n在long类型字面常量中，一定要用大写的L，千万不要用小写的l。\n要避免使用单个l字母作为变量名。\n5. 十六进制的趣事\n```java\npublic class JoyOfHex {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(Long.toHexString(0x100000000L + 0xcafebabe));\n\t}\n}\n```\n负的十进制常量可以很明确地用一个减号来标识。\n如果十六进制和八进制字面常量的最高位被置位了，那么它们就是负数。\nSystem.out.println(Long.toHexString(0x100000000L + 0xcafebabeL));\n通常最好是避免混合类型的计算。\n6. 多重转型\n```java\npublic class Multicast {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println((int)(char)(byte)-1);\n\t}\n}\n```\n如果最初的数值类型是有符号的，就执行符号扩展；如果它是char，那么不管它将要被转换成什么类型，都执行零扩展。\n7. 互换内容\n```java\npublic class CleverSwap {\n\tpublic static void main(String[] args) {\n\t\tint x = 1984;\n\t\tint y = 2001;\n\t\tx ^= y ^= x ^= y;\n\t\tSystem.out.println(\"x=\"+x+\";y=\"+y);\n\t}\n}\n```\nC/C++中运行正确。Java中不正确。\n操作符的操作数是从左向右求值的。\n实际运行过程如下：\n```java\nint tmp1 = x;\nint tmp2 = y;\nint tmp3 = x ^ y;\nx = tmp3;\ny = tmp2 ^ tmp3;\nx = tmp1 ^ y;\ny = (x ^= (y ^= x)) ^ y;\n```\n在单个表达式中不要对相同的变量赋值两次。\n8. Dos Equis\n```java\npublic class DosEquis {\n\tpublic static void main(String[] args) {\n\t\tchar x= 'X';\n\t\tint i = 0;\n\t\tSystem.out.println(true ? x : 0);\n\t\tSystem.out.println(false ? i : x);\n\t}\n}\n```\n混合类型的计算会引起混乱，而这一点在条件表达式中比在其他任何地方都表现得更明显。\n确定条件表达式结果类型的规则：\n（1） 如果第二个和第三个操作数具有相同的类型，那么它就是条件表达式的类型。\n（2） 如果一个操作数的类型是T，T表示byte、short、或char，而另一个操作数是一个int类型的常数表达式，它的值可以用类型T表示，那么条件表达式的类型就是T。\n（3） 否则，将对操作数类型进行二进制数字提升，而条件表达式的类型就是第二个和第三个操作数被提升之后的类型。\n将final修饰符用于i的声明可以把i转变为一个常量表达式。\n在条件表达式中使用类型相同的第二个和第三个操作数。\n9. 半斤\n```java\nx += i;\nx = x + i;\n```\n复合赋值E1 op= E2等价于简单赋值E1=(T)((E1)op(E2))，其中T是E1的类型。\n复合赋值表达式自动将所执行计算的结果转型为其左侧变量的类型。\n请不要将复合赋值操作符作用于byte、short或char类型的变量。在将复合赋值操作符作用于int类型的变量上时，要确保表达式右侧不是long、float或double类型。在将复合赋值操作符作用于float类型的变量上时，要确保表达式右侧不是double类型。\n10. 八两\n```java\nx = x + i;\nx += i;\n```\n如果在+=操作符左侧的操作数是String类型的，那么它允许右侧的操作数是任意类型。\n简单赋值操作符（=）允许其左侧的是对象引用类型，只要表达式的右侧与左侧的变量时赋值兼容的即可。\n## 第3章 字符之谜\n11. 最后的笑声\n```java\npublic class LastLaugh {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(\"H\" + \"a\");\n\t\tSystem.out.println('H' + 'a');\n\t}\n}\n```\n当且仅当+操作符的操作数中至少有一个是String类型时，才会执行字符串连接操作。\n    System.out.println(\"2+2=\"+2+2);\n12. ABC\n```java\npublic class Abc {\n\tpublic static void main(String[] args) {\n\t\tString letters = \"ABC\";\n\t\tchar[] numbers = {'1', '2', '3'};\n\t\tSystem.out.println(letters + \" easy as \" + numbers);\n\t}\n}\n```\n\tSystem.out.println(numbers);\n要想将一个char数组转换成一个字符串，就要调用String.valueOf(char[])方法。\n13. 动物庄园\n```java\npublic class AnimalFarm {\n\tpublic static void main(String[] args) {\n\t\tfinal String pig = \"length:10\";\n\t\tfinal String dog = \"length:\" + pig.length();\n\t\tSystem.out.println(\"Animals are equal:\" + pig == dog);\n\t}\n}\n```\n+比==的优先级高。\n在使用字符串连接操作符时，总是将重要的操作数用括号括起来。\n在比较对象引用时，应该优先使用equals方法而不是==操作符，除非需要比较的是对象的标识而不是对象的值。\n14. 转义字符的溃败\n```java\npublic class EscapeRout {\n\tpublic static void main(String[] args) {\n\t\t// \\u0022 is the Unicode escape for double quote (\")\n\t\tSystem.out.println(\"a\\u0022.length()+\\u0022b\".length());\t}\n}\n```\nJava对在字符串字面常量中的Unicode转义字符没有提供任何特殊处理。\n在字符串和字符字面常量中优先选择的是转义字符序列，而不是Unicode转义字符。\n不要使用Unicode转义字符来表示ASCII字符。\n15. 令人晕头转向的Hello\n```java\n/**\n * Generated by the IBM IDL-to-Java compiler, version 1.0\n * from F:\\TestRoot\\apps\\a1\\units\\include\\PolicyHome.idl\n * Wednesday, June 17, 1998 6:44:40 o'clock AM GMT+00:00\n */\npublic class Test {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.print(\"Hell\");\n\t\tSystem.out.println(\"o world\");\n\t}\n}\n```\n问题在于注释的第三行，它包含了字符\\units。\nUnicode转义字符必须是良构的，即使出现在注释中也是如此。\n在Javadoc注释中，应该使用HTML实体转义字符来代替Unicode转义字符。\n工具应该确保不将Windows文件名置于所生成的Java源文件的注释中。\n16. 行打印程序\n```java\npublic class LinePrinter {\n\tpublic static void main(String[] args) {\n\t\t// Note: \\u000A is Unicode representation of linefeed (LF)\n\t\tchar c = 0x000A;\n\t\tSystem.out.println(c);\n\t}\n}\n```\n第三行的注释\n除非确实是必需的，否则就不要用使用Unicode转义字符。\n17. 嗯？\n只有在你要向程序中插入用其他任何方式都无法表示的字符时，Unicode转义字符才是必需的，除此之外的任何情况都应该避免使用它们。\n18. 字符串奶酪\n```java\npublic class StringCheese {\n\tpublic static void main(String[] args) {\n\t\tbyte[] bytes = new byte[256];\n\t\tfor (int i = 0; i < 256; i++)\n\t\t\tbytes[i] = (byte) i;\n\t\tString str = new String(bytes);\n\t\tfor (int i = 0, n = str.length(); i < n; i++)\n\t\t\tSystem.out.print((int) str.charAt(i) + \" \");\n\t}\n}\n```\n在char序列和byte序列之间转换时，可以且通常应该显式地指定字符集。\n每当要将一个byte序列转换成一个String时，你都在使用一个字符集，不管是否显式指定了它。\n19. 漂亮的火花（块注释符）\n```java\npublic class Classifier {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(classify('n') + classify('+') + classify('2'));\n\t}\n\n\tstatic String classify(char ch) {\n\t\tif (\"0123456789\".indexOf(ch) >= 0)\n\t\t\treturn \"NUMERAL \";\n\t\tif (\"abcdefghijklmnopqrstuvwxyz\".indexOf(ch) >= 0)\n\t\t\treturn \"LETTER \";\n\t\t/* (Operators not supported yet)\n\t\tif (\"+-*/&|!=\".indexOf(ch) >= 0)\n\t\treturn \"OPERATOR \";\n\t\t*/\n\t\treturn \"UNKNOWN \";\n\t}\n}\n```\n在注释中没有特殊处理字符串字面常量。\n块注释不能嵌套。\n注释掉代码段的最好方式是使用单行的注释序列。\n块注释不能可靠地注释掉代码段。\n20. 我的类是什么\n```java\npublic class Me {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(Me.class.getName().replaceAll(\".\", \"/\") + \".class\");\n\t}\n}\n```\nString.replaceAll接受了一个正则表达式作为它的第一个参数。正则表达式”.”可以匹配任何单个的字符。\n```java\nMe.class.getName().replaceAll(\"\\\\.\", \"/\");\nSystem.out.println(Me.class.getName().replaceAll(Pattern.quote(\".\"), \"/\") + \".class\");\n```\n21. 我的类是什么？镜头2\n```java\npublic class MeToo {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(MeToo.class.getName().replaceAll(\"\\\\.\",\n\t\t\t\tFile.separator)\n\t\t\t\t+ \".class\");\n\t}\n}\n```\n第二个参数不是一个普通的字符串，而是一个替代字符串。在替代字符串中出现的反斜杠会把紧随其后的字符进行转义，从而导致其被按字面含义而处理了。\n```java\nSystem.out.println(MeToo.class.getName().replaceAll(\"\\\\.\",\n    Matcher.quoteReplacement(File.separator))\n    + \".class\");\nSystem.out.println(MeToo.class.getName().replace(\".\", File.separator)     + \".class\");\nSystem.out.println(MeToo.class.getName().replace('.',                    File.separatorChar) + \".class\");\n```\n在使用不熟悉的类库方法时一定要格外小心。\n22. URL的愚弄\n```java\npublic class BrowserTest {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.print(\"iexplore:\");\n\t\thttp: // www.google.com;\n\t\tSystem.out.println(\":maximize\");\n\t}\n}\n```\n在程序中间出现的URL是一个语句标号（statement label）后面跟着尾注释（end-of-line comment）。\n仔细地写注释，并让它们跟上时代；去除那些已遭废弃的代码。\n23. 不劳而获\n```java\npublic class Rhymes {\n\tprivate static Random rnd = new Random();\n\n\tpublic static void main(String[] args) {\n\t\tStringBuffer word = null;\n\t\tswitch (rnd.nextInt(2)) {\n\t\tcase 1:\n\t\t\tword = new StringBuffer('P');\n\t\tcase 2:\n\t\t\tword = new StringBuffer('G');\n\t\tdefault:\n\t\t\tword = new StringBuffer('M');\n\t\t}\n\t\tword.append('a');\n\t\tword.append('i');\n\t\tword.append('n');\n\t\tSystem.out.println(word);\n\t}\n}\n```\n要当心栅栏柱错误。\n不要从一个非空的case向下进入另一个case。\n不管在什么时候，都要尽可能使用熟悉的惯用法和API。如果必须使用不熟悉的API，那么请仔细阅读其文档。\n```java\n\t\tswitch (rnd.nextInt(3)) {\n\t\tcase 1:\n\t\t\tword = new StringBuffer(\"P\");\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tword = new StringBuffer(\"G\");\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tword = new StringBuffer(\"M\");\n\t\t\tbreak;\n\t\t}\n\nSystem.out.println(\"PGM\".charAt(rnd.nextInt(3)) + \"ain\");\n\npublic class Rhymes {\n\tpublic static void main(String args[]) {\n\t\tString a[] = { \"Main\", \"Pain\", \"Gain\" };\n\t\tSystem.out.println(randomElement(a));\n\t}\n\n\tprivate static Random rnd = new Random();\n\n\tprivate static String randomElement(String[] a) {\n\t\treturn a[rnd.nextInt(a.length)];\n\t}\n}\n```\nchar不是String，而是更像int。\n要提防各种诡异的谜题。\n## 第4章 循环之谜\n24.\t尽情享受每一个字节\n```java\npublic class BigDelight {\n\tpublic static void main(String[] args) {\n\t\tfor (byte b = Byte.MIN_VALUE; b < Byte.MAX_VALUE; b++) {\n\t\t\tif (b == 0x90)\n\t\t\t\tSystem.out.print(\"Joy!\");\n\t\t}\n\t}\n}\n\nif (b == (byte)0x90)\tSystem.out.print(\"Joy!\");\n\nif ((b & 0xff) == 0x90)\tSystem.out.print(\"Joy!\");\n\nprivate static final byte TARGET = (byte) 0x90; \nif (b == TARGET)\tSystem.out.print(\"Joy!\");\n```\n要避免混合类型比较，因为它们内在地容易引起混乱。\n请使用声明的常量替代“魔数”。\n25.\t无情的增量操作\n```java\npublic class Increment {\n\tpublic static void main(String[] args) {\n\t\tint j = 0;\n\t\tfor (int i = 0; i < 100; i++)\n\t\t\tj = j++;\n\t\tSystem.out.println(j);\n\t}\n}\n```\n不要在单个表达式中对相同的变量赋值超过一次。\n26.\t在循环中\n```java\npublic class InTheLoop {\n\tpublic static final int END = Integer.MAX_VALUE;\n\tpublic static final int START = END - 100;\n\n\tpublic static void main(String[] args) {\n\t\tint count = 0;\n\t\tfor (int i = START; i <= END; i++)\n\t\t\tcount++;\n\t\tSystem.out.println(count);\n\t}\n}\n\nfor (long i = START; i <= END; i++)\n```\n无论你在何时使用了一个整数类型，都要意识到其边界条件。\n```java\nint i = START;\ndo {\n\tcount++;\n} while (i++ != END);\n```\n27.\t变幻莫测的i值\n```java\npublic class Shifty {\n\tpublic static void main(String[] args) {\n\t\tint i = 0;\n\t\twhile(-1 << i != 0)\n\t\t\ti++;\n\t\tSystem.out.println(i);\n\t}\n}\n```\n移位操作符只使用其右操作数的低5位作为移位长度。或者是低6位，如果其左操作数是一个long类型数值。\n28.\t就\n29.\tGf\n30.\tD\n31.\tG\n32.\tG\n33.\tG\n34.\tG\n35.\tG\n## 第5章 异常之谜\n36.\tF\n37.\tF\n38.\tF\n39.\tF\n40.\tF\n41.\tF\n42.\tF\n43.\tF\n44.\tF\n45.\tF\n\n## 第6章 类之谜\n46.\t令人混淆的构造器案例\n```java\npublic class Confusing {\n\tprivate Confusing(Object o) {\n\t\tSystem.out.println(\"Object\");\n\t}\n\n\tprivate Confusing(double[] dArray) {\n\t\tSystem.out.println(\"double array\");\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tnew Confusing(null);\n\t}\n}\n```\nJava的重载解析过程是分两阶段运行的。第一阶段选取所有可获得并且可应用的方法或构造器。第二阶段在第一阶段选取的方法或构造器中选取最精确的一个。\n在测试哪一个方法或构造器最精确时，并没有使用实参。\n要想强制要求编译器选择一个精确的重载版本，需要将实参转型为形参所声明的类型。\n避免使用重载。\n47. 啊呀！狸猫变犬子\n```java\nclass Counter {\n\tprivate static int count;\n\n\tpublic static void increment() {\n\t\tcount++;\n\t}\n\n\tpublic static int getCount() {\n\t\treturn count;\n\t}\n}\n\nclass Dog extends Counter {\n\tpublic Dog() {\n\t}\n\n\tpublic void woof() {\n\t\tincrement();\n\t}\n}\n\nclass Cat extends Counter {\n\tpublic Cat() {\n\t}\n\n\tpublic void meow() {\n\t\tincrement();\n\t}\n}\n\npublic class Ruckus {\n\tpublic static void main(String[] args) {\n\t\tDog[] dogs = { new Dog(), new Dog() };\n\t\tfor (int i = 0; i < dogs.length; i++)\n\t\t\tdogs[i].woof();\n\t\tCat[] cats = { new Cat(), new Cat(), new Cat() };\n\t\tfor (int i = 0; i < cats.length; i++)\n\t\t\tcats[i].meow();\n\t\tSystem.out.print(Dog.getCount() + \" woofs and \");\n\t\tSystem.out.println(Cat.getCount() + \" meows\");\n\t}\n}\n```\n每一个静态字段在声明它的类及其所有子类中共享一份单一的副本。\n优选组合而不是继承。\n48. 我所得到的都是静态的\n```java\nclass Dog {\n\tpublic static void bark() {\n\t\tSystem.out.print(\"woof \");\n\t}\n}\n\nclass Basenji extends Dog {\n\tpublic static void bark() {\n\t}\n}\n\npublic class Bark {\n\tpublic static void main(String args[]) {\n\t\tDog woofer = new Dog();\n\t\tDog nipper = new Basenji();\n\t\twoofer.bark();\n\t\tnipper.bark();\n\t}\n}\n```\n对静态方法的调用不存在任何动态的分派机制。\n千万不要用一个表达式来标识一个静态方法调用。\n千万不要隐藏静态方法。\n49.\t比生命更大\n```java\npublic class Elvis {\n\tpublic static final Elvis INSTANCE = new Elvis();\n\tprivate final int beltSize;\n\tprivate static final int CURRENT_YEAR = Calendar.getInstance().get(\n\t\t\tCalendar.YEAR);\n\n\tprivate Elvis() {\n\t\tbeltSize = CURRENT_YEAR - 1930;\n\t}\n\n\tpublic int beltSize() {\n\t\treturn beltSize;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(\"Elvis wears a size \" + INSTANCE.beltSize()\n\t\t\t\t+ \" belt.\");\n\t}\n}\n```\n在final类型的静态字段被初始化之前，存在着读取其值的可能。\n要想改正一个类初始化循环，需要重新对静态字段的初始器进行排序，使得每一个初始器都出现在任何依赖于它的初始器之前。\n要当心类初始化循环。\n50.\t不是你的类型\n```java\npublic class Type1 {\n\tpublic static void main(String[] args) {\n\t\tString s = null;\n\t\tSystem.out.println(s instanceof String);\n\t}\n}\n```\ninstanceof操作符被定义为在其左操作数为null时返回false。\n```java\npublic class Type2 {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(new Type2() instanceof String);\n\t}\n}\n```\ninstanceof操作符有这样的要求：如果两个操作数的类型都是类，其中一个必须是另一个的子类型。\n```java\npublic class Type3 {\n\tpublic static void main(String args[]) {\n\t\tType3 t3 = (Type3) new Object();\n\t}\n}\n```\n51.\t要点何在\n```java\nclass Point {\n\tprivate final int x, y;\n\tprivate final String name; // Cached at construction time\n\n\tPoint(int x, int y) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tname = makeName();\n\t}\n\n\tprotected String makeName() {\n\t\treturn \"[\" + x + \",\" + y + \"]\";\n\t}\n\n\tpublic final String toString() {\n\t\treturn name;\n\t}\n}\n\npublic class ColorPoint extends Point {\n\tprivate final String color;\n\n\tColorPoint(int x, int y, String color) {\n\t\tsuper(x, y);\n\t\tthis.color = color;\n\t}\n\n\tprotected String makeName() {\n\t\treturn super.makeName() + \":\" + color;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(new ColorPoint(4, 2, \"purple\"));\n\t}\n}\n```\n在一个final类型的实例字段被赋值之前，存在着取用其值的可能。\n循环的实例初始化时可以且总是应该避免的。\n千万不要在构造器中调用可覆写的方法。\n52.\t总和的玩笑\n```java\nclass Cache {\n\tstatic {\n\t\tinitializeIfNecessary();\n\t}\n\tprivate static int sum;\n\n\tpublic static int getSum() {\n\t\tinitializeIfNecessary();\n\t\treturn sum;\n\t}\n\n\tprivate static boolean initialized = false;\n\n\tprivate static synchronized void initializeIfNecessary() {\n\t\tif (!initialized) {\n\t\t\tfor (int i = 0; i < 100; i++)\n\t\t\t\tsum += i;\n\t\t\tinitialized = true;\n\t\t}\n\t}\n}\n\npublic class Client {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(Cache.getSum());\n\t}\n}\n```\n要么使用积极初始化，要么使用延迟初始化，千万不要同时使用二者。\n请考虑类初始化的顺序，特别是当初始化显得很重要时更是如此。\n53.\t做你的事吧\n54.\tNull与Void\n```java\npublic class Null {\n\tpublic static void greet() {\n\t\tSystem.out.println(\"Hello world!\");\n\t}\n\n\tpublic static void main(String[] args) {\n\t\t((Null) null).greet();\n\t}\n}\n```\n静态方法调用的限定表达式是可以计算的，但是它的值将被忽略。\n```java\nNull.greet();\ngreet();\n```\n55.\t特创论\n```java\npublic class Creator {\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0; i < 100; i++)\n\t\t\tCreature creature = new Creature();\n\t\tSystem.out.println(Creature.numCreated());\n\t}\n}\n\nclass Creature {\n\tprivate static long numCreated = 0;\n\n\tpublic Creature() {\n\t\tnumCreated++;\n\t}\n\n\tpublic static long numCreated() {\n\t\treturn numCreated;\n\t}\n}\n```\n一个局部变量声明作为一条语句只能直接出现在一个语句块中。（一个语句块是由一对花括号以及包含在这对花括号的语句和声明构成的）\n```java\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tCreature creature = new Creature();\n\t\t}\n\n\t\tfor (int i = 0; i < 100; i++)\n\t\t\tnew Creature();\n\n// Thread-safe creation counter\nclass Creature {\n\tprivate static long numCreated;\n\n\tpublic Creature() {\n\t\tsynchronized (Creature.class) {\n\t\t\tnumCreated++;\n\t\t}\n\t}\n\n\tpublic static synchronized long numCreated() {\n\t\treturn numCreated;\n\t}\n}\n\nclass Creature {\n\tprivate static AtomicLong numCreated = new AtomicLong();\n\n\tpublic Creature() {\n\t\tnumCreated.incrementAndGet();\n\t}\n\n\tpublic static long numCreated() {\n\t\treturn numCreated.get();\n\t}\n}\n```\n在使用一个变量来对实例的创建进行计数时，要使用long类型而不是int类型的变量，以防止溢出。\n## 第7章 库之谜\n56. 大问题\n```java\npublic class BigProblem {\n\tpublic static void main(String[] args) {\n\t\tBigInteger fiveThousand = new BigInteger(\"5000\");\n\t\tBigInteger fiftyThousand = new BigInteger(\"50000\");\n\t\tBigInteger fiveHundredThousand = new BigInteger(\"500000\");\n\t\tBigInteger total = BigInteger.ZERO;\n\t\ttotal.add(fiveThousand);\n\t\ttotal.add(fiftyThousand);\n\t\ttotal.add(fiveHundredThousand);\n\t\tSystem.out.println(total);\n\t}\n}\n```\nBigInteger实例是不可变的。\n```java\ntotal = total.add(fiveThousand);\ntotal = total.add(fiftyThousand);\ntotal = total.add(fiveHundredThousand);\n```\n57.\t名字里有什么\n```java\npublic class Name {\n\tprivate final String first, last;\n\n\tpublic Name(String first, String last) {\n\t\tthis.first = first;\n\t\tthis.last = last;\n\t}\n\n\tpublic boolean equals(Object o) {\n\t\tif (!(o instanceof Name))\n\t\t\treturn false;\n\t\tName n = (Name) o;\n\t\treturn n.first.equals(first) && n.last.equals(last);\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tSet<Name> s = new HashSet<Name>();\n\t\ts.add(new Name(\"Mickey\", \"Mouse\"));\n\t\tSystem.out.println(s.contains(new Name(\"Mickey\", \"Mouse\")));\n\t}\n}\n```\n无论何时，只要覆写了equals方法，就必须同时覆写hashCode方法。\n58.\t产生它的散列码\n```java\npublic class Name {\n\tprivate final String first, last;\n\n\tpublic Name(String first, String last) {\n\t\tthis.first = first;\n\t\tthis.last = last;\n\t}\n\n\tpublic boolean equals(Name n) {\n\t\treturn n.first.equals(first) && n.last.equals(last);\n\t}\n\n\tpublic int hashCode() {\n\t\treturn 31 * first.hashCode() + last.hashCode();\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tSet<Name> s = new HashSet<Name>();\n\t\ts.add(new Name(\"Donald\", \"Duck\"));\n\t\tSystem.out.println(s.contains(new Name(\"Donald\", \"Duck\")));\n\t}\n}\n```\n重载为错误和混乱提供了机会。\n为了避免无意识地重载，应该机械地对你想要覆写的每一个超类方法都复制其声明。\n59. 差是什么\n以0开头的整型字面常量将被解释成为八进制数值。\n千万不要在一个整型字面常量前面加上一个0。\n60. 一行以毙之\n了解类库中有些什么可以为你节省大量的时间和精力，并且可以提高程序的速度和质量。\n61. 日期游戏\nDate将一月表示为0，而Calendar延续了这个错误。\nDate.getDay返回的是Date实例所表示的星期日期，而不是月份日期。\n在使用Calendar或Date的时候一定要当心，千万要记着查阅API文档。\n62. 名字游戏\n不要使用IdentityHashMap，除非你需要其基于标识的语义，它不是一个通用目的的Map实现。\n63. 更多同样的问题\n不要因为偶然地添加了一个返回类型，而将一个构造器声明变成了一个方法声明。\n要遵守标准的命名约定。\n64. 按余数编组\nMath.abs不能保证一定会返回非负的结果。\n65. 疑似配需的惊人传奇\n不要使用基于减法的比较器，除非你能够确保要比较的数值之间的差永远不会大于Integer.MAX_VALUE。\n## 第8章 更多类之谜\n66. 一件私事\n```java\nclass Base {\n\tpublic String className = \"Base\";\n}\n\nclass Derived extends Base {\n\tprivate String className = \"Derived\";\n}\n\npublic class PrivateMatter {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(new Derived().className);\n\t}\n}\n```\n避免隐藏。\n一个覆写方法的访问修饰符所提供的访问权限要大于等于被覆写方法的访问修饰符所提供的访问权限。而字段则不必。\n67.\t对字符串上瘾\n要避免重用平台类的名字，并且千万不要难过重用java.lang中的类名。\n68.\t灰色的阴影\n```java\npublic class ShadesOfGray {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(X.Y.Z);\n\t}\n}\n\nclass X {\n\tstatic class Y {\n\t\tstatic String Z = \"Black\";\n\t}\n\n\tstatic C Y = new C();\n}\n\nclass C {\n\tString Z = \"White\";\n}\n```\n当一个变量和一个类型具有相同的名字，并且它们位于相同的作用域时，变量名具有优先权。\n相似地，变量名和类型名可以遮掩包名。\n69.\t黑色的渐隐\n70.\t一揽子交易\n```java\npackage click;\npublic class CodeTalk {\n\tpublic void doIt() {\n\t\tprintMessage();\n\t}\n\n\tvoid printMessage() {\n\t\tSystem.out.println(\"Click\");\n\t}\n}\n\npackage hack;\nimport click.CodeTalk;\npublic class TypeIt {\n\tprivate static class ClickIt extends CodeTalk {\n\t\tvoid printMessage() {\n\t\t\tSystem.out.println(\"Hack\");\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tClickIt clickit = new ClickIt();\n\t\tclickit.doIt();\n\t}\n}\n```\n一个包内私有的方法不能被位于另一个包中的某个方法直接覆写。\n71.\t进口税\n72.\t终极危难\nfinal修饰符对方法和字段而言，意味着某些完全不同的事情。对于方法，final意味着该方法不能被覆写（对实例方法而言）或者隐藏（对静态方法而言）。对于字段，final意味着该字段不能被赋值超过一次。\n73.\t隐私在公开\n重用名字是危险的；应该避免隐藏、遮蔽和遮掩。\n74.\t同一性的危机\n75.\t头还是尾\n名字重用的术语表\n第9章 更多库之谜\n76.\t乒乓\n```java\npublic class PingPong {\n\tpublic static synchronized void main(String[] a) {\n\t\tThread t = new Thread() {\n\t\t\tpublic void run() {\n\t\t\t\tpong();\n\t\t\t}\n\t\t};\n\t\tt.run();\n\t\tSystem.out.print(\"Ping\");\n\t}\n\n\tstatic synchronized void pong() {\n\t\tSystem.out.print(\"Pong\");\n\t}\n}\n```\n当你想调用一个线程的start方法时要多加小心，别弄错成调用这个线程的run方法了。\n77.\t乱锁之妖\n78.\t反射的影响\n```java\npublic class Reflector {\n\tpublic static void main(String[] args) throws Exception {\n\t\tSet<String> s = new HashSet<String>();\n\t\ts.add(\"foo\");\n\t\tIterator it = s.iterator();\n\t\tMethod m = it.getClass().getMethod(\"hasNext\");\n\t\tSystem.out.println(m.invoke(it));\n\t}\n}\n```\n访问位于其它包中的非公共类型的成员是不合法的。\nObject.getClass().getMethod(“methodName”)这种惯用法虽然很常见，但是却有问题，它不应该被使用。\n在使用反射访问某个类型时，请使用表示某种可访问类型的Class对象。\nMethod m = Iterator.class.getMethod(\"hasNext\");\n79.\t狗狗的幸福生活\n避免遮蔽。\n使用Thread(Runnable)构造器来替代对Thread的继承。\n80.\t更深层的反射\n```java\npublic class Outer {\n\tpublic static void main(String[] args) throws Exception {\n\t\tnew Outer().greetWorld();\n\t}\n\n\tprivate void greetWorld() throws Exception {\n\t\tSystem.out.println(Inner.class.newInstance());\n\t}\n\n\tpublic class Inner {\n\t\tpublic String toString() {\n\t\t\treturn \"Hello world\";\n\t\t}\n\t}\n}\n```\n除非你确实需要一个外围实例i，否则应该优先使用静态成员类而不是非静态成员类。\n请避免使用反射类实例化内部类。\n81.\t无法识别的字符化\n```java\npublic class Greeter {\n\tpublic static void main(String[] args) {\n\t\tString greeting = \"Hello world\";\n\t\tfor (int i = 0; i < greeting.length(); i++)\n\t\t\tSystem.out.write(greeting.charAt(i));\n\t}\n}\n```\nwrite(int)是唯一一个在自动刷新功能开启的情况下不刷新PrintStream的输出方法。\n尽可能使用熟悉的惯用法，如果不得不使用陌生的API，请一定要参考相关的文档。\n82.\t啤酒爆炸\n83.\t诵读困难者的一神论\n84.\t戛然而止\n```java\npublic class SelfInterruption {\n\tpublic static void main(String[] args) {\n\t\tThread.currentThread().interrupt();\n\t\tif (Thread.interrupted()) {\n\t\t\tSystem.out.println(\"Interrupted: \" + Thread.interrupted());\n\t\t} else {\n\t\t\tSystem.out.println(\"Not interrupted: \" + Thread.interrupted());\n\t\t}\n\t}\n}\n```\n调用Thread.interrupted方法总是会清除当前线程的中断状态。\nThread.currentThread().isInterrupted()\n不要使用Thread.interrupted方法，除非你想要清除当前线程的中断状态。\n85.\t延迟初始化\n\n\n\n\n\n\n","slug":"Java解惑","published":1,"updated":"2019-04-17T02:05:45.711Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjukz83op000c7syvug0obp7a","content":"<h1 id=\"Java解惑\"><a href=\"#Java解惑\" class=\"headerlink\" title=\"Java解惑\"></a>Java解惑</h1><hr>\n<h2 id=\"第2章-表达式之谜\"><a href=\"#第2章-表达式之谜\" class=\"headerlink\" title=\"第2章 表达式之谜\"></a>第2章 表达式之谜</h2><ol>\n<li>奇数性<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isOdd</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> i % <span class=\"number\">2</span> == <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>当取余操作返回一个非零的结果时，它与左操作数具有相同的正负符号。<br>当i是一个负奇数时，i%2等于-1而不是1。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isOdd</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i % <span class=\"number\">2</span> != <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ol start=\"2\">\n<li>找零时刻<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Change</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"number\">2.00</span>-<span class=\"number\">1.10</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>问题在于1.1这个数字不能被精确表示为一个double，因此被表示为最接近它的double值。<br>并不是所有的小数都可以用二进制浮点数精确表示。<br>二进制浮点对于货币计算是非常不合适的。<br>解决该问题的一种方式是使用某种整数类型。<br>解决该问题的另一种方式是使用执行精确小数运算的BigDecimal。<br>一定要用BigDecimal(String)构造器，而千万不要用BigDecimal(double)。<br>在需要精确答案的地方，要避免使用float和double；对于货币计算，要使用int、long或BigDecimal。</p>\n<ol start=\"3\">\n<li><p>长整除</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LongDivision</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> <span class=\"keyword\">long</span> MICROS_PER_DAY = <span class=\"number\">24</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">1000</span> * <span class=\"number\">1000</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> <span class=\"keyword\">long</span> MILLIS_PER_DAY = <span class=\"number\">24</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">1000</span>;</span><br><span class=\"line\">\t\tSystem.out.println(MICROS_PER_DAY/MILLIS_PER_DAY);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> final long MICROS_PER_DAY = 24L <em> 60 </em> 60 <em> 1000 </em> 1000;<br> final long MILLIS_PER_DAY = 24L <em> 60 </em> 60 * 1000;<br>当在操作很大的数字时，千万要提防溢出——它可是一个缄默杀手。</p>\n</li>\n<li>初级问题<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Elementary</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"number\">12345</span> + <span class=\"number\">5432l</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在long类型字面常量中，一定要用大写的L，千万不要用小写的l。<br>要避免使用单个l字母作为变量名。</p>\n<ol start=\"5\">\n<li>十六进制的趣事<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JoyOfHex</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(Long.toHexString(<span class=\"number\">0x100000000L</span> + <span class=\"number\">0xcafebabe</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>负的十进制常量可以很明确地用一个减号来标识。<br>如果十六进制和八进制字面常量的最高位被置位了，那么它们就是负数。<br>System.out.println(Long.toHexString(0x100000000L + 0xcafebabeL));<br>通常最好是避免混合类型的计算。</p>\n<ol start=\"6\">\n<li>多重转型<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Multicast</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println((<span class=\"keyword\">int</span>)(<span class=\"keyword\">char</span>)(<span class=\"keyword\">byte</span>)-<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>如果最初的数值类型是有符号的，就执行符号扩展；如果它是char，那么不管它将要被转换成什么类型，都执行零扩展。</p>\n<ol start=\"7\">\n<li>互换内容<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CleverSwap</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x = <span class=\"number\">1984</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> y = <span class=\"number\">2001</span>;</span><br><span class=\"line\">\t\tx ^= y ^= x ^= y;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"x=\"</span>+x+<span class=\"string\">\";y=\"</span>+y);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>C/C++中运行正确。Java中不正确。<br>操作符的操作数是从左向右求值的。<br>实际运行过程如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> tmp1 = x;</span><br><span class=\"line\"><span class=\"keyword\">int</span> tmp2 = y;</span><br><span class=\"line\"><span class=\"keyword\">int</span> tmp3 = x ^ y;</span><br><span class=\"line\">x = tmp3;</span><br><span class=\"line\">y = tmp2 ^ tmp3;</span><br><span class=\"line\">x = tmp1 ^ y;</span><br><span class=\"line\">y = (x ^= (y ^= x)) ^ y;</span><br></pre></td></tr></table></figure></p>\n<p>在单个表达式中不要对相同的变量赋值两次。</p>\n<ol start=\"8\">\n<li>Dos Equis<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DosEquis</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> x= <span class=\"string\">'X'</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">true</span> ? x : <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">false</span> ? i : x);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>混合类型的计算会引起混乱，而这一点在条件表达式中比在其他任何地方都表现得更明显。<br>确定条件表达式结果类型的规则：<br>（1） 如果第二个和第三个操作数具有相同的类型，那么它就是条件表达式的类型。<br>（2） 如果一个操作数的类型是T，T表示byte、short、或char，而另一个操作数是一个int类型的常数表达式，它的值可以用类型T表示，那么条件表达式的类型就是T。<br>（3） 否则，将对操作数类型进行二进制数字提升，而条件表达式的类型就是第二个和第三个操作数被提升之后的类型。<br>将final修饰符用于i的声明可以把i转变为一个常量表达式。<br>在条件表达式中使用类型相同的第二个和第三个操作数。</p>\n<ol start=\"9\">\n<li>半斤<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x += i;</span><br><span class=\"line\">x = x + i;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>复合赋值E1 op= E2等价于简单赋值E1=(T)((E1)op(E2))，其中T是E1的类型。<br>复合赋值表达式自动将所执行计算的结果转型为其左侧变量的类型。<br>请不要将复合赋值操作符作用于byte、short或char类型的变量。在将复合赋值操作符作用于int类型的变量上时，要确保表达式右侧不是long、float或double类型。在将复合赋值操作符作用于float类型的变量上时，要确保表达式右侧不是double类型。</p>\n<ol start=\"10\">\n<li>八两<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = x + i;</span><br><span class=\"line\">x += i;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>如果在+=操作符左侧的操作数是String类型的，那么它允许右侧的操作数是任意类型。<br>简单赋值操作符（=）允许其左侧的是对象引用类型，只要表达式的右侧与左侧的变量时赋值兼容的即可。</p>\n<h2 id=\"第3章-字符之谜\"><a href=\"#第3章-字符之谜\" class=\"headerlink\" title=\"第3章 字符之谜\"></a>第3章 字符之谜</h2><ol start=\"11\">\n<li>最后的笑声<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LastLaugh</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"H\"</span> + <span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">'H'</span> + <span class=\"string\">'a'</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>当且仅当+操作符的操作数中至少有一个是String类型时，才会执行字符串连接操作。<br>    System.out.println(“2+2=”+2+2);</p>\n<ol start=\"12\">\n<li><p>ABC</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Abc</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tString letters = <span class=\"string\">\"ABC\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span>[] numbers = &#123;<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>&#125;;</span><br><span class=\"line\">\t\tSystem.out.println(letters + <span class=\"string\">\" easy as \"</span> + numbers);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>System.out.println(numbers);<br>要想将一个char数组转换成一个字符串，就要调用String.valueOf(char[])方法。</p>\n</li>\n<li>动物庄园<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnimalFarm</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> String pig = <span class=\"string\">\"length:10\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> String dog = <span class=\"string\">\"length:\"</span> + pig.length();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Animals are equal:\"</span> + pig == dog);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>+比==的优先级高。<br>在使用字符串连接操作符时，总是将重要的操作数用括号括起来。<br>在比较对象引用时，应该优先使用equals方法而不是==操作符，除非需要比较的是对象的标识而不是对象的值。</p>\n<ol start=\"14\">\n<li>转义字符的溃败<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EscapeRout</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// \\u0022 is the Unicode escape for double quote (\")</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"a\\u0022.length()+\\u0022b\"</span>.length());\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>Java对在字符串字面常量中的Unicode转义字符没有提供任何特殊处理。<br>在字符串和字符字面常量中优先选择的是转义字符序列，而不是Unicode转义字符。<br>不要使用Unicode转义字符来表示ASCII字符。</p>\n<ol start=\"15\">\n<li>令人晕头转向的Hello<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Generated by the IBM IDL-to-Java compiler, version 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> * from F:\\TestRoot\\apps\\a1\\units\\include\\PolicyHome.idl</span></span><br><span class=\"line\"><span class=\"comment\"> * Wednesday, June 17, 1998 6:44:40 o'clock AM GMT+00:00</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.print(<span class=\"string\">\"Hell\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"o world\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>问题在于注释的第三行，它包含了字符\\units。<br>Unicode转义字符必须是良构的，即使出现在注释中也是如此。<br>在Javadoc注释中，应该使用HTML实体转义字符来代替Unicode转义字符。<br>工具应该确保不将Windows文件名置于所生成的Java源文件的注释中。</p>\n<ol start=\"16\">\n<li>行打印程序<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinePrinter</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Note: \\u000A is Unicode representation of linefeed (LF)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> c = <span class=\"number\">0x000A</span>;</span><br><span class=\"line\">\t\tSystem.out.println(c);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>第三行的注释<br>除非确实是必需的，否则就不要用使用Unicode转义字符。</p>\n<ol start=\"17\">\n<li>嗯？<br>只有在你要向程序中插入用其他任何方式都无法表示的字符时，Unicode转义字符才是必需的，除此之外的任何情况都应该避免使用它们。</li>\n<li>字符串奶酪<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StringCheese</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">256</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">256</span>; i++)</span><br><span class=\"line\">\t\t\tbytes[i] = (<span class=\"keyword\">byte</span>) i;</span><br><span class=\"line\">\t\tString str = <span class=\"keyword\">new</span> String(bytes);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, n = str.length(); i &lt; n; i++)</span><br><span class=\"line\">\t\t\tSystem.out.print((<span class=\"keyword\">int</span>) str.charAt(i) + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在char序列和byte序列之间转换时，可以且通常应该显式地指定字符集。<br>每当要将一个byte序列转换成一个String时，你都在使用一个字符集，不管是否显式指定了它。</p>\n<ol start=\"19\">\n<li>漂亮的火花（块注释符）<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Classifier</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(classify(<span class=\"string\">'n'</span>) + classify(<span class=\"string\">'+'</span>) + classify(<span class=\"string\">'2'</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> String <span class=\"title\">classify</span><span class=\"params\">(<span class=\"keyword\">char</span> ch)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"string\">\"0123456789\"</span>.indexOf(ch) &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"NUMERAL \"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"string\">\"abcdefghijklmnopqrstuvwxyz\"</span>.indexOf(ch) &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"LETTER \"</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">/* (Operators not supported yet)</span></span><br><span class=\"line\"><span class=\"comment\">\t\tif (\"+-*/</span>&amp;|!=<span class=\"string\">\".indexOf(ch) &gt;= 0)</span></span><br><span class=\"line\"><span class=\"string\">\t\treturn \"</span>OPERATOR <span class=\"string\">\";</span></span><br><span class=\"line\"><span class=\"string\">\t\t*/</span></span><br><span class=\"line\"><span class=\"string\">\t\treturn \"</span>UNKNOWN <span class=\"string\">\";</span></span><br><span class=\"line\"><span class=\"string\">\t&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在注释中没有特殊处理字符串字面常量。<br>块注释不能嵌套。<br>注释掉代码段的最好方式是使用单行的注释序列。<br>块注释不能可靠地注释掉代码段。</p>\n<ol start=\"20\">\n<li>我的类是什么<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Me</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(Me.class.getName().replaceAll(<span class=\"string\">\".\"</span>, <span class=\"string\">\"/\"</span>) + <span class=\"string\">\".class\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>String.replaceAll接受了一个正则表达式作为它的第一个参数。正则表达式”.”可以匹配任何单个的字符。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Me.class.getName().replaceAll(<span class=\"string\">\"\\\\.\"</span>, <span class=\"string\">\"/\"</span>);</span><br><span class=\"line\">System.out.println(Me.class.getName().replaceAll(Pattern.quote(<span class=\"string\">\".\"</span>), <span class=\"string\">\"/\"</span>) + <span class=\"string\">\".class\"</span>);</span><br></pre></td></tr></table></figure></p>\n<ol start=\"21\">\n<li>我的类是什么？镜头2<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MeToo</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(MeToo.class.getName().replaceAll(<span class=\"string\">\"\\\\.\"</span>,</span><br><span class=\"line\">\t\t\t\tFile.separator)</span><br><span class=\"line\">\t\t\t\t+ <span class=\"string\">\".class\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>第二个参数不是一个普通的字符串，而是一个替代字符串。在替代字符串中出现的反斜杠会把紧随其后的字符进行转义，从而导致其被按字面含义而处理了。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(MeToo.class.getName().replaceAll(<span class=\"string\">\"\\\\.\"</span>,</span><br><span class=\"line\">    Matcher.quoteReplacement(File.separator))</span><br><span class=\"line\">    + <span class=\"string\">\".class\"</span>);</span><br><span class=\"line\">System.out.println(MeToo.class.getName().replace(<span class=\"string\">\".\"</span>, File.separator)     + <span class=\"string\">\".class\"</span>);</span><br><span class=\"line\">System.out.println(MeToo.class.getName().replace(<span class=\"string\">'.'</span>,                    File.separatorChar) + <span class=\"string\">\".class\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>在使用不熟悉的类库方法时一定要格外小心。</p>\n<ol start=\"22\">\n<li>URL的愚弄<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BrowserTest</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.print(<span class=\"string\">\"iexplore:\"</span>);</span><br><span class=\"line\">\t\thttp: <span class=\"comment\">// www.google.com;</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\":maximize\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在程序中间出现的URL是一个语句标号（statement label）后面跟着尾注释（end-of-line comment）。<br>仔细地写注释，并让它们跟上时代；去除那些已遭废弃的代码。</p>\n<ol start=\"23\">\n<li>不劳而获<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rhymes</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Random rnd = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tStringBuffer word = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (rnd.nextInt(<span class=\"number\">2</span>)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t\tword = <span class=\"keyword\">new</span> StringBuffer(<span class=\"string\">'P'</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\t\tword = <span class=\"keyword\">new</span> StringBuffer(<span class=\"string\">'G'</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\tword = <span class=\"keyword\">new</span> StringBuffer(<span class=\"string\">'M'</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tword.append(<span class=\"string\">'a'</span>);</span><br><span class=\"line\">\t\tword.append(<span class=\"string\">'i'</span>);</span><br><span class=\"line\">\t\tword.append(<span class=\"string\">'n'</span>);</span><br><span class=\"line\">\t\tSystem.out.println(word);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>要当心栅栏柱错误。<br>不要从一个非空的case向下进入另一个case。<br>不管在什么时候，都要尽可能使用熟悉的惯用法和API。如果必须使用不熟悉的API，那么请仔细阅读其文档。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (rnd.nextInt(<span class=\"number\">3</span>)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t\tword = <span class=\"keyword\">new</span> StringBuffer(<span class=\"string\">\"P\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\t\tword = <span class=\"keyword\">new</span> StringBuffer(<span class=\"string\">\"G\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\tword = <span class=\"keyword\">new</span> StringBuffer(<span class=\"string\">\"M\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"PGM\"</span>.charAt(rnd.nextInt(<span class=\"number\">3</span>)) + <span class=\"string\">\"ain\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rhymes</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</span><br><span class=\"line\">\t\tString a[] = &#123; <span class=\"string\">\"Main\"</span>, <span class=\"string\">\"Pain\"</span>, <span class=\"string\">\"Gain\"</span> &#125;;</span><br><span class=\"line\">\t\tSystem.out.println(randomElement(a));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Random rnd = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">randomElement</span><span class=\"params\">(String[] a)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a[rnd.nextInt(a.length)];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>char不是String，而是更像int。<br>要提防各种诡异的谜题。</p>\n<h2 id=\"第4章-循环之谜\"><a href=\"#第4章-循环之谜\" class=\"headerlink\" title=\"第4章 循环之谜\"></a>第4章 循环之谜</h2><ol start=\"24\">\n<li>尽情享受每一个字节<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BigDelight</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">byte</span> b = Byte.MIN_VALUE; b &lt; Byte.MAX_VALUE; b++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (b == <span class=\"number\">0x90</span>)</span><br><span class=\"line\">\t\t\t\tSystem.out.print(<span class=\"string\">\"Joy!\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (b == (<span class=\"keyword\">byte</span>)<span class=\"number\">0x90</span>)\tSystem.out.print(<span class=\"string\">\"Joy!\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> ((b &amp; <span class=\"number\">0xff</span>) == <span class=\"number\">0x90</span>)\tSystem.out.print(<span class=\"string\">\"Joy!\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> TARGET = (<span class=\"keyword\">byte</span>) <span class=\"number\">0x90</span>; </span><br><span class=\"line\"><span class=\"keyword\">if</span> (b == TARGET)\tSystem.out.print(<span class=\"string\">\"Joy!\"</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>要避免混合类型比较，因为它们内在地容易引起混乱。<br>请使用声明的常量替代“魔数”。</p>\n<ol start=\"25\">\n<li>无情的增量操作<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Increment</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++)</span><br><span class=\"line\">\t\t\tj = j++;</span><br><span class=\"line\">\t\tSystem.out.println(j);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>不要在单个表达式中对相同的变量赋值超过一次。</p>\n<ol start=\"26\">\n<li>在循环中<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InTheLoop</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> END = Integer.MAX_VALUE;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> START = END - <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = START; i &lt;= END; i++)</span><br><span class=\"line\">\t\t\tcount++;</span><br><span class=\"line\">\t\tSystem.out.println(count);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">long</span> i = START; i &lt;= END; i++)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>无论你在何时使用了一个整数类型，都要意识到其边界条件。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i = START;</span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">\tcount++;</span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span> (i++ != END);</span><br></pre></td></tr></table></figure></p>\n<ol start=\"27\">\n<li>变幻莫测的i值<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shifty</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(-<span class=\"number\">1</span> &lt;&lt; i != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\ti++;</span><br><span class=\"line\">\t\tSystem.out.println(i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>移位操作符只使用其右操作数的低5位作为移位长度。或者是低6位，如果其左操作数是一个long类型数值。</p>\n<ol start=\"28\">\n<li>就</li>\n<li>Gf</li>\n<li>D</li>\n<li>G</li>\n<li>G</li>\n<li>G</li>\n<li>G</li>\n<li>G<h2 id=\"第5章-异常之谜\"><a href=\"#第5章-异常之谜\" class=\"headerlink\" title=\"第5章 异常之谜\"></a>第5章 异常之谜</h2></li>\n<li>F</li>\n<li>F</li>\n<li>F</li>\n<li>F</li>\n<li>F</li>\n<li>F</li>\n<li>F</li>\n<li>F</li>\n<li>F</li>\n<li>F</li>\n</ol>\n<h2 id=\"第6章-类之谜\"><a href=\"#第6章-类之谜\" class=\"headerlink\" title=\"第6章 类之谜\"></a>第6章 类之谜</h2><ol start=\"46\">\n<li>令人混淆的构造器案例<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Confusing</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Confusing</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Object\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Confusing</span><span class=\"params\">(<span class=\"keyword\">double</span>[] dArray)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"double array\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Confusing(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>Java的重载解析过程是分两阶段运行的。第一阶段选取所有可获得并且可应用的方法或构造器。第二阶段在第一阶段选取的方法或构造器中选取最精确的一个。<br>在测试哪一个方法或构造器最精确时，并没有使用实参。<br>要想强制要求编译器选择一个精确的重载版本，需要将实参转型为形参所声明的类型。<br>避免使用重载。</p>\n<ol start=\"47\">\n<li>啊呀！狸猫变犬子<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Counter</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> count;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">increment</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tcount++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> count;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title\">Counter</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Dog</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">woof</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tincrement();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> <span class=\"keyword\">extends</span> <span class=\"title\">Counter</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Cat</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">meow</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tincrement();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Ruckus</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tDog[] dogs = &#123; <span class=\"keyword\">new</span> Dog(), <span class=\"keyword\">new</span> Dog() &#125;;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; dogs.length; i++)</span><br><span class=\"line\">\t\t\tdogs[i].woof();</span><br><span class=\"line\">\t\tCat[] cats = &#123; <span class=\"keyword\">new</span> Cat(), <span class=\"keyword\">new</span> Cat(), <span class=\"keyword\">new</span> Cat() &#125;;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; cats.length; i++)</span><br><span class=\"line\">\t\t\tcats[i].meow();</span><br><span class=\"line\">\t\tSystem.out.print(Dog.getCount() + <span class=\"string\">\" woofs and \"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(Cat.getCount() + <span class=\"string\">\" meows\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>每一个静态字段在声明它的类及其所有子类中共享一份单一的副本。<br>优选组合而不是继承。</p>\n<ol start=\"48\">\n<li>我所得到的都是静态的<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bark</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.print(<span class=\"string\">\"woof \"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Basenji</span> <span class=\"keyword\">extends</span> <span class=\"title\">Dog</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bark</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bark</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</span><br><span class=\"line\">\t\tDog woofer = <span class=\"keyword\">new</span> Dog();</span><br><span class=\"line\">\t\tDog nipper = <span class=\"keyword\">new</span> Basenji();</span><br><span class=\"line\">\t\twoofer.bark();</span><br><span class=\"line\">\t\tnipper.bark();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>对静态方法的调用不存在任何动态的分派机制。<br>千万不要用一个表达式来标识一个静态方法调用。<br>千万不要隐藏静态方法。</p>\n<ol start=\"49\">\n<li>比生命更大<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Elvis</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Elvis INSTANCE = <span class=\"keyword\">new</span> Elvis();</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> beltSize;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> CURRENT_YEAR = Calendar.getInstance().get(</span><br><span class=\"line\">\t\t\tCalendar.YEAR);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Elvis</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tbeltSize = CURRENT_YEAR - <span class=\"number\">1930</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">beltSize</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> beltSize;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Elvis wears a size \"</span> + INSTANCE.beltSize()</span><br><span class=\"line\">\t\t\t\t+ <span class=\"string\">\" belt.\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在final类型的静态字段被初始化之前，存在着读取其值的可能。<br>要想改正一个类初始化循环，需要重新对静态字段的初始器进行排序，使得每一个初始器都出现在任何依赖于它的初始器之前。<br>要当心类初始化循环。</p>\n<ol start=\"50\">\n<li>不是你的类型<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Type1</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tString s = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tSystem.out.println(s <span class=\"keyword\">instanceof</span> String);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>instanceof操作符被定义为在其左操作数为null时返回false。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Type2</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">new</span> Type2() <span class=\"keyword\">instanceof</span> String);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>instanceof操作符有这样的要求：如果两个操作数的类型都是类，其中一个必须是另一个的子类型。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Type3</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</span><br><span class=\"line\">\t\tType3 t3 = (Type3) <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ol start=\"51\">\n<li>要点何在<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> x, y;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String name; <span class=\"comment\">// Cached at construction time</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tPoint(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">\t\tname = makeName();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">makeName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"[\"</span> + x + <span class=\"string\">\",\"</span> + y + <span class=\"string\">\"]\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ColorPoint</span> <span class=\"keyword\">extends</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String color;</span><br><span class=\"line\"></span><br><span class=\"line\">\tColorPoint(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, String color) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(x, y);</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.color = color;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">makeName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.makeName() + <span class=\"string\">\":\"</span> + color;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">new</span> ColorPoint(<span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"string\">\"purple\"</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在一个final类型的实例字段被赋值之前，存在着取用其值的可能。<br>循环的实例初始化时可以且总是应该避免的。<br>千万不要在构造器中调用可覆写的方法。</p>\n<ol start=\"52\">\n<li>总和的玩笑<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cache</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\t\tinitializeIfNecessary();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> sum;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getSum</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tinitializeIfNecessary();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> initialized = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">initializeIfNecessary</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!initialized) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++)</span><br><span class=\"line\">\t\t\t\tsum += i;</span><br><span class=\"line\">\t\t\tinitialized = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(Cache.getSum());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>要么使用积极初始化，要么使用延迟初始化，千万不要同时使用二者。<br>请考虑类初始化的顺序，特别是当初始化显得很重要时更是如此。</p>\n<ol start=\"53\">\n<li>做你的事吧</li>\n<li>Null与Void<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Null</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">greet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Hello world!\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t((Null) <span class=\"keyword\">null</span>).greet();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>静态方法调用的限定表达式是可以计算的，但是它的值将被忽略。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Null.greet();</span><br><span class=\"line\">greet();</span><br></pre></td></tr></table></figure></p>\n<ol start=\"55\">\n<li>特创论<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Creator</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++)</span><br><span class=\"line\">\t\t\tCreature creature = <span class=\"keyword\">new</span> Creature();</span><br><span class=\"line\">\t\tSystem.out.println(Creature.numCreated());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Creature</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> numCreated = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Creature</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tnumCreated++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">numCreated</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> numCreated;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>一个局部变量声明作为一条语句只能直接出现在一个语句块中。（一个语句块是由一对花括号以及包含在这对花括号的语句和声明构成的）<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">\t\t\tCreature creature = <span class=\"keyword\">new</span> Creature();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">new</span> Creature();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Thread-safe creation counter</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Creature</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> numCreated;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Creature</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (Creature.class) &#123;</span><br><span class=\"line\">\t\t\tnumCreated++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">long</span> <span class=\"title\">numCreated</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> numCreated;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Creature</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> AtomicLong numCreated = <span class=\"keyword\">new</span> AtomicLong();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Creature</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tnumCreated.incrementAndGet();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">numCreated</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> numCreated.get();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在使用一个变量来对实例的创建进行计数时，要使用long类型而不是int类型的变量，以防止溢出。</p>\n<h2 id=\"第7章-库之谜\"><a href=\"#第7章-库之谜\" class=\"headerlink\" title=\"第7章 库之谜\"></a>第7章 库之谜</h2><ol start=\"56\">\n<li>大问题<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BigProblem</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tBigInteger fiveThousand = <span class=\"keyword\">new</span> BigInteger(<span class=\"string\">\"5000\"</span>);</span><br><span class=\"line\">\t\tBigInteger fiftyThousand = <span class=\"keyword\">new</span> BigInteger(<span class=\"string\">\"50000\"</span>);</span><br><span class=\"line\">\t\tBigInteger fiveHundredThousand = <span class=\"keyword\">new</span> BigInteger(<span class=\"string\">\"500000\"</span>);</span><br><span class=\"line\">\t\tBigInteger total = BigInteger.ZERO;</span><br><span class=\"line\">\t\ttotal.add(fiveThousand);</span><br><span class=\"line\">\t\ttotal.add(fiftyThousand);</span><br><span class=\"line\">\t\ttotal.add(fiveHundredThousand);</span><br><span class=\"line\">\t\tSystem.out.println(total);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>BigInteger实例是不可变的。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">total = total.add(fiveThousand);</span><br><span class=\"line\">total = total.add(fiftyThousand);</span><br><span class=\"line\">total = total.add(fiveHundredThousand);</span><br></pre></td></tr></table></figure></p>\n<ol start=\"57\">\n<li>名字里有什么<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Name</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String first, last;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Name</span><span class=\"params\">(String first, String last)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.first = first;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.last = last;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!(o <span class=\"keyword\">instanceof</span> Name))</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\tName n = (Name) o;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> n.first.equals(first) &amp;&amp; n.last.equals(last);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSet&lt;Name&gt; s = <span class=\"keyword\">new</span> HashSet&lt;Name&gt;();</span><br><span class=\"line\">\t\ts.add(<span class=\"keyword\">new</span> Name(<span class=\"string\">\"Mickey\"</span>, <span class=\"string\">\"Mouse\"</span>));</span><br><span class=\"line\">\t\tSystem.out.println(s.contains(<span class=\"keyword\">new</span> Name(<span class=\"string\">\"Mickey\"</span>, <span class=\"string\">\"Mouse\"</span>)));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>无论何时，只要覆写了equals方法，就必须同时覆写hashCode方法。</p>\n<ol start=\"58\">\n<li>产生它的散列码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Name</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String first, last;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Name</span><span class=\"params\">(String first, String last)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.first = first;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.last = last;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Name n)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> n.first.equals(first) &amp;&amp; n.last.equals(last);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">31</span> * first.hashCode() + last.hashCode();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSet&lt;Name&gt; s = <span class=\"keyword\">new</span> HashSet&lt;Name&gt;();</span><br><span class=\"line\">\t\ts.add(<span class=\"keyword\">new</span> Name(<span class=\"string\">\"Donald\"</span>, <span class=\"string\">\"Duck\"</span>));</span><br><span class=\"line\">\t\tSystem.out.println(s.contains(<span class=\"keyword\">new</span> Name(<span class=\"string\">\"Donald\"</span>, <span class=\"string\">\"Duck\"</span>)));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>重载为错误和混乱提供了机会。<br>为了避免无意识地重载，应该机械地对你想要覆写的每一个超类方法都复制其声明。</p>\n<ol start=\"59\">\n<li>差是什么<br>以0开头的整型字面常量将被解释成为八进制数值。<br>千万不要在一个整型字面常量前面加上一个0。</li>\n<li>一行以毙之<br>了解类库中有些什么可以为你节省大量的时间和精力，并且可以提高程序的速度和质量。</li>\n<li>日期游戏<br>Date将一月表示为0，而Calendar延续了这个错误。<br>Date.getDay返回的是Date实例所表示的星期日期，而不是月份日期。<br>在使用Calendar或Date的时候一定要当心，千万要记着查阅API文档。</li>\n<li>名字游戏<br>不要使用IdentityHashMap，除非你需要其基于标识的语义，它不是一个通用目的的Map实现。</li>\n<li>更多同样的问题<br>不要因为偶然地添加了一个返回类型，而将一个构造器声明变成了一个方法声明。<br>要遵守标准的命名约定。</li>\n<li>按余数编组<br>Math.abs不能保证一定会返回非负的结果。</li>\n<li>疑似配需的惊人传奇<br>不要使用基于减法的比较器，除非你能够确保要比较的数值之间的差永远不会大于Integer.MAX_VALUE。<h2 id=\"第8章-更多类之谜\"><a href=\"#第8章-更多类之谜\" class=\"headerlink\" title=\"第8章 更多类之谜\"></a>第8章 更多类之谜</h2></li>\n<li>一件私事<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String className = <span class=\"string\">\"Base\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Derived</span> <span class=\"keyword\">extends</span> <span class=\"title\">Base</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String className = <span class=\"string\">\"Derived\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrivateMatter</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">new</span> Derived().className);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>避免隐藏。<br>一个覆写方法的访问修饰符所提供的访问权限要大于等于被覆写方法的访问修饰符所提供的访问权限。而字段则不必。</p>\n<ol start=\"67\">\n<li>对字符串上瘾<br>要避免重用平台类的名字，并且千万不要难过重用java.lang中的类名。</li>\n<li>灰色的阴影<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShadesOfGray</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(X.Y.Z);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">X</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Y</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">static</span> String Z = <span class=\"string\">\"Black\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> C Y = <span class=\"keyword\">new</span> C();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</span><br><span class=\"line\">\tString Z = <span class=\"string\">\"White\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>当一个变量和一个类型具有相同的名字，并且它们位于相同的作用域时，变量名具有优先权。<br>相似地，变量名和类型名可以遮掩包名。</p>\n<ol start=\"69\">\n<li>黑色的渐隐</li>\n<li>一揽子交易<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> click;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CodeTalk</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doIt</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tprintMessage();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printMessage</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Click\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> hack;</span><br><span class=\"line\"><span class=\"keyword\">import</span> click.CodeTalk;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TypeIt</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClickIt</span> <span class=\"keyword\">extends</span> <span class=\"title\">CodeTalk</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printMessage</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"Hack\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tClickIt clickit = <span class=\"keyword\">new</span> ClickIt();</span><br><span class=\"line\">\t\tclickit.doIt();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>一个包内私有的方法不能被位于另一个包中的某个方法直接覆写。</p>\n<ol start=\"71\">\n<li>进口税</li>\n<li>终极危难<br>final修饰符对方法和字段而言，意味着某些完全不同的事情。对于方法，final意味着该方法不能被覆写（对实例方法而言）或者隐藏（对静态方法而言）。对于字段，final意味着该字段不能被赋值超过一次。</li>\n<li>隐私在公开<br>重用名字是危险的；应该避免隐藏、遮蔽和遮掩。</li>\n<li>同一性的危机</li>\n<li>头还是尾<br>名字重用的术语表<br>第9章 更多库之谜</li>\n<li>乒乓<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PingPong</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] a)</span> </span>&#123;</span><br><span class=\"line\">\t\tThread t = <span class=\"keyword\">new</span> Thread() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\tpong();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t\tt.run();</span><br><span class=\"line\">\t\tSystem.out.print(<span class=\"string\">\"Ping\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">pong</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.print(<span class=\"string\">\"Pong\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>当你想调用一个线程的start方法时要多加小心，别弄错成调用这个线程的run方法了。</p>\n<ol start=\"77\">\n<li>乱锁之妖</li>\n<li>反射的影响<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Reflector</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\tSet&lt;String&gt; s = <span class=\"keyword\">new</span> HashSet&lt;String&gt;();</span><br><span class=\"line\">\t\ts.add(<span class=\"string\">\"foo\"</span>);</span><br><span class=\"line\">\t\tIterator it = s.iterator();</span><br><span class=\"line\">\t\tMethod m = it.getClass().getMethod(<span class=\"string\">\"hasNext\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(m.invoke(it));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>访问位于其它包中的非公共类型的成员是不合法的。<br>Object.getClass().getMethod(“methodName”)这种惯用法虽然很常见，但是却有问题，它不应该被使用。<br>在使用反射访问某个类型时，请使用表示某种可访问类型的Class对象。<br>Method m = Iterator.class.getMethod(“hasNext”);</p>\n<ol start=\"79\">\n<li>狗狗的幸福生活<br>避免遮蔽。<br>使用Thread(Runnable)构造器来替代对Thread的继承。</li>\n<li>更深层的反射<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Outer().greetWorld();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">greetWorld</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(Inner.class.newInstance());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"Hello world\"</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>除非你确实需要一个外围实例i，否则应该优先使用静态成员类而不是非静态成员类。<br>请避免使用反射类实例化内部类。</p>\n<ol start=\"81\">\n<li>无法识别的字符化<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Greeter</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tString greeting = <span class=\"string\">\"Hello world\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; greeting.length(); i++)</span><br><span class=\"line\">\t\t\tSystem.out.write(greeting.charAt(i));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>write(int)是唯一一个在自动刷新功能开启的情况下不刷新PrintStream的输出方法。<br>尽可能使用熟悉的惯用法，如果不得不使用陌生的API，请一定要参考相关的文档。</p>\n<ol start=\"82\">\n<li>啤酒爆炸</li>\n<li>诵读困难者的一神论</li>\n<li>戛然而止<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SelfInterruption</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tThread.currentThread().interrupt();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (Thread.interrupted()) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"Interrupted: \"</span> + Thread.interrupted());</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"Not interrupted: \"</span> + Thread.interrupted());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>调用Thread.interrupted方法总是会清除当前线程的中断状态。<br>Thread.currentThread().isInterrupted()<br>不要使用Thread.interrupted方法，除非你想要清除当前线程的中断状态。</p>\n<ol start=\"85\">\n<li>延迟初始化</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Java解惑\"><a href=\"#Java解惑\" class=\"headerlink\" title=\"Java解惑\"></a>Java解惑</h1><hr>\n<h2 id=\"第2章-表达式之谜\"><a href=\"#第2章-表达式之谜\" class=\"headerlink\" title=\"第2章 表达式之谜\"></a>第2章 表达式之谜</h2><ol>\n<li>奇数性<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isOdd</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> i % <span class=\"number\">2</span> == <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>当取余操作返回一个非零的结果时，它与左操作数具有相同的正负符号。<br>当i是一个负奇数时，i%2等于-1而不是1。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isOdd</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i % <span class=\"number\">2</span> != <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ol start=\"2\">\n<li>找零时刻<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Change</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"number\">2.00</span>-<span class=\"number\">1.10</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>问题在于1.1这个数字不能被精确表示为一个double，因此被表示为最接近它的double值。<br>并不是所有的小数都可以用二进制浮点数精确表示。<br>二进制浮点对于货币计算是非常不合适的。<br>解决该问题的一种方式是使用某种整数类型。<br>解决该问题的另一种方式是使用执行精确小数运算的BigDecimal。<br>一定要用BigDecimal(String)构造器，而千万不要用BigDecimal(double)。<br>在需要精确答案的地方，要避免使用float和double；对于货币计算，要使用int、long或BigDecimal。</p>\n<ol start=\"3\">\n<li><p>长整除</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LongDivision</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> <span class=\"keyword\">long</span> MICROS_PER_DAY = <span class=\"number\">24</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">1000</span> * <span class=\"number\">1000</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> <span class=\"keyword\">long</span> MILLIS_PER_DAY = <span class=\"number\">24</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">1000</span>;</span><br><span class=\"line\">\t\tSystem.out.println(MICROS_PER_DAY/MILLIS_PER_DAY);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> final long MICROS_PER_DAY = 24L <em> 60 </em> 60 <em> 1000 </em> 1000;<br> final long MILLIS_PER_DAY = 24L <em> 60 </em> 60 * 1000;<br>当在操作很大的数字时，千万要提防溢出——它可是一个缄默杀手。</p>\n</li>\n<li>初级问题<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Elementary</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"number\">12345</span> + <span class=\"number\">5432l</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在long类型字面常量中，一定要用大写的L，千万不要用小写的l。<br>要避免使用单个l字母作为变量名。</p>\n<ol start=\"5\">\n<li>十六进制的趣事<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JoyOfHex</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(Long.toHexString(<span class=\"number\">0x100000000L</span> + <span class=\"number\">0xcafebabe</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>负的十进制常量可以很明确地用一个减号来标识。<br>如果十六进制和八进制字面常量的最高位被置位了，那么它们就是负数。<br>System.out.println(Long.toHexString(0x100000000L + 0xcafebabeL));<br>通常最好是避免混合类型的计算。</p>\n<ol start=\"6\">\n<li>多重转型<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Multicast</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println((<span class=\"keyword\">int</span>)(<span class=\"keyword\">char</span>)(<span class=\"keyword\">byte</span>)-<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>如果最初的数值类型是有符号的，就执行符号扩展；如果它是char，那么不管它将要被转换成什么类型，都执行零扩展。</p>\n<ol start=\"7\">\n<li>互换内容<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CleverSwap</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x = <span class=\"number\">1984</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> y = <span class=\"number\">2001</span>;</span><br><span class=\"line\">\t\tx ^= y ^= x ^= y;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"x=\"</span>+x+<span class=\"string\">\";y=\"</span>+y);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>C/C++中运行正确。Java中不正确。<br>操作符的操作数是从左向右求值的。<br>实际运行过程如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> tmp1 = x;</span><br><span class=\"line\"><span class=\"keyword\">int</span> tmp2 = y;</span><br><span class=\"line\"><span class=\"keyword\">int</span> tmp3 = x ^ y;</span><br><span class=\"line\">x = tmp3;</span><br><span class=\"line\">y = tmp2 ^ tmp3;</span><br><span class=\"line\">x = tmp1 ^ y;</span><br><span class=\"line\">y = (x ^= (y ^= x)) ^ y;</span><br></pre></td></tr></table></figure></p>\n<p>在单个表达式中不要对相同的变量赋值两次。</p>\n<ol start=\"8\">\n<li>Dos Equis<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DosEquis</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> x= <span class=\"string\">'X'</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">true</span> ? x : <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">false</span> ? i : x);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>混合类型的计算会引起混乱，而这一点在条件表达式中比在其他任何地方都表现得更明显。<br>确定条件表达式结果类型的规则：<br>（1） 如果第二个和第三个操作数具有相同的类型，那么它就是条件表达式的类型。<br>（2） 如果一个操作数的类型是T，T表示byte、short、或char，而另一个操作数是一个int类型的常数表达式，它的值可以用类型T表示，那么条件表达式的类型就是T。<br>（3） 否则，将对操作数类型进行二进制数字提升，而条件表达式的类型就是第二个和第三个操作数被提升之后的类型。<br>将final修饰符用于i的声明可以把i转变为一个常量表达式。<br>在条件表达式中使用类型相同的第二个和第三个操作数。</p>\n<ol start=\"9\">\n<li>半斤<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x += i;</span><br><span class=\"line\">x = x + i;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>复合赋值E1 op= E2等价于简单赋值E1=(T)((E1)op(E2))，其中T是E1的类型。<br>复合赋值表达式自动将所执行计算的结果转型为其左侧变量的类型。<br>请不要将复合赋值操作符作用于byte、short或char类型的变量。在将复合赋值操作符作用于int类型的变量上时，要确保表达式右侧不是long、float或double类型。在将复合赋值操作符作用于float类型的变量上时，要确保表达式右侧不是double类型。</p>\n<ol start=\"10\">\n<li>八两<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = x + i;</span><br><span class=\"line\">x += i;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>如果在+=操作符左侧的操作数是String类型的，那么它允许右侧的操作数是任意类型。<br>简单赋值操作符（=）允许其左侧的是对象引用类型，只要表达式的右侧与左侧的变量时赋值兼容的即可。</p>\n<h2 id=\"第3章-字符之谜\"><a href=\"#第3章-字符之谜\" class=\"headerlink\" title=\"第3章 字符之谜\"></a>第3章 字符之谜</h2><ol start=\"11\">\n<li>最后的笑声<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LastLaugh</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"H\"</span> + <span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">'H'</span> + <span class=\"string\">'a'</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>当且仅当+操作符的操作数中至少有一个是String类型时，才会执行字符串连接操作。<br>    System.out.println(“2+2=”+2+2);</p>\n<ol start=\"12\">\n<li><p>ABC</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Abc</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tString letters = <span class=\"string\">\"ABC\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span>[] numbers = &#123;<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>&#125;;</span><br><span class=\"line\">\t\tSystem.out.println(letters + <span class=\"string\">\" easy as \"</span> + numbers);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>System.out.println(numbers);<br>要想将一个char数组转换成一个字符串，就要调用String.valueOf(char[])方法。</p>\n</li>\n<li>动物庄园<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnimalFarm</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> String pig = <span class=\"string\">\"length:10\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> String dog = <span class=\"string\">\"length:\"</span> + pig.length();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Animals are equal:\"</span> + pig == dog);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>+比==的优先级高。<br>在使用字符串连接操作符时，总是将重要的操作数用括号括起来。<br>在比较对象引用时，应该优先使用equals方法而不是==操作符，除非需要比较的是对象的标识而不是对象的值。</p>\n<ol start=\"14\">\n<li>转义字符的溃败<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EscapeRout</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// \\u0022 is the Unicode escape for double quote (\")</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"a\\u0022.length()+\\u0022b\"</span>.length());\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>Java对在字符串字面常量中的Unicode转义字符没有提供任何特殊处理。<br>在字符串和字符字面常量中优先选择的是转义字符序列，而不是Unicode转义字符。<br>不要使用Unicode转义字符来表示ASCII字符。</p>\n<ol start=\"15\">\n<li>令人晕头转向的Hello<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Generated by the IBM IDL-to-Java compiler, version 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> * from F:\\TestRoot\\apps\\a1\\units\\include\\PolicyHome.idl</span></span><br><span class=\"line\"><span class=\"comment\"> * Wednesday, June 17, 1998 6:44:40 o'clock AM GMT+00:00</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.print(<span class=\"string\">\"Hell\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"o world\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>问题在于注释的第三行，它包含了字符\\units。<br>Unicode转义字符必须是良构的，即使出现在注释中也是如此。<br>在Javadoc注释中，应该使用HTML实体转义字符来代替Unicode转义字符。<br>工具应该确保不将Windows文件名置于所生成的Java源文件的注释中。</p>\n<ol start=\"16\">\n<li>行打印程序<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinePrinter</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Note: \\u000A is Unicode representation of linefeed (LF)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> c = <span class=\"number\">0x000A</span>;</span><br><span class=\"line\">\t\tSystem.out.println(c);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>第三行的注释<br>除非确实是必需的，否则就不要用使用Unicode转义字符。</p>\n<ol start=\"17\">\n<li>嗯？<br>只有在你要向程序中插入用其他任何方式都无法表示的字符时，Unicode转义字符才是必需的，除此之外的任何情况都应该避免使用它们。</li>\n<li>字符串奶酪<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StringCheese</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">256</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">256</span>; i++)</span><br><span class=\"line\">\t\t\tbytes[i] = (<span class=\"keyword\">byte</span>) i;</span><br><span class=\"line\">\t\tString str = <span class=\"keyword\">new</span> String(bytes);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, n = str.length(); i &lt; n; i++)</span><br><span class=\"line\">\t\t\tSystem.out.print((<span class=\"keyword\">int</span>) str.charAt(i) + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在char序列和byte序列之间转换时，可以且通常应该显式地指定字符集。<br>每当要将一个byte序列转换成一个String时，你都在使用一个字符集，不管是否显式指定了它。</p>\n<ol start=\"19\">\n<li>漂亮的火花（块注释符）<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Classifier</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(classify(<span class=\"string\">'n'</span>) + classify(<span class=\"string\">'+'</span>) + classify(<span class=\"string\">'2'</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> String <span class=\"title\">classify</span><span class=\"params\">(<span class=\"keyword\">char</span> ch)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"string\">\"0123456789\"</span>.indexOf(ch) &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"NUMERAL \"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"string\">\"abcdefghijklmnopqrstuvwxyz\"</span>.indexOf(ch) &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"LETTER \"</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">/* (Operators not supported yet)</span></span><br><span class=\"line\"><span class=\"comment\">\t\tif (\"+-*/</span>&amp;|!=<span class=\"string\">\".indexOf(ch) &gt;= 0)</span></span><br><span class=\"line\"><span class=\"string\">\t\treturn \"</span>OPERATOR <span class=\"string\">\";</span></span><br><span class=\"line\"><span class=\"string\">\t\t*/</span></span><br><span class=\"line\"><span class=\"string\">\t\treturn \"</span>UNKNOWN <span class=\"string\">\";</span></span><br><span class=\"line\"><span class=\"string\">\t&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在注释中没有特殊处理字符串字面常量。<br>块注释不能嵌套。<br>注释掉代码段的最好方式是使用单行的注释序列。<br>块注释不能可靠地注释掉代码段。</p>\n<ol start=\"20\">\n<li>我的类是什么<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Me</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(Me.class.getName().replaceAll(<span class=\"string\">\".\"</span>, <span class=\"string\">\"/\"</span>) + <span class=\"string\">\".class\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>String.replaceAll接受了一个正则表达式作为它的第一个参数。正则表达式”.”可以匹配任何单个的字符。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Me.class.getName().replaceAll(<span class=\"string\">\"\\\\.\"</span>, <span class=\"string\">\"/\"</span>);</span><br><span class=\"line\">System.out.println(Me.class.getName().replaceAll(Pattern.quote(<span class=\"string\">\".\"</span>), <span class=\"string\">\"/\"</span>) + <span class=\"string\">\".class\"</span>);</span><br></pre></td></tr></table></figure></p>\n<ol start=\"21\">\n<li>我的类是什么？镜头2<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MeToo</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(MeToo.class.getName().replaceAll(<span class=\"string\">\"\\\\.\"</span>,</span><br><span class=\"line\">\t\t\t\tFile.separator)</span><br><span class=\"line\">\t\t\t\t+ <span class=\"string\">\".class\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>第二个参数不是一个普通的字符串，而是一个替代字符串。在替代字符串中出现的反斜杠会把紧随其后的字符进行转义，从而导致其被按字面含义而处理了。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(MeToo.class.getName().replaceAll(<span class=\"string\">\"\\\\.\"</span>,</span><br><span class=\"line\">    Matcher.quoteReplacement(File.separator))</span><br><span class=\"line\">    + <span class=\"string\">\".class\"</span>);</span><br><span class=\"line\">System.out.println(MeToo.class.getName().replace(<span class=\"string\">\".\"</span>, File.separator)     + <span class=\"string\">\".class\"</span>);</span><br><span class=\"line\">System.out.println(MeToo.class.getName().replace(<span class=\"string\">'.'</span>,                    File.separatorChar) + <span class=\"string\">\".class\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>在使用不熟悉的类库方法时一定要格外小心。</p>\n<ol start=\"22\">\n<li>URL的愚弄<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BrowserTest</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.print(<span class=\"string\">\"iexplore:\"</span>);</span><br><span class=\"line\">\t\thttp: <span class=\"comment\">// www.google.com;</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\":maximize\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在程序中间出现的URL是一个语句标号（statement label）后面跟着尾注释（end-of-line comment）。<br>仔细地写注释，并让它们跟上时代；去除那些已遭废弃的代码。</p>\n<ol start=\"23\">\n<li>不劳而获<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rhymes</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Random rnd = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tStringBuffer word = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (rnd.nextInt(<span class=\"number\">2</span>)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t\tword = <span class=\"keyword\">new</span> StringBuffer(<span class=\"string\">'P'</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\t\tword = <span class=\"keyword\">new</span> StringBuffer(<span class=\"string\">'G'</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\tword = <span class=\"keyword\">new</span> StringBuffer(<span class=\"string\">'M'</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tword.append(<span class=\"string\">'a'</span>);</span><br><span class=\"line\">\t\tword.append(<span class=\"string\">'i'</span>);</span><br><span class=\"line\">\t\tword.append(<span class=\"string\">'n'</span>);</span><br><span class=\"line\">\t\tSystem.out.println(word);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>要当心栅栏柱错误。<br>不要从一个非空的case向下进入另一个case。<br>不管在什么时候，都要尽可能使用熟悉的惯用法和API。如果必须使用不熟悉的API，那么请仔细阅读其文档。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (rnd.nextInt(<span class=\"number\">3</span>)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t\tword = <span class=\"keyword\">new</span> StringBuffer(<span class=\"string\">\"P\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\t\tword = <span class=\"keyword\">new</span> StringBuffer(<span class=\"string\">\"G\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\tword = <span class=\"keyword\">new</span> StringBuffer(<span class=\"string\">\"M\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"PGM\"</span>.charAt(rnd.nextInt(<span class=\"number\">3</span>)) + <span class=\"string\">\"ain\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rhymes</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</span><br><span class=\"line\">\t\tString a[] = &#123; <span class=\"string\">\"Main\"</span>, <span class=\"string\">\"Pain\"</span>, <span class=\"string\">\"Gain\"</span> &#125;;</span><br><span class=\"line\">\t\tSystem.out.println(randomElement(a));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Random rnd = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">randomElement</span><span class=\"params\">(String[] a)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a[rnd.nextInt(a.length)];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>char不是String，而是更像int。<br>要提防各种诡异的谜题。</p>\n<h2 id=\"第4章-循环之谜\"><a href=\"#第4章-循环之谜\" class=\"headerlink\" title=\"第4章 循环之谜\"></a>第4章 循环之谜</h2><ol start=\"24\">\n<li>尽情享受每一个字节<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BigDelight</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">byte</span> b = Byte.MIN_VALUE; b &lt; Byte.MAX_VALUE; b++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (b == <span class=\"number\">0x90</span>)</span><br><span class=\"line\">\t\t\t\tSystem.out.print(<span class=\"string\">\"Joy!\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (b == (<span class=\"keyword\">byte</span>)<span class=\"number\">0x90</span>)\tSystem.out.print(<span class=\"string\">\"Joy!\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> ((b &amp; <span class=\"number\">0xff</span>) == <span class=\"number\">0x90</span>)\tSystem.out.print(<span class=\"string\">\"Joy!\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> TARGET = (<span class=\"keyword\">byte</span>) <span class=\"number\">0x90</span>; </span><br><span class=\"line\"><span class=\"keyword\">if</span> (b == TARGET)\tSystem.out.print(<span class=\"string\">\"Joy!\"</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>要避免混合类型比较，因为它们内在地容易引起混乱。<br>请使用声明的常量替代“魔数”。</p>\n<ol start=\"25\">\n<li>无情的增量操作<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Increment</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++)</span><br><span class=\"line\">\t\t\tj = j++;</span><br><span class=\"line\">\t\tSystem.out.println(j);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>不要在单个表达式中对相同的变量赋值超过一次。</p>\n<ol start=\"26\">\n<li>在循环中<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InTheLoop</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> END = Integer.MAX_VALUE;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> START = END - <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = START; i &lt;= END; i++)</span><br><span class=\"line\">\t\t\tcount++;</span><br><span class=\"line\">\t\tSystem.out.println(count);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">long</span> i = START; i &lt;= END; i++)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>无论你在何时使用了一个整数类型，都要意识到其边界条件。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i = START;</span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">\tcount++;</span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span> (i++ != END);</span><br></pre></td></tr></table></figure></p>\n<ol start=\"27\">\n<li>变幻莫测的i值<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shifty</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(-<span class=\"number\">1</span> &lt;&lt; i != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\ti++;</span><br><span class=\"line\">\t\tSystem.out.println(i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>移位操作符只使用其右操作数的低5位作为移位长度。或者是低6位，如果其左操作数是一个long类型数值。</p>\n<ol start=\"28\">\n<li>就</li>\n<li>Gf</li>\n<li>D</li>\n<li>G</li>\n<li>G</li>\n<li>G</li>\n<li>G</li>\n<li>G<h2 id=\"第5章-异常之谜\"><a href=\"#第5章-异常之谜\" class=\"headerlink\" title=\"第5章 异常之谜\"></a>第5章 异常之谜</h2></li>\n<li>F</li>\n<li>F</li>\n<li>F</li>\n<li>F</li>\n<li>F</li>\n<li>F</li>\n<li>F</li>\n<li>F</li>\n<li>F</li>\n<li>F</li>\n</ol>\n<h2 id=\"第6章-类之谜\"><a href=\"#第6章-类之谜\" class=\"headerlink\" title=\"第6章 类之谜\"></a>第6章 类之谜</h2><ol start=\"46\">\n<li>令人混淆的构造器案例<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Confusing</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Confusing</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Object\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Confusing</span><span class=\"params\">(<span class=\"keyword\">double</span>[] dArray)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"double array\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Confusing(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>Java的重载解析过程是分两阶段运行的。第一阶段选取所有可获得并且可应用的方法或构造器。第二阶段在第一阶段选取的方法或构造器中选取最精确的一个。<br>在测试哪一个方法或构造器最精确时，并没有使用实参。<br>要想强制要求编译器选择一个精确的重载版本，需要将实参转型为形参所声明的类型。<br>避免使用重载。</p>\n<ol start=\"47\">\n<li>啊呀！狸猫变犬子<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Counter</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> count;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">increment</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tcount++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> count;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title\">Counter</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Dog</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">woof</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tincrement();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> <span class=\"keyword\">extends</span> <span class=\"title\">Counter</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Cat</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">meow</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tincrement();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Ruckus</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tDog[] dogs = &#123; <span class=\"keyword\">new</span> Dog(), <span class=\"keyword\">new</span> Dog() &#125;;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; dogs.length; i++)</span><br><span class=\"line\">\t\t\tdogs[i].woof();</span><br><span class=\"line\">\t\tCat[] cats = &#123; <span class=\"keyword\">new</span> Cat(), <span class=\"keyword\">new</span> Cat(), <span class=\"keyword\">new</span> Cat() &#125;;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; cats.length; i++)</span><br><span class=\"line\">\t\t\tcats[i].meow();</span><br><span class=\"line\">\t\tSystem.out.print(Dog.getCount() + <span class=\"string\">\" woofs and \"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(Cat.getCount() + <span class=\"string\">\" meows\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>每一个静态字段在声明它的类及其所有子类中共享一份单一的副本。<br>优选组合而不是继承。</p>\n<ol start=\"48\">\n<li>我所得到的都是静态的<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bark</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.print(<span class=\"string\">\"woof \"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Basenji</span> <span class=\"keyword\">extends</span> <span class=\"title\">Dog</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bark</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bark</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</span><br><span class=\"line\">\t\tDog woofer = <span class=\"keyword\">new</span> Dog();</span><br><span class=\"line\">\t\tDog nipper = <span class=\"keyword\">new</span> Basenji();</span><br><span class=\"line\">\t\twoofer.bark();</span><br><span class=\"line\">\t\tnipper.bark();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>对静态方法的调用不存在任何动态的分派机制。<br>千万不要用一个表达式来标识一个静态方法调用。<br>千万不要隐藏静态方法。</p>\n<ol start=\"49\">\n<li>比生命更大<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Elvis</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Elvis INSTANCE = <span class=\"keyword\">new</span> Elvis();</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> beltSize;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> CURRENT_YEAR = Calendar.getInstance().get(</span><br><span class=\"line\">\t\t\tCalendar.YEAR);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Elvis</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tbeltSize = CURRENT_YEAR - <span class=\"number\">1930</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">beltSize</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> beltSize;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Elvis wears a size \"</span> + INSTANCE.beltSize()</span><br><span class=\"line\">\t\t\t\t+ <span class=\"string\">\" belt.\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在final类型的静态字段被初始化之前，存在着读取其值的可能。<br>要想改正一个类初始化循环，需要重新对静态字段的初始器进行排序，使得每一个初始器都出现在任何依赖于它的初始器之前。<br>要当心类初始化循环。</p>\n<ol start=\"50\">\n<li>不是你的类型<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Type1</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tString s = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tSystem.out.println(s <span class=\"keyword\">instanceof</span> String);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>instanceof操作符被定义为在其左操作数为null时返回false。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Type2</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">new</span> Type2() <span class=\"keyword\">instanceof</span> String);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>instanceof操作符有这样的要求：如果两个操作数的类型都是类，其中一个必须是另一个的子类型。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Type3</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</span><br><span class=\"line\">\t\tType3 t3 = (Type3) <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ol start=\"51\">\n<li>要点何在<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> x, y;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String name; <span class=\"comment\">// Cached at construction time</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tPoint(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">\t\tname = makeName();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">makeName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"[\"</span> + x + <span class=\"string\">\",\"</span> + y + <span class=\"string\">\"]\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ColorPoint</span> <span class=\"keyword\">extends</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String color;</span><br><span class=\"line\"></span><br><span class=\"line\">\tColorPoint(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, String color) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(x, y);</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.color = color;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">makeName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.makeName() + <span class=\"string\">\":\"</span> + color;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">new</span> ColorPoint(<span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"string\">\"purple\"</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在一个final类型的实例字段被赋值之前，存在着取用其值的可能。<br>循环的实例初始化时可以且总是应该避免的。<br>千万不要在构造器中调用可覆写的方法。</p>\n<ol start=\"52\">\n<li>总和的玩笑<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cache</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\t\tinitializeIfNecessary();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> sum;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getSum</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tinitializeIfNecessary();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> initialized = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">initializeIfNecessary</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!initialized) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++)</span><br><span class=\"line\">\t\t\t\tsum += i;</span><br><span class=\"line\">\t\t\tinitialized = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(Cache.getSum());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>要么使用积极初始化，要么使用延迟初始化，千万不要同时使用二者。<br>请考虑类初始化的顺序，特别是当初始化显得很重要时更是如此。</p>\n<ol start=\"53\">\n<li>做你的事吧</li>\n<li>Null与Void<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Null</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">greet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Hello world!\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t((Null) <span class=\"keyword\">null</span>).greet();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>静态方法调用的限定表达式是可以计算的，但是它的值将被忽略。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Null.greet();</span><br><span class=\"line\">greet();</span><br></pre></td></tr></table></figure></p>\n<ol start=\"55\">\n<li>特创论<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Creator</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++)</span><br><span class=\"line\">\t\t\tCreature creature = <span class=\"keyword\">new</span> Creature();</span><br><span class=\"line\">\t\tSystem.out.println(Creature.numCreated());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Creature</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> numCreated = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Creature</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tnumCreated++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">numCreated</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> numCreated;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>一个局部变量声明作为一条语句只能直接出现在一个语句块中。（一个语句块是由一对花括号以及包含在这对花括号的语句和声明构成的）<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">\t\t\tCreature creature = <span class=\"keyword\">new</span> Creature();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">new</span> Creature();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Thread-safe creation counter</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Creature</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> numCreated;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Creature</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (Creature.class) &#123;</span><br><span class=\"line\">\t\t\tnumCreated++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">long</span> <span class=\"title\">numCreated</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> numCreated;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Creature</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> AtomicLong numCreated = <span class=\"keyword\">new</span> AtomicLong();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Creature</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tnumCreated.incrementAndGet();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">numCreated</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> numCreated.get();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在使用一个变量来对实例的创建进行计数时，要使用long类型而不是int类型的变量，以防止溢出。</p>\n<h2 id=\"第7章-库之谜\"><a href=\"#第7章-库之谜\" class=\"headerlink\" title=\"第7章 库之谜\"></a>第7章 库之谜</h2><ol start=\"56\">\n<li>大问题<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BigProblem</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tBigInteger fiveThousand = <span class=\"keyword\">new</span> BigInteger(<span class=\"string\">\"5000\"</span>);</span><br><span class=\"line\">\t\tBigInteger fiftyThousand = <span class=\"keyword\">new</span> BigInteger(<span class=\"string\">\"50000\"</span>);</span><br><span class=\"line\">\t\tBigInteger fiveHundredThousand = <span class=\"keyword\">new</span> BigInteger(<span class=\"string\">\"500000\"</span>);</span><br><span class=\"line\">\t\tBigInteger total = BigInteger.ZERO;</span><br><span class=\"line\">\t\ttotal.add(fiveThousand);</span><br><span class=\"line\">\t\ttotal.add(fiftyThousand);</span><br><span class=\"line\">\t\ttotal.add(fiveHundredThousand);</span><br><span class=\"line\">\t\tSystem.out.println(total);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>BigInteger实例是不可变的。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">total = total.add(fiveThousand);</span><br><span class=\"line\">total = total.add(fiftyThousand);</span><br><span class=\"line\">total = total.add(fiveHundredThousand);</span><br></pre></td></tr></table></figure></p>\n<ol start=\"57\">\n<li>名字里有什么<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Name</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String first, last;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Name</span><span class=\"params\">(String first, String last)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.first = first;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.last = last;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!(o <span class=\"keyword\">instanceof</span> Name))</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\tName n = (Name) o;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> n.first.equals(first) &amp;&amp; n.last.equals(last);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSet&lt;Name&gt; s = <span class=\"keyword\">new</span> HashSet&lt;Name&gt;();</span><br><span class=\"line\">\t\ts.add(<span class=\"keyword\">new</span> Name(<span class=\"string\">\"Mickey\"</span>, <span class=\"string\">\"Mouse\"</span>));</span><br><span class=\"line\">\t\tSystem.out.println(s.contains(<span class=\"keyword\">new</span> Name(<span class=\"string\">\"Mickey\"</span>, <span class=\"string\">\"Mouse\"</span>)));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>无论何时，只要覆写了equals方法，就必须同时覆写hashCode方法。</p>\n<ol start=\"58\">\n<li>产生它的散列码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Name</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String first, last;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Name</span><span class=\"params\">(String first, String last)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.first = first;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.last = last;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Name n)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> n.first.equals(first) &amp;&amp; n.last.equals(last);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">31</span> * first.hashCode() + last.hashCode();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSet&lt;Name&gt; s = <span class=\"keyword\">new</span> HashSet&lt;Name&gt;();</span><br><span class=\"line\">\t\ts.add(<span class=\"keyword\">new</span> Name(<span class=\"string\">\"Donald\"</span>, <span class=\"string\">\"Duck\"</span>));</span><br><span class=\"line\">\t\tSystem.out.println(s.contains(<span class=\"keyword\">new</span> Name(<span class=\"string\">\"Donald\"</span>, <span class=\"string\">\"Duck\"</span>)));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>重载为错误和混乱提供了机会。<br>为了避免无意识地重载，应该机械地对你想要覆写的每一个超类方法都复制其声明。</p>\n<ol start=\"59\">\n<li>差是什么<br>以0开头的整型字面常量将被解释成为八进制数值。<br>千万不要在一个整型字面常量前面加上一个0。</li>\n<li>一行以毙之<br>了解类库中有些什么可以为你节省大量的时间和精力，并且可以提高程序的速度和质量。</li>\n<li>日期游戏<br>Date将一月表示为0，而Calendar延续了这个错误。<br>Date.getDay返回的是Date实例所表示的星期日期，而不是月份日期。<br>在使用Calendar或Date的时候一定要当心，千万要记着查阅API文档。</li>\n<li>名字游戏<br>不要使用IdentityHashMap，除非你需要其基于标识的语义，它不是一个通用目的的Map实现。</li>\n<li>更多同样的问题<br>不要因为偶然地添加了一个返回类型，而将一个构造器声明变成了一个方法声明。<br>要遵守标准的命名约定。</li>\n<li>按余数编组<br>Math.abs不能保证一定会返回非负的结果。</li>\n<li>疑似配需的惊人传奇<br>不要使用基于减法的比较器，除非你能够确保要比较的数值之间的差永远不会大于Integer.MAX_VALUE。<h2 id=\"第8章-更多类之谜\"><a href=\"#第8章-更多类之谜\" class=\"headerlink\" title=\"第8章 更多类之谜\"></a>第8章 更多类之谜</h2></li>\n<li>一件私事<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String className = <span class=\"string\">\"Base\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Derived</span> <span class=\"keyword\">extends</span> <span class=\"title\">Base</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String className = <span class=\"string\">\"Derived\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrivateMatter</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">new</span> Derived().className);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>避免隐藏。<br>一个覆写方法的访问修饰符所提供的访问权限要大于等于被覆写方法的访问修饰符所提供的访问权限。而字段则不必。</p>\n<ol start=\"67\">\n<li>对字符串上瘾<br>要避免重用平台类的名字，并且千万不要难过重用java.lang中的类名。</li>\n<li>灰色的阴影<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShadesOfGray</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(X.Y.Z);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">X</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Y</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">static</span> String Z = <span class=\"string\">\"Black\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> C Y = <span class=\"keyword\">new</span> C();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</span><br><span class=\"line\">\tString Z = <span class=\"string\">\"White\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>当一个变量和一个类型具有相同的名字，并且它们位于相同的作用域时，变量名具有优先权。<br>相似地，变量名和类型名可以遮掩包名。</p>\n<ol start=\"69\">\n<li>黑色的渐隐</li>\n<li>一揽子交易<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> click;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CodeTalk</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doIt</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tprintMessage();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printMessage</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Click\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> hack;</span><br><span class=\"line\"><span class=\"keyword\">import</span> click.CodeTalk;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TypeIt</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClickIt</span> <span class=\"keyword\">extends</span> <span class=\"title\">CodeTalk</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printMessage</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"Hack\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tClickIt clickit = <span class=\"keyword\">new</span> ClickIt();</span><br><span class=\"line\">\t\tclickit.doIt();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>一个包内私有的方法不能被位于另一个包中的某个方法直接覆写。</p>\n<ol start=\"71\">\n<li>进口税</li>\n<li>终极危难<br>final修饰符对方法和字段而言，意味着某些完全不同的事情。对于方法，final意味着该方法不能被覆写（对实例方法而言）或者隐藏（对静态方法而言）。对于字段，final意味着该字段不能被赋值超过一次。</li>\n<li>隐私在公开<br>重用名字是危险的；应该避免隐藏、遮蔽和遮掩。</li>\n<li>同一性的危机</li>\n<li>头还是尾<br>名字重用的术语表<br>第9章 更多库之谜</li>\n<li>乒乓<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PingPong</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] a)</span> </span>&#123;</span><br><span class=\"line\">\t\tThread t = <span class=\"keyword\">new</span> Thread() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\tpong();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t\tt.run();</span><br><span class=\"line\">\t\tSystem.out.print(<span class=\"string\">\"Ping\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">pong</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.print(<span class=\"string\">\"Pong\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>当你想调用一个线程的start方法时要多加小心，别弄错成调用这个线程的run方法了。</p>\n<ol start=\"77\">\n<li>乱锁之妖</li>\n<li>反射的影响<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Reflector</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\tSet&lt;String&gt; s = <span class=\"keyword\">new</span> HashSet&lt;String&gt;();</span><br><span class=\"line\">\t\ts.add(<span class=\"string\">\"foo\"</span>);</span><br><span class=\"line\">\t\tIterator it = s.iterator();</span><br><span class=\"line\">\t\tMethod m = it.getClass().getMethod(<span class=\"string\">\"hasNext\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(m.invoke(it));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>访问位于其它包中的非公共类型的成员是不合法的。<br>Object.getClass().getMethod(“methodName”)这种惯用法虽然很常见，但是却有问题，它不应该被使用。<br>在使用反射访问某个类型时，请使用表示某种可访问类型的Class对象。<br>Method m = Iterator.class.getMethod(“hasNext”);</p>\n<ol start=\"79\">\n<li>狗狗的幸福生活<br>避免遮蔽。<br>使用Thread(Runnable)构造器来替代对Thread的继承。</li>\n<li>更深层的反射<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Outer().greetWorld();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">greetWorld</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(Inner.class.newInstance());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"Hello world\"</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>除非你确实需要一个外围实例i，否则应该优先使用静态成员类而不是非静态成员类。<br>请避免使用反射类实例化内部类。</p>\n<ol start=\"81\">\n<li>无法识别的字符化<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Greeter</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tString greeting = <span class=\"string\">\"Hello world\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; greeting.length(); i++)</span><br><span class=\"line\">\t\t\tSystem.out.write(greeting.charAt(i));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>write(int)是唯一一个在自动刷新功能开启的情况下不刷新PrintStream的输出方法。<br>尽可能使用熟悉的惯用法，如果不得不使用陌生的API，请一定要参考相关的文档。</p>\n<ol start=\"82\">\n<li>啤酒爆炸</li>\n<li>诵读困难者的一神论</li>\n<li>戛然而止<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SelfInterruption</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tThread.currentThread().interrupt();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (Thread.interrupted()) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"Interrupted: \"</span> + Thread.interrupted());</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"Not interrupted: \"</span> + Thread.interrupted());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>调用Thread.interrupted方法总是会清除当前线程的中断状态。<br>Thread.currentThread().isInterrupted()<br>不要使用Thread.interrupted方法，除非你想要清除当前线程的中断状态。</p>\n<ol start=\"85\">\n<li>延迟初始化</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjukz83ni00017syvv1qgqp4l","category_id":"cjukz83nw00037syv4dunyyvt","_id":"cjukz83o200057syv9qb1zmbc"},{"post_id":"cjukz83nq00027syvtt75nz9q","category_id":"cjukz83o100047syv8t60k7is","_id":"cjukz83o300067syv1b6lnnkn"},{"post_id":"cjukz83od00087syvk167pbhf","category_id":"cjukz83oi00097syvfoxxoxr1","_id":"cjukz83oj000a7syvyi1nqwna"},{"post_id":"cjukz83op000c7syvug0obp7a","category_id":"cjukz83or000d7syvu5m85bmz","_id":"cjukz83os000e7syvkculdqq9"}],"PostTag":[],"Tag":[]}}